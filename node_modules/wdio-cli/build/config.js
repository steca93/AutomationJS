'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.QUESTIONNAIRE = exports.CLI_PARAMS = exports.CONFIG_HELPER_SUCCESS_MESSAGE = exports.CONFIG_HELPER_INTRO = exports.USAGE = exports.SUPPORTED_RUNNERS = exports.SUPPORTED_SERVICES = exports.SUPPORTED_REPORTER = exports.SUPPORTED_FRAMEWORKS = undefined;

var _sourceMapSupport2 = require('source-map-support');

(0, _sourceMapSupport2.install)();
const SUPPORTED_FRAMEWORKS = exports.SUPPORTED_FRAMEWORKS = ['mocha', // https://github.com/webdriverio/wdio-mocha-framework
'jasmine', // https://github.com/webdriverio/wdio-jasmine-framework
'cucumber' // https://github.com/webdriverio/wdio-cucumber-framework
];

const SUPPORTED_REPORTER = exports.SUPPORTED_REPORTER = [' dot - https://www.npmjs.com/package/wdio-dot-reporter', ' spec - https://www.npmjs.com/package/wdio-spec-reporter', ' junit - https://www.npmjs.com/package/wdio-junit-reporter', ' allure - https://www.npmjs.com/package/wdio-allure-reporter', ' teamcity - https://www.npmjs.com/package/wdio-teamcity-reporter', ' sumologic - https://www.npmjs.com/package/wdio-sumologic-reporter', ' json - https://www.npmjs.com/package/wdio-json-reporter', ' concise - https://www.npmjs.com/package/wdio-concise-reporter', ' testrail - https://www.npmjs.com/package/wdio-testrail-reporter', ' mochawesome - https://www.npmjs.com/package/wdio-mochawesome-reporter'];

const SUPPORTED_SERVICES = exports.SUPPORTED_SERVICES = [' sauce - https://www.npmjs.com/package/wdio-sauce-service', ' browserstack - https://www.npmjs.com/package/wdio-browserstack-service', ' testingbot - https://www.npmjs.com/package/wdio-testingbot-service', ' appium - https://www.npmjs.com/package/wdio-appium-service', ' firefox-profile - https://www.npmjs.com/package/wdio-firefox-profile-service', ' selenium-standalone - https://www.npmjs.com/package/wdio-selenium-standalone-service', ' phantomjs - https://www.npmjs.com/package/wdio-phantomjs-service', ' static-server - https://www.npmjs.com/package/wdio-static-server-service', ' visual-regression - https://www.npmjs.com/package/wdio-visual-regression-service', ' webpack - https://www.npmjs.com/package/wdio-webpack-service', ' webpack-dev-server - https://www.npmjs.com/package/wdio-webpack-dev-server-service', ' chromedriver - https://www.npmjs.com/package/wdio-chromedriver-service', ' iedriver - https://www.npmjs.com/package/wdio-iedriver-service'];

const SUPPORTED_RUNNERS = exports.SUPPORTED_RUNNERS = [' local - https://www.npmjs.com/package/wdio-local-runner', ' lambda - https://www.npmjs.com/package/wdio-lambda-runner'];

const LOG_LEVELS = ['trace', 'debug', 'info', 'warn', 'error'];

const USAGE = exports.USAGE = `
WebdriverIO CLI runner

Usage: wdio [options] [configFile]
Usage: wdio config
Usage: wdio repl <browserName>

config file defaults to wdio.conf.js
The [options] object will override values from the config file.
An optional list of spec files can be piped to wdio that will override configured specs.
Same applies to the exclude option. It can take a list of specs to exclude for a given run 
and it also overrides the exclude key from the config file.`;

const CONFIG_HELPER_INTRO = exports.CONFIG_HELPER_INTRO = `
=========================
WDIO Configuration Helper
=========================
`;

const CONFIG_HELPER_SUCCESS_MESSAGE = exports.CONFIG_HELPER_SUCCESS_MESSAGE = `
Configuration file was created successfully!
To run your tests, execute:
$ wdio wdio.conf.js
`;

const CLI_PARAMS = exports.CLI_PARAMS = [{
    name: 'help',
    description: 'prints WebdriverIO help menu'
}, {
    name: 'version',
    description: 'prints WebdriverIO version'
}, {
    name: 'host',
    alias: 'h',
    describe: 'automation driver host address',
    type: 'string'
}, {
    name: 'port',
    alias: 'p',
    describe: 'automation driver port',
    type: 'number'
}, {
    name: 'user',
    alias: 'u',
    description: 'username if using a cloud service as automation backend',
    type: 'string'
}, {
    name: 'key',
    alias: 'k',
    description: 'corresponding access key to the user',
    type: 'string'
}, {
    name: 'watch',
    description: 'watch specs for changes',
    type: 'boolean'
}, {
    name: 'logLevel',
    alias: 'l',
    description: 'level of logging verbosity',
    choices: LOG_LEVELS
}, {
    name: 'bail',
    description: `stop test runner after specific amount of tests have failed`,
    type: 'number'
}, {
    name: 'baseUrl',
    description: 'shorten url command calls by setting a base url',
    type: 'string'
}, {
    name: 'waitforTimeout',
    alias: 'w',
    description: 'timeout for all waitForXXX commands',
    type: 'number'
}, {
    name: 'framework',
    alias: 'f',
    description: `defines the framework (Mocha, Jasmine or Cucumber) to run the specs`,
    type: 'string'
}, {
    name: 'reporters',
    alias: 'r',
    description: `reporters to print out the results on stdout`,
    type: 'array'
}, {
    name: 'suite',
    description: `overwrites the specs attribute and runs the defined suite`,
    type: 'array'
}, {
    name: 'spec',
    description: `run only a certain spec file - overrides specs piped from stdin`,
    type: 'array'
}, {
    name: 'exclude',
    description: `exclude certain spec file from the test run - overrides exclude piped from stdin`,
    type: 'array'
}, {
    name: 'mochaOpts',
    description: `Mocha options`
}, {
    name: 'jasmineOpts',
    description: `Jasmine options`
}, {
    name: 'cucumberOpts',
    description: `Cucumber options`
}];

const QUESTIONNAIRE = exports.QUESTIONNAIRE = [{
    type: 'list',
    name: 'runner',
    message: 'Where should your tests be launched',
    choices: SUPPORTED_RUNNERS,
    filter: runner => runner.split(/-/)[0].trim()
}, {
    type: 'confirm',
    name: 'installRunner',
    message: 'Shall I install the runner plugin for you?',
    default: true
}, {
    type: 'list',
    name: 'backend',
    message: 'Where is your automation backend located?',
    choices: ['On my local machine', 'In the cloud using Sauce Labs, Browserstack or Testingbot', 'In the cloud using a different service', 'I have my own Selenium cloud']
}, {
    type: 'input',
    name: 'host',
    message: 'What is the host address of that cloud service?',
    when: answers => answers.backend.indexOf('different service') > -1
}, {
    type: 'input',
    name: 'port',
    message: 'What is the port on which that service is running?',
    default: '80',
    when: answers => answers.backend.indexOf('different service') > -1
}, {
    type: 'input',
    name: 'env_user',
    message: 'Environment variable for username',
    default: 'SAUCE_USERNAME',
    when: answers => answers.backend.indexOf('In the cloud') > -1
}, {
    type: 'input',
    name: 'env_key',
    message: 'Environment variable for access key',
    default: 'SAUCE_ACCESS_KEY',
    when: answers => answers.backend.indexOf('In the cloud') > -1
}, {
    type: 'input',
    name: 'host',
    message: 'What is the IP or URI to your Selenium standalone server?',
    default: '0.0.0.0',
    when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
    type: 'input',
    name: 'port',
    message: 'What is the port which your Selenium standalone server is running on?',
    default: '4444',
    when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
    type: 'input',
    name: 'path',
    message: 'What is the path to your Selenium standalone server?',
    default: '/wd/hub',
    when: answers => answers.backend.indexOf('own Selenium cloud') > -1
}, {
    type: 'list',
    name: 'framework',
    message: 'Which framework do you want to use?',
    choices: SUPPORTED_FRAMEWORKS
}, {
    type: 'confirm',
    name: 'installFramework',
    message: 'Shall I install the framework adapter for you?',
    default: true
}, {
    type: 'list',
    name: 'executionMode',
    message: 'Do you want to run WebdriverIO commands synchronous or asynchronous?',
    choices: ['sync', 'async']
}, {
    type: 'input',
    name: 'specs',
    message: 'Where are your test specs located?',
    default: './test/specs/**/*.js',
    when: answers => answers.framework.match(/(mocha|jasmine)/)
}, {
    type: 'input',
    name: 'specs',
    message: 'Where are your feature files located?',
    default: './features/**/*.feature',
    when: answers => answers.framework === 'cucumber'
}, {
    type: 'input',
    name: 'stepDefinitions',
    message: 'Where are your step definitions located?',
    default: './features/step-definitions',
    when: answers => answers.framework === 'cucumber'
}, {
    type: 'checkbox',
    name: 'reporters',
    message: 'Which reporter do you want to use?',
    choices: SUPPORTED_REPORTER,
    filter: reporters => reporters.map(reporter => `wdio-${reporter.split(/-/)[0].trim()}-reporter`)
}, {
    type: 'confirm',
    name: 'installReporter',
    message: 'Shall I install the reporter library for you?',
    default: true,
    when: answers => answers.reporters.length > 0
}, {
    type: 'checkbox',
    name: 'services',
    message: 'Do you want to add a service to your test setup?',
    choices: SUPPORTED_SERVICES,
    filter: services => services.map(service => `wdio-${service.split(/- /)[0].trim()}-service`)
}, {
    type: 'confirm',
    name: 'installServices',
    message: 'Shall I install the services for you?',
    default: true,
    when: answers => answers.services.length > 0
}, {
    type: 'input',
    name: 'outputDir',
    message: 'In which directory should the xunit reports get stored?',
    default: './',
    when: answers => answers.reporters.includes('junit')
}, {
    type: 'input',
    name: 'outputDir',
    message: 'In which directory should the json reports get stored?',
    default: './',
    when: answers => answers.reporters.includes('json')
}, {
    type: 'input',
    name: 'outputDir',
    message: 'In which directory should the mochawesome json reports get stored?',
    default: './',
    when: answers => answers.reporters.includes('mochawesome')
}, {
    type: 'list',
    name: 'logLevel',
    message: 'Level of logging verbosity',
    default: 'info',
    choices: LOG_LEVELS
}, {
    type: 'input',
    name: 'baseUrl',
    message: 'What is the base url?',
    default: 'http://localhost'
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25maWcuanMiXSwibmFtZXMiOlsiU1VQUE9SVEVEX0ZSQU1FV09SS1MiLCJTVVBQT1JURURfUkVQT1JURVIiLCJTVVBQT1JURURfU0VSVklDRVMiLCJTVVBQT1JURURfUlVOTkVSUyIsIkxPR19MRVZFTFMiLCJVU0FHRSIsIkNPTkZJR19IRUxQRVJfSU5UUk8iLCJDT05GSUdfSEVMUEVSX1NVQ0NFU1NfTUVTU0FHRSIsIkNMSV9QQVJBTVMiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJhbGlhcyIsImRlc2NyaWJlIiwidHlwZSIsImNob2ljZXMiLCJRVUVTVElPTk5BSVJFIiwibWVzc2FnZSIsImZpbHRlciIsInJ1bm5lciIsInNwbGl0IiwidHJpbSIsImRlZmF1bHQiLCJ3aGVuIiwiYW5zd2VycyIsImJhY2tlbmQiLCJpbmRleE9mIiwiZnJhbWV3b3JrIiwibWF0Y2giLCJyZXBvcnRlcnMiLCJtYXAiLCJyZXBvcnRlciIsImxlbmd0aCIsInNlcnZpY2VzIiwic2VydmljZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sTUFBTUEsc0RBQXVCLENBQ2hDLE9BRGdDLEVBQ3ZCO0FBQ1QsU0FGZ0MsRUFFckI7QUFDWCxVQUhnQyxDQUdyQjtBQUhxQixDQUE3Qjs7QUFNQSxNQUFNQyxrREFBcUIsQ0FDOUIsd0RBRDhCLEVBRTlCLDBEQUY4QixFQUc5Qiw0REFIOEIsRUFJOUIsOERBSjhCLEVBSzlCLGtFQUw4QixFQU05QixvRUFOOEIsRUFPOUIsMERBUDhCLEVBUTlCLGdFQVI4QixFQVM5QixrRUFUOEIsRUFVOUIsd0VBVjhCLENBQTNCOztBQWFBLE1BQU1DLGtEQUFxQixDQUM5QiwyREFEOEIsRUFFOUIseUVBRjhCLEVBRzlCLHFFQUg4QixFQUk5Qiw2REFKOEIsRUFLOUIsK0VBTDhCLEVBTTlCLHVGQU44QixFQU85QixtRUFQOEIsRUFROUIsMkVBUjhCLEVBUzlCLG1GQVQ4QixFQVU5QiwrREFWOEIsRUFXOUIscUZBWDhC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QUFNLFdBRlA7QUFHQ08sYUFBUyx3REFIVjtBQUlDSyxhQUFTLElBSlY7QUFLQ0MsVUFBT0MsT0FBRCxJQUFhQSxRQUFRSyxTQUFSLENBQWtCTSxRQUFsQixDQUEyQixNQUEzQjtBQUxwQixDQWhJMEIsRUFzSTFCO0FBQ0NyQixVQUFNLE9BRFA7QUFFQ0osVUFBTSxXQUZQO0FBR0NPLGFBQVMsb0VBSFY7QUFJQ0ssYUFBUyxJQUpWO0FBS0NDLFVBQU9DLE9BQUQsSUFBYUEsUUFBUUssU0FBUixDQUFrQk0sUUFBbEIsQ0FBMkIsYUFBM0I7QUFMcEIsQ0F0STBCLEVBNEkxQjtBQUNDckIsVUFBTSxNQURQO0FBRUNKLFVBQU0sVUFGUDtBQUdDTyxhQUFTLDRCQUhWO0FBSUNLLGFBQVMsTUFKVjtBQUtDUCxhQUFTVjtBQUxWLENBNUkwQixFQWtKMUI7QUFDQ1MsVUFBTSxPQURQO0FBRUNKLFVBQU0sU0FGUDtBQUdDTyxhQUFTLHVCQUhWO0FBSUNLLGFBQVM7QUFKVixDQWxKMEIsQ0FBdEIiLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9GUkFNRVdPUktTID0gW1xuICAgICdtb2NoYScsIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkcml2ZXJpby93ZGlvLW1vY2hhLWZyYW1ld29ya1xuICAgICdqYXNtaW5lJywgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYmRyaXZlcmlvL3dkaW8tamFzbWluZS1mcmFtZXdvcmtcbiAgICAnY3VjdW1iZXInIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkcml2ZXJpby93ZGlvLWN1Y3VtYmVyLWZyYW1ld29ya1xuXVxuXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX1JFUE9SVEVSID0gW1xuICAgICcgZG90IC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1kb3QtcmVwb3J0ZXInLFxuICAgICcgc3BlYyAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tc3BlYy1yZXBvcnRlcicsXG4gICAgJyBqdW5pdCAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tanVuaXQtcmVwb3J0ZXInLFxuICAgICcgYWxsdXJlIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1hbGx1cmUtcmVwb3J0ZXInLFxuICAgICcgdGVhbWNpdHkgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXRlYW1jaXR5LXJlcG9ydGVyJyxcbiAgICAnIHN1bW9sb2dpYyAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tc3Vtb2xvZ2ljLXJlcG9ydGVyJyxcbiAgICAnIGpzb24gLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLWpzb24tcmVwb3J0ZXInLFxuICAgICcgY29uY2lzZSAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tY29uY2lzZS1yZXBvcnRlcicsXG4gICAgJyB0ZXN0cmFpbCAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tdGVzdHJhaWwtcmVwb3J0ZXInLFxuICAgICcgbW9jaGF3ZXNvbWUgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLW1vY2hhd2Vzb21lLXJlcG9ydGVyJ1xuXVxuXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX1NFUlZJQ0VTID0gW1xuICAgICcgc2F1Y2UgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXNhdWNlLXNlcnZpY2UnLFxuICAgICcgYnJvd3NlcnN0YWNrIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1icm93c2Vyc3RhY2stc2VydmljZScsXG4gICAgJyB0ZXN0aW5nYm90IC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby10ZXN0aW5nYm90LXNlcnZpY2UnLFxuICAgICcgYXBwaXVtIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1hcHBpdW0tc2VydmljZScsXG4gICAgJyBmaXJlZm94LXByb2ZpbGUgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLWZpcmVmb3gtcHJvZmlsZS1zZXJ2aWNlJyxcbiAgICAnIHNlbGVuaXVtLXN0YW5kYWxvbmUgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXNlbGVuaXVtLXN0YW5kYWxvbmUtc2VydmljZScsXG4gICAgJyBwaGFudG9tanMgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXBoYW50b21qcy1zZXJ2aWNlJyxcbiAgICAnIHN0YXRpYy1zZXJ2ZXIgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLXN0YXRpYy1zZXJ2ZXItc2VydmljZScsXG4gICAgJyB2aXN1YWwtcmVncmVzc2lvbiAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tdmlzdWFsLXJlZ3Jlc3Npb24tc2VydmljZScsXG4gICAgJyB3ZWJwYWNrIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby13ZWJwYWNrLXNlcnZpY2UnLFxuICAgICcgd2VicGFjay1kZXYtc2VydmVyIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby13ZWJwYWNrLWRldi1zZXJ2ZXItc2VydmljZScsXG4gICAgJyBjaHJvbWVkcml2ZXIgLSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS93ZGlvLWNocm9tZWRyaXZlci1zZXJ2aWNlJyxcbiAgICAnIGllZHJpdmVyIC0gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2Rpby1pZWRyaXZlci1zZXJ2aWNlJ1xuXVxuXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX1JVTk5FUlMgPSBbXG4gICAgJyBsb2NhbCAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tbG9jYWwtcnVubmVyJyxcbiAgICAnIGxhbWJkYSAtIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tbGFtYmRhLXJ1bm5lcidcbl1cblxuY29uc3QgTE9HX0xFVkVMUyA9IFsndHJhY2UnLCAnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ11cblxuZXhwb3J0IGNvbnN0IFVTQUdFID0gYFxuV2ViZHJpdmVySU8gQ0xJIHJ1bm5lclxuXG5Vc2FnZTogd2RpbyBbb3B0aW9uc10gW2NvbmZpZ0ZpbGVdXG5Vc2FnZTogd2RpbyBjb25maWdcblVzYWdlOiB3ZGlvIHJlcGwgPGJyb3dzZXJOYW1lPlxuXG5jb25maWcgZmlsZSBkZWZhdWx0cyB0byB3ZGlvLmNvbmYuanNcblRoZSBbb3B0aW9uc10gb2JqZWN0IHdpbGwgb3ZlcnJpZGUgdmFsdWVzIGZyb20gdGhlIGNvbmZpZyBmaWxlLlxuQW4gb3B0aW9uYWwgbGlzdCBvZiBzcGVjIGZpbGVzIGNhbiBiZSBwaXBlZCB0byB3ZGlvIHRoYXQgd2lsbCBvdmVycmlkZSBjb25maWd1cmVkIHNwZWNzLlxuU2FtZSBhcHBsaWVzIHRvIHRoZSBleGNsdWRlIG9wdGlvbi4gSXQgY2FuIHRha2UgYSBsaXN0IG9mIHNwZWNzIHRvIGV4Y2x1ZGUgZm9yIGEgZ2l2ZW4gcnVuIFxuYW5kIGl0IGFsc28gb3ZlcnJpZGVzIHRoZSBleGNsdWRlIGtleSBmcm9tIHRoZSBjb25maWcgZmlsZS5gXG5cbmV4cG9ydCBjb25zdCBDT05GSUdfSEVMUEVSX0lOVFJPID0gYFxuPT09PT09PT09PT09PT09PT09PT09PT09PVxuV0RJTyBDb25maWd1cmF0aW9uIEhlbHBlclxuPT09PT09PT09PT09PT09PT09PT09PT09PVxuYFxuXG5leHBvcnQgY29uc3QgQ09ORklHX0hFTFBFUl9TVUNDRVNTX01FU1NBR0UgPSBgXG5Db25maWd1cmF0aW9uIGZpbGUgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IVxuVG8gcnVuIHlvdXIgdGVzdHMsIGV4ZWN1dGU6XG4kIHdkaW8gd2Rpby5jb25mLmpzXG5gXG5cbmV4cG9ydCBjb25zdCBDTElfUEFSQU1TID0gW3tcbiAgICBuYW1lOiAnaGVscCcsXG4gICAgZGVzY3JpcHRpb246ICdwcmludHMgV2ViZHJpdmVySU8gaGVscCBtZW51J1xufSwge1xuICAgIG5hbWU6ICd2ZXJzaW9uJyxcbiAgICBkZXNjcmlwdGlvbjogJ3ByaW50cyBXZWJkcml2ZXJJTyB2ZXJzaW9uJ1xufSwge1xuICAgIG5hbWU6ICdob3N0JyxcbiAgICBhbGlhczogJ2gnLFxuICAgIGRlc2NyaWJlOiAnYXV0b21hdGlvbiBkcml2ZXIgaG9zdCBhZGRyZXNzJyxcbiAgICB0eXBlOiAnc3RyaW5nJ1xufSwge1xuICAgIG5hbWU6ICdwb3J0JyxcbiAgICBhbGlhczogJ3AnLFxuICAgIGRlc2NyaWJlOiAnYXV0b21hdGlvbiBkcml2ZXIgcG9ydCcsXG4gICAgdHlwZTogJ251bWJlcidcbn0sIHtcbiAgICBuYW1lOiAndXNlcicsXG4gICAgYWxpYXM6ICd1JyxcbiAgICBkZXNjcmlwdGlvbjogJ3VzZXJuYW1lIGlmIHVzaW5nIGEgY2xvdWQgc2VydmljZSBhcyBhdXRvbWF0aW9uIGJhY2tlbmQnLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ2tleScsXG4gICAgYWxpYXM6ICdrJyxcbiAgICBkZXNjcmlwdGlvbjogJ2NvcnJlc3BvbmRpbmcgYWNjZXNzIGtleSB0byB0aGUgdXNlcicsXG4gICAgdHlwZTogJ3N0cmluZydcbn0sIHtcbiAgICBuYW1lOiAnd2F0Y2gnLFxuICAgIGRlc2NyaXB0aW9uOiAnd2F0Y2ggc3BlY3MgZm9yIGNoYW5nZXMnLFxuICAgIHR5cGU6ICdib29sZWFuJ1xufSwge1xuICAgIG5hbWU6ICdsb2dMZXZlbCcsXG4gICAgYWxpYXM6ICdsJyxcbiAgICBkZXNjcmlwdGlvbjogJ2xldmVsIG9mIGxvZ2dpbmcgdmVyYm9zaXR5JyxcbiAgICBjaG9pY2VzOiBMT0dfTEVWRUxTXG59LCB7XG4gICAgbmFtZTogJ2JhaWwnLFxuICAgIGRlc2NyaXB0aW9uOiBgc3RvcCB0ZXN0IHJ1bm5lciBhZnRlciBzcGVjaWZpYyBhbW91bnQgb2YgdGVzdHMgaGF2ZSBmYWlsZWRgLFxuICAgIHR5cGU6ICdudW1iZXInXG59LCB7XG4gICAgbmFtZTogJ2Jhc2VVcmwnLFxuICAgIGRlc2NyaXB0aW9uOiAnc2hvcnRlbiB1cmwgY29tbWFuZCBjYWxscyBieSBzZXR0aW5nIGEgYmFzZSB1cmwnLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ3dhaXRmb3JUaW1lb3V0JyxcbiAgICBhbGlhczogJ3cnLFxuICAgIGRlc2NyaXB0aW9uOiAndGltZW91dCBmb3IgYWxsIHdhaXRGb3JYWFggY29tbWFuZHMnLFxuICAgIHR5cGU6ICdudW1iZXInXG59LCB7XG4gICAgbmFtZTogJ2ZyYW1ld29yaycsXG4gICAgYWxpYXM6ICdmJyxcbiAgICBkZXNjcmlwdGlvbjogYGRlZmluZXMgdGhlIGZyYW1ld29yayAoTW9jaGEsIEphc21pbmUgb3IgQ3VjdW1iZXIpIHRvIHJ1biB0aGUgc3BlY3NgLFxuICAgIHR5cGU6ICdzdHJpbmcnXG59LCB7XG4gICAgbmFtZTogJ3JlcG9ydGVycycsXG4gICAgYWxpYXM6ICdyJyxcbiAgICBkZXNjcmlwdGlvbjogYHJlcG9ydGVycyB0byBwcmludCBvdXQgdGhlIHJlc3VsdHMgb24gc3Rkb3V0YCxcbiAgICB0eXBlOiAnYXJyYXknXG59LCB7XG4gICAgbmFtZTogJ3N1aXRlJyxcbiAgICBkZXNjcmlwdGlvbjogYG92ZXJ3cml0ZXMgdGhlIHNwZWNzIGF0dHJpYnV0ZSBhbmQgcnVucyB0aGUgZGVmaW5lZCBzdWl0ZWAsXG4gICAgdHlwZTogJ2FycmF5J1xufSwge1xuICAgIG5hbWU6ICdzcGVjJyxcbiAgICBkZXNjcmlwdGlvbjogYHJ1biBvbmx5IGEgY2VydGFpbiBzcGVjIGZpbGUgLSBvdmVycmlkZXMgc3BlY3MgcGlwZWQgZnJvbSBzdGRpbmAsXG4gICAgdHlwZTogJ2FycmF5J1xufSwge1xuICAgIG5hbWU6ICdleGNsdWRlJyxcbiAgICBkZXNjcmlwdGlvbjogYGV4Y2x1ZGUgY2VydGFpbiBzcGVjIGZpbGUgZnJvbSB0aGUgdGVzdCBydW4gLSBvdmVycmlkZXMgZXhjbHVkZSBwaXBlZCBmcm9tIHN0ZGluYCxcbiAgICB0eXBlOiAnYXJyYXknXG59LCB7XG4gICAgbmFtZTogJ21vY2hhT3B0cycsXG4gICAgZGVzY3JpcHRpb246IGBNb2NoYSBvcHRpb25zYFxufSwge1xuICAgIG5hbWU6ICdqYXNtaW5lT3B0cycsXG4gICAgZGVzY3JpcHRpb246IGBKYXNtaW5lIG9wdGlvbnNgXG59LCB7XG4gICAgbmFtZTogJ2N1Y3VtYmVyT3B0cycsXG4gICAgZGVzY3JpcHRpb246IGBDdWN1bWJlciBvcHRpb25zYFxufV1cblxuZXhwb3J0IGNvbnN0IFFVRVNUSU9OTkFJUkUgPSBbe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBuYW1lOiAncnVubmVyJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgc2hvdWxkIHlvdXIgdGVzdHMgYmUgbGF1bmNoZWQnLFxuICAgIGNob2ljZXM6IFNVUFBPUlRFRF9SVU5ORVJTLFxuICAgIGZpbHRlcjogKHJ1bm5lcikgPT4gcnVubmVyLnNwbGl0KC8tLylbMF0udHJpbSgpXG59LCB7XG4gICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgIG5hbWU6ICdpbnN0YWxsUnVubmVyJyxcbiAgICBtZXNzYWdlOiAnU2hhbGwgSSBpbnN0YWxsIHRoZSBydW5uZXIgcGx1Z2luIGZvciB5b3U/JyxcbiAgICBkZWZhdWx0OiB0cnVlXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdiYWNrZW5kJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgaXMgeW91ciBhdXRvbWF0aW9uIGJhY2tlbmQgbG9jYXRlZD8nLFxuICAgIGNob2ljZXM6IFtcbiAgICAgICAgJ09uIG15IGxvY2FsIG1hY2hpbmUnLFxuICAgICAgICAnSW4gdGhlIGNsb3VkIHVzaW5nIFNhdWNlIExhYnMsIEJyb3dzZXJzdGFjayBvciBUZXN0aW5nYm90JyxcbiAgICAgICAgJ0luIHRoZSBjbG91ZCB1c2luZyBhIGRpZmZlcmVudCBzZXJ2aWNlJyxcbiAgICAgICAgJ0kgaGF2ZSBteSBvd24gU2VsZW5pdW0gY2xvdWQnXG4gICAgXVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ2hvc3QnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBob3N0IGFkZHJlc3Mgb2YgdGhhdCBjbG91ZCBzZXJ2aWNlPycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdkaWZmZXJlbnQgc2VydmljZScpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdwb3J0JyxcbiAgICBtZXNzYWdlOiAnV2hhdCBpcyB0aGUgcG9ydCBvbiB3aGljaCB0aGF0IHNlcnZpY2UgaXMgcnVubmluZz8nLFxuICAgIGRlZmF1bHQ6ICc4MCcsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdkaWZmZXJlbnQgc2VydmljZScpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdlbnZfdXNlcicsXG4gICAgbWVzc2FnZTogJ0Vudmlyb25tZW50IHZhcmlhYmxlIGZvciB1c2VybmFtZScsXG4gICAgZGVmYXVsdDogJ1NBVUNFX1VTRVJOQU1FJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5iYWNrZW5kLmluZGV4T2YoJ0luIHRoZSBjbG91ZCcpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdlbnZfa2V5JyxcbiAgICBtZXNzYWdlOiAnRW52aXJvbm1lbnQgdmFyaWFibGUgZm9yIGFjY2VzcyBrZXknLFxuICAgIGRlZmF1bHQ6ICdTQVVDRV9BQ0NFU1NfS0VZJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5iYWNrZW5kLmluZGV4T2YoJ0luIHRoZSBjbG91ZCcpID4gLTFcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdob3N0JyxcbiAgICBtZXNzYWdlOiAnV2hhdCBpcyB0aGUgSVAgb3IgVVJJIHRvIHlvdXIgU2VsZW5pdW0gc3RhbmRhbG9uZSBzZXJ2ZXI/JyxcbiAgICBkZWZhdWx0OiAnMC4wLjAuMCcsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdvd24gU2VsZW5pdW0gY2xvdWQnKSA+IC0xXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAncG9ydCcsXG4gICAgbWVzc2FnZTogJ1doYXQgaXMgdGhlIHBvcnQgd2hpY2ggeW91ciBTZWxlbml1bSBzdGFuZGFsb25lIHNlcnZlciBpcyBydW5uaW5nIG9uPycsXG4gICAgZGVmYXVsdDogJzQ0NDQnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmJhY2tlbmQuaW5kZXhPZignb3duIFNlbGVuaXVtIGNsb3VkJykgPiAtMVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3BhdGgnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBwYXRoIHRvIHlvdXIgU2VsZW5pdW0gc3RhbmRhbG9uZSBzZXJ2ZXI/JyxcbiAgICBkZWZhdWx0OiAnL3dkL2h1YicsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMuYmFja2VuZC5pbmRleE9mKCdvd24gU2VsZW5pdW0gY2xvdWQnKSA+IC0xXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdmcmFtZXdvcmsnLFxuICAgIG1lc3NhZ2U6ICdXaGljaCBmcmFtZXdvcmsgZG8geW91IHdhbnQgdG8gdXNlPycsXG4gICAgY2hvaWNlczogU1VQUE9SVEVEX0ZSQU1FV09SS1Ncbn0sIHtcbiAgICB0eXBlOiAnY29uZmlybScsXG4gICAgbmFtZTogJ2luc3RhbGxGcmFtZXdvcmsnLFxuICAgIG1lc3NhZ2U6ICdTaGFsbCBJIGluc3RhbGwgdGhlIGZyYW1ld29yayBhZGFwdGVyIGZvciB5b3U/JyxcbiAgICBkZWZhdWx0OiB0cnVlXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdleGVjdXRpb25Nb2RlJyxcbiAgICBtZXNzYWdlOiAnRG8geW91IHdhbnQgdG8gcnVuIFdlYmRyaXZlcklPIGNvbW1hbmRzIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cz8nLFxuICAgIGNob2ljZXM6IFtcbiAgICAgICAgJ3N5bmMnLFxuICAgICAgICAnYXN5bmMnXG4gICAgXVxufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3NwZWNzJyxcbiAgICBtZXNzYWdlOiAnV2hlcmUgYXJlIHlvdXIgdGVzdCBzcGVjcyBsb2NhdGVkPycsXG4gICAgZGVmYXVsdDogJy4vdGVzdC9zcGVjcy8qKi8qLmpzJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5mcmFtZXdvcmsubWF0Y2goLyhtb2NoYXxqYXNtaW5lKS8pXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAnc3BlY3MnLFxuICAgIG1lc3NhZ2U6ICdXaGVyZSBhcmUgeW91ciBmZWF0dXJlIGZpbGVzIGxvY2F0ZWQ/JyxcbiAgICBkZWZhdWx0OiAnLi9mZWF0dXJlcy8qKi8qLmZlYXR1cmUnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmZyYW1ld29yayA9PT0gJ2N1Y3VtYmVyJ1xufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ3N0ZXBEZWZpbml0aW9ucycsXG4gICAgbWVzc2FnZTogJ1doZXJlIGFyZSB5b3VyIHN0ZXAgZGVmaW5pdGlvbnMgbG9jYXRlZD8nLFxuICAgIGRlZmF1bHQ6ICcuL2ZlYXR1cmVzL3N0ZXAtZGVmaW5pdGlvbnMnLFxuICAgIHdoZW46IChhbnN3ZXJzKSA9PiBhbnN3ZXJzLmZyYW1ld29yayA9PT0gJ2N1Y3VtYmVyJ1xufSwge1xuICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgbmFtZTogJ3JlcG9ydGVycycsXG4gICAgbWVzc2FnZTogJ1doaWNoIHJlcG9ydGVyIGRvIHlvdSB3YW50IHRvIHVzZT8nLFxuICAgIGNob2ljZXM6IFNVUFBPUlRFRF9SRVBPUlRFUixcbiAgICBmaWx0ZXI6IChyZXBvcnRlcnMpID0+IHJlcG9ydGVycy5tYXAoKHJlcG9ydGVyKSA9PiBgd2Rpby0ke3JlcG9ydGVyLnNwbGl0KC8tLylbMF0udHJpbSgpfS1yZXBvcnRlcmApXG59LCB7XG4gICAgdHlwZTogJ2NvbmZpcm0nLFxuICAgIG5hbWU6ICdpbnN0YWxsUmVwb3J0ZXInLFxuICAgIG1lc3NhZ2U6ICdTaGFsbCBJIGluc3RhbGwgdGhlIHJlcG9ydGVyIGxpYnJhcnkgZm9yIHlvdT8nLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmxlbmd0aCA+IDBcbn0sIHtcbiAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgIG5hbWU6ICdzZXJ2aWNlcycsXG4gICAgbWVzc2FnZTogJ0RvIHlvdSB3YW50IHRvIGFkZCBhIHNlcnZpY2UgdG8geW91ciB0ZXN0IHNldHVwPycsXG4gICAgY2hvaWNlczogU1VQUE9SVEVEX1NFUlZJQ0VTLFxuICAgIGZpbHRlcjogKHNlcnZpY2VzKSA9PiBzZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IGB3ZGlvLSR7c2VydmljZS5zcGxpdCgvLSAvKVswXS50cmltKCl9LXNlcnZpY2VgKVxufSwge1xuICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICBuYW1lOiAnaW5zdGFsbFNlcnZpY2VzJyxcbiAgICBtZXNzYWdlOiAnU2hhbGwgSSBpbnN0YWxsIHRoZSBzZXJ2aWNlcyBmb3IgeW91PycsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5zZXJ2aWNlcy5sZW5ndGggPiAwXG59LCB7XG4gICAgdHlwZTogJ2lucHV0JyxcbiAgICBuYW1lOiAnb3V0cHV0RGlyJyxcbiAgICBtZXNzYWdlOiAnSW4gd2hpY2ggZGlyZWN0b3J5IHNob3VsZCB0aGUgeHVuaXQgcmVwb3J0cyBnZXQgc3RvcmVkPycsXG4gICAgZGVmYXVsdDogJy4vJyxcbiAgICB3aGVuOiAoYW5zd2VycykgPT4gYW5zd2Vycy5yZXBvcnRlcnMuaW5jbHVkZXMoJ2p1bml0Jylcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdvdXRwdXREaXInLFxuICAgIG1lc3NhZ2U6ICdJbiB3aGljaCBkaXJlY3Rvcnkgc2hvdWxkIHRoZSBqc29uIHJlcG9ydHMgZ2V0IHN0b3JlZD8nLFxuICAgIGRlZmF1bHQ6ICcuLycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmluY2x1ZGVzKCdqc29uJylcbn0sIHtcbiAgICB0eXBlOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdvdXRwdXREaXInLFxuICAgIG1lc3NhZ2U6ICdJbiB3aGljaCBkaXJlY3Rvcnkgc2hvdWxkIHRoZSBtb2NoYXdlc29tZSBqc29uIHJlcG9ydHMgZ2V0IHN0b3JlZD8nLFxuICAgIGRlZmF1bHQ6ICcuLycsXG4gICAgd2hlbjogKGFuc3dlcnMpID0+IGFuc3dlcnMucmVwb3J0ZXJzLmluY2x1ZGVzKCdtb2NoYXdlc29tZScpXG59LCB7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG5hbWU6ICdsb2dMZXZlbCcsXG4gICAgbWVzc2FnZTogJ0xldmVsIG9mIGxvZ2dpbmcgdmVyYm9zaXR5JyxcbiAgICBkZWZhdWx0OiAnaW5mbycsXG4gICAgY2hvaWNlczogTE9HX0xFVkVMU1xufSwge1xuICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgbmFtZTogJ2Jhc2VVcmwnLFxuICAgIG1lc3NhZ2U6ICdXaGF0IGlzIHRoZSBiYXNlIHVybD8nLFxuICAgIGRlZmF1bHQ6ICdodHRwOi8vbG9jYWxob3N0J1xufV1cbiJdfQ==