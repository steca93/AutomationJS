'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

exports.default = run;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

var _launcher = require('./launcher.js');

var _launcher2 = _interopRequireDefault(_launcher);

var _setup = require('./setup');

var _setup2 = _interopRequireDefault(_setup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();


const log = (0, _wdioLogger2.default)('wdio-cli:run');

function run(params) {
    let stdinData = '';

    const firstArgument = params._[0];
    const commands = _fs2.default.readdirSync(_path2.default.join(__dirname, 'commands')).map(file => _path2.default.parse(file).name);
    const localConf = _path2.default.join(process.cwd(), 'wdio.conf.js');
    const wdioConf = firstArgument || (_fs2.default.existsSync(localConf) ? localConf : null);

    /**
     * don't do anything if command handler is triggered
     */
    if (commands.includes(firstArgument)) {
        return;
    }

    /**
     * if no default wdio.conf was found and no path to a wdio config was specified
     * run the setup
     */
    if (!wdioConf || firstArgument === 'config') {
        return (0, _setup2.default)();
    }

    /**
     * if stdin.isTTY, then no piped input is present and launcher should be
     * called immediately, otherwise piped input is processed, expecting
     * a list of files to process.
     *
     * stdin.isTTY is false when command is from nodes spawn since it's treated as a pipe
     */
    if (process.stdin.isTTY || !process.stdout.isTTY) {
        return launch(wdioConf, params);
    }

    /*
     * get a list of spec files to run from stdin, overriding any other
     * configuration suite or specs.
     */
    const stdin = process.openStdin();
    stdin.setEncoding('utf8');
    stdin.on('data', data => {
        stdinData += data;
    });
    stdin.on('end', () => {
        if (stdinData.length > 0) {
            params.specs = stdinData.trim().split(/\r?\n/);
        }
        launch(wdioConf, params);
    });
}

function launch(wdioConf, params) {
    log.debug('Run suite with config', wdioConf, 'and params', params);
    let launcher = new _launcher2.default(wdioConf, params);
    launcher.run().then(code => process.exit(code), e => process.nextTick(() => {
        throw e;
    }));
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydW4uanMiXSwibmFtZXMiOlsicnVuIiwibG9nIiwicGFyYW1zIiwic3RkaW5EYXRhIiwiZmlyc3RBcmd1bWVudCIsIl8iLCJjb21tYW5kcyIsImZzIiwicmVhZGRpclN5bmMiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsIm1hcCIsImZpbGUiLCJwYXJzZSIsIm5hbWUiLCJsb2NhbENvbmYiLCJwcm9jZXNzIiwiY3dkIiwid2Rpb0NvbmYiLCJleGlzdHNTeW5jIiwiaW5jbHVkZXMiLCJzdGRpbiIsImlzVFRZIiwic3Rkb3V0IiwibGF1bmNoIiwib3BlblN0ZGluIiwic2V0RW5jb2RpbmciLCJvbiIsImRhdGEiLCJsZW5ndGgiLCJzcGVjcyIsInRyaW0iLCJzcGxpdCIsImRlYnVnIiwibGF1bmNoZXIiLCJMYXVuY2hlciIsInRoZW4iLCJjb2RlIiwiZXhpdCIsImUiLCJuZXh0VGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBU3dCQSxHOztBQVR4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7Ozs7QUFFQSxNQUFNQyxNQUFNLDBCQUFPLGNBQVAsQ0FBWjs7QUFFZSxTQUFTRCxHQUFULENBQWNFLE1BQWQsRUFBc0I7QUFDakMsUUFBSUMsWUFBWSxFQUFoQjs7QUFFQSxVQUFNQyxnQkFBZ0JGLE9BQU9HLENBQVAsQ0FBUyxDQUFULENBQXRCO0FBQ0EsVUFBTUMsV0FBV0MsYUFBR0MsV0FBSCxDQUFlQyxlQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsVUFBckIsQ0FBZixFQUFpREMsR0FBakQsQ0FBc0RDLElBQUQsSUFBVUosZUFBS0ssS0FBTCxDQUFXRCxJQUFYLEVBQWlCRSxJQUFoRixDQUFqQjtBQUNBLFVBQU1DLFlBQVlQLGVBQUtDLElBQUwsQ0FBVU8sUUFBUUMsR0FBUixFQUFWLEVBQXlCLGNBQXpCLENBQWxCO0FBQ0EsVUFBTUMsV0FBV2Ysa0JBQWtCRyxhQUFHYSxVQUFILENBQWNKLFNBQWQsSUFBMkJBLFNBQTNCLEdBQXVDLElBQXpELENBQWpCOztBQUVBOzs7QUFHQSxRQUFJVixTQUFTZSxRQUFULENBQWtCakIsYUFBbEIsQ0FBSixFQUFzQztBQUNsQztBQUNIOztBQUVEOzs7O0FBSUEsUUFBSSxDQUFDZSxRQUFELElBQWFmLGtCQUFrQixRQUFuQyxFQUE2QztBQUN6QyxlQUFPLHNCQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7QUFPQSxRQUFJYSxRQUFRSyxLQUFSLENBQWNDLEtBQWQsSUFBdUIsQ0FBQ04sUUFBUU8sTUFBUixDQUFlRCxLQUEzQyxFQUFrRDtBQUM5QyxlQUFPRSxPQUFPTixRQUFQLEVBQWlCakIsTUFBakIsQ0FBUDtBQUNIOztBQUVEOzs7O0FBSUEsVUFBTW9CLFFBQVFMLFFBQVFTLFNBQVIsRUFBZDtBQUNBSixVQUFNSyxXQUFOLENBQWtCLE1BQWxCO0FBQ0FMLFVBQU1NLEVBQU4sQ0FBUyxNQUFULEVBQWtCQyxJQUFELElBQVU7QUFDdkIxQixxQkFBYTBCLElBQWI7QUFDSCxLQUZEO0FBR0FQLFVBQU1NLEVBQU4sQ0FBUyxLQUFULEVBQWdCLE1BQU07QUFDbEIsWUFBSXpCLFVBQVUyQixNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3RCNUIsbUJBQU82QixLQUFQLEdBQWU1QixVQUFVNkIsSUFBVixHQUFpQkMsS0FBakIsQ0FBdUIsT0FBdkIsQ0FBZjtBQUNIO0FBQ0RSLGVBQU9OLFFBQVAsRUFBaUJqQixNQUFqQjtBQUNILEtBTEQ7QUFNSDs7QUFFRCxTQUFTdUIsTUFBVCxDQUFpQk4sUUFBakIsRUFBMkJqQixNQUEzQixFQUFtQztBQUMvQkQsUUFBSWlDLEtBQUosQ0FBVSx1QkFBVixFQUFtQ2YsUUFBbkMsRUFBNkMsWUFBN0MsRUFBMkRqQixNQUEzRDtBQUNBLFFBQUlpQyxXQUFXLElBQUlDLGtCQUFKLENBQWFqQixRQUFiLEVBQXVCakIsTUFBdkIsQ0FBZjtBQUNBaUMsYUFBU25DLEdBQVQsR0FBZXFDLElBQWYsQ0FDS0MsSUFBRCxJQUFVckIsUUFBUXNCLElBQVIsQ0FBYUQsSUFBYixDQURkLEVBRUtFLENBQUQsSUFBT3ZCLFFBQVF3QixRQUFSLENBQWlCLE1BQU07QUFBRSxjQUFNRCxDQUFOO0FBQVMsS0FBbEMsQ0FGWDtBQUdIIiwiZmlsZSI6InJ1bi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgbG9nZ2VyIGZyb20gJ3dkaW8tbG9nZ2VyJ1xuXG5pbXBvcnQgTGF1bmNoZXIgZnJvbSAnLi9sYXVuY2hlci5qcydcbmltcG9ydCBzZXR1cCBmcm9tICcuL3NldHVwJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dkaW8tY2xpOnJ1bicpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJ1biAocGFyYW1zKSB7XG4gICAgbGV0IHN0ZGluRGF0YSA9ICcnXG5cbiAgICBjb25zdCBmaXJzdEFyZ3VtZW50ID0gcGFyYW1zLl9bMF1cbiAgICBjb25zdCBjb21tYW5kcyA9IGZzLnJlYWRkaXJTeW5jKHBhdGguam9pbihfX2Rpcm5hbWUsICdjb21tYW5kcycpKS5tYXAoKGZpbGUpID0+IHBhdGgucGFyc2UoZmlsZSkubmFtZSlcbiAgICBjb25zdCBsb2NhbENvbmYgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3dkaW8uY29uZi5qcycpXG4gICAgY29uc3Qgd2Rpb0NvbmYgPSBmaXJzdEFyZ3VtZW50IHx8IChmcy5leGlzdHNTeW5jKGxvY2FsQ29uZikgPyBsb2NhbENvbmYgOiBudWxsKVxuXG4gICAgLyoqXG4gICAgICogZG9uJ3QgZG8gYW55dGhpbmcgaWYgY29tbWFuZCBoYW5kbGVyIGlzIHRyaWdnZXJlZFxuICAgICAqL1xuICAgIGlmIChjb21tYW5kcy5pbmNsdWRlcyhmaXJzdEFyZ3VtZW50KSkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiBubyBkZWZhdWx0IHdkaW8uY29uZiB3YXMgZm91bmQgYW5kIG5vIHBhdGggdG8gYSB3ZGlvIGNvbmZpZyB3YXMgc3BlY2lmaWVkXG4gICAgICogcnVuIHRoZSBzZXR1cFxuICAgICAqL1xuICAgIGlmICghd2Rpb0NvbmYgfHwgZmlyc3RBcmd1bWVudCA9PT0gJ2NvbmZpZycpIHtcbiAgICAgICAgcmV0dXJuIHNldHVwKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiBzdGRpbi5pc1RUWSwgdGhlbiBubyBwaXBlZCBpbnB1dCBpcyBwcmVzZW50IGFuZCBsYXVuY2hlciBzaG91bGQgYmVcbiAgICAgKiBjYWxsZWQgaW1tZWRpYXRlbHksIG90aGVyd2lzZSBwaXBlZCBpbnB1dCBpcyBwcm9jZXNzZWQsIGV4cGVjdGluZ1xuICAgICAqIGEgbGlzdCBvZiBmaWxlcyB0byBwcm9jZXNzLlxuICAgICAqXG4gICAgICogc3RkaW4uaXNUVFkgaXMgZmFsc2Ugd2hlbiBjb21tYW5kIGlzIGZyb20gbm9kZXMgc3Bhd24gc2luY2UgaXQncyB0cmVhdGVkIGFzIGEgcGlwZVxuICAgICAqL1xuICAgIGlmIChwcm9jZXNzLnN0ZGluLmlzVFRZIHx8ICFwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuICAgICAgICByZXR1cm4gbGF1bmNoKHdkaW9Db25mLCBwYXJhbXMpXG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBnZXQgYSBsaXN0IG9mIHNwZWMgZmlsZXMgdG8gcnVuIGZyb20gc3RkaW4sIG92ZXJyaWRpbmcgYW55IG90aGVyXG4gICAgICogY29uZmlndXJhdGlvbiBzdWl0ZSBvciBzcGVjcy5cbiAgICAgKi9cbiAgICBjb25zdCBzdGRpbiA9IHByb2Nlc3Mub3BlblN0ZGluKClcbiAgICBzdGRpbi5zZXRFbmNvZGluZygndXRmOCcpXG4gICAgc3RkaW4ub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBzdGRpbkRhdGEgKz0gZGF0YVxuICAgIH0pXG4gICAgc3RkaW4ub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgaWYgKHN0ZGluRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwYXJhbXMuc3BlY3MgPSBzdGRpbkRhdGEudHJpbSgpLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgfVxuICAgICAgICBsYXVuY2god2Rpb0NvbmYsIHBhcmFtcylcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBsYXVuY2ggKHdkaW9Db25mLCBwYXJhbXMpIHtcbiAgICBsb2cuZGVidWcoJ1J1biBzdWl0ZSB3aXRoIGNvbmZpZycsIHdkaW9Db25mLCAnYW5kIHBhcmFtcycsIHBhcmFtcylcbiAgICBsZXQgbGF1bmNoZXIgPSBuZXcgTGF1bmNoZXIod2Rpb0NvbmYsIHBhcmFtcylcbiAgICBsYXVuY2hlci5ydW4oKS50aGVuKFxuICAgICAgICAoY29kZSkgPT4gcHJvY2Vzcy5leGl0KGNvZGUpLFxuICAgICAgICAoZSkgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7IHRocm93IGUgfSkpXG59XG4iXX0=