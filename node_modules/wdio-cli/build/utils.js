'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.runServiceHook = undefined;

var _sourceMapSupport2 = require('source-map-support');

/**
 * run service launch sequences
 */
let runServiceHook = exports.runServiceHook = (() => {
    var _ref = _asyncToGenerator(function* (launcher, hookName, ...args) {
        try {
            return yield Promise.all(launcher.map(function (service) {
                if (typeof service[hookName] === 'function') {
                    return service[hookName](...args);
                }
            }));
        } catch (e) {
            log.error(`A service failed in the '${hookName}' hook\n${e.stack}\n\nContinue...`);
        }
    });

    return function runServiceHook(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

exports.getLauncher = getLauncher;

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

(0, _sourceMapSupport2.install)();


const log = (0, _wdioLogger2.default)('wdio-cli:utils');

/**
 * loads launch services
 */
function getLauncher(config) {
    let launchServices = [];

    if (!Array.isArray(config.services)) {
        return launchServices;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = config.services[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            let serviceName = _step.value;

            let service;

            /**
             * allow custom services
             */
            if (typeof serviceName === 'object') {
                launchServices.push(serviceName);
                continue;
            }

            try {
                const pkgName = serviceName.startsWith('@') ? `${serviceName}/launcher` : `wdio-${serviceName}-service/launcher`;
                service = require(pkgName);
            } catch (e) {
                if (!e.message.match(`Cannot find module 'wdio-${serviceName}-service/launcher'`)) {
                    throw new Error(`Couldn't initialise launcher from service "${serviceName}".\n${e.stack}`);
                }
            }

            if (service && (typeof service.onPrepare === 'function' || typeof service.onComplete === 'function')) {
                launchServices.push(service);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return launchServices;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJsYXVuY2hlciIsImhvb2tOYW1lIiwiYXJncyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJzZXJ2aWNlIiwiZSIsImxvZyIsImVycm9yIiwic3RhY2siLCJydW5TZXJ2aWNlSG9vayIsImdldExhdW5jaGVyIiwiY29uZmlnIiwibGF1bmNoU2VydmljZXMiLCJBcnJheSIsImlzQXJyYXkiLCJzZXJ2aWNlcyIsInNlcnZpY2VOYW1lIiwicHVzaCIsInBrZ05hbWUiLCJzdGFydHNXaXRoIiwicmVxdWlyZSIsIm1lc3NhZ2UiLCJtYXRjaCIsIkVycm9yIiwib25QcmVwYXJlIiwib25Db21wbGV0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBNENBOzs7O2lDQUdPLFdBQStCQSxRQUEvQixFQUF5Q0MsUUFBekMsRUFBbUQsR0FBR0MsSUFBdEQsRUFBNEQ7QUFDL0QsWUFBSTtBQUNBLG1CQUFPLE1BQU1DLFFBQVFDLEdBQVIsQ0FBWUosU0FBU0ssR0FBVCxDQUFhLFVBQUNDLE9BQUQsRUFBYTtBQUMvQyxvQkFBSSxPQUFPQSxRQUFRTCxRQUFSLENBQVAsS0FBNkIsVUFBakMsRUFBNkM7QUFDekMsMkJBQU9LLFFBQVFMLFFBQVIsRUFBa0IsR0FBR0MsSUFBckIsQ0FBUDtBQUNIO0FBQ0osYUFKd0IsQ0FBWixDQUFiO0FBS0gsU0FORCxDQU1FLE9BQU9LLENBQVAsRUFBVTtBQUNSQyxnQkFBSUMsS0FBSixDQUFXLDRCQUEyQlIsUUFBUyxXQUFVTSxFQUFFRyxLQUFNLGlCQUFqRTtBQUNIO0FBQ0osSzs7b0JBVnFCQyxjOzs7OztRQXhDTkMsVyxHQUFBQSxXOztBQVBoQjs7Ozs7Ozs7Ozs7QUFFQSxNQUFNSixNQUFNLDBCQUFPLGdCQUFQLENBQVo7O0FBRUE7OztBQUdPLFNBQVNJLFdBQVQsQ0FBc0JDLE1BQXRCLEVBQThCO0FBQ2pDLFFBQUlDLGlCQUFpQixFQUFyQjs7QUFFQSxRQUFJLENBQUNDLE1BQU1DLE9BQU4sQ0FBY0gsT0FBT0ksUUFBckIsQ0FBTCxFQUFxQztBQUNqQyxlQUFPSCxjQUFQO0FBQ0g7O0FBTGdDO0FBQUE7QUFBQTs7QUFBQTtBQU9qQyw2QkFBd0JELE9BQU9JLFFBQS9CLDhIQUF5QztBQUFBLGdCQUFoQ0MsV0FBZ0M7O0FBQ3JDLGdCQUFJWixPQUFKOztBQUVBOzs7QUFHQSxnQkFBSSxPQUFPWSxXQUFQLEtBQXVCLFFBQTNCLEVBQXFDO0FBQ2pDSiwrQkFBZUssSUFBZixDQUFvQkQsV0FBcEI7QUFDQTtBQUNIOztBQUVELGdCQUFJO0FBQ0Esc0JBQU1FLFVBQVVGLFlBQVlHLFVBQVosQ0FBdUIsR0FBdkIsSUFDVCxHQUFFSCxXQUFZLFdBREwsR0FFVCxRQUFPQSxXQUFZLG1CQUYxQjtBQUdBWiwwQkFBVWdCLFFBQVFGLE9BQVIsQ0FBVjtBQUNILGFBTEQsQ0FLRSxPQUFPYixDQUFQLEVBQVU7QUFDUixvQkFBSSxDQUFDQSxFQUFFZ0IsT0FBRixDQUFVQyxLQUFWLENBQWlCLDRCQUEyQk4sV0FBWSxvQkFBeEQsQ0FBTCxFQUFtRjtBQUMvRSwwQkFBTSxJQUFJTyxLQUFKLENBQVcsOENBQTZDUCxXQUFZLE9BQU1YLEVBQUVHLEtBQU0sRUFBbEYsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsZ0JBQUlKLFlBQVksT0FBT0EsUUFBUW9CLFNBQWYsS0FBNkIsVUFBN0IsSUFBMkMsT0FBT3BCLFFBQVFxQixVQUFmLEtBQThCLFVBQXJGLENBQUosRUFBc0c7QUFDbEdiLCtCQUFlSyxJQUFmLENBQW9CYixPQUFwQjtBQUNIO0FBQ0o7QUFoQ2dDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBa0NqQyxXQUFPUSxjQUFQO0FBQ0giLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ3dkaW8tbG9nZ2VyJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dkaW8tY2xpOnV0aWxzJylcblxuLyoqXG4gKiBsb2FkcyBsYXVuY2ggc2VydmljZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExhdW5jaGVyIChjb25maWcpIHtcbiAgICBsZXQgbGF1bmNoU2VydmljZXMgPSBbXVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbmZpZy5zZXJ2aWNlcykpIHtcbiAgICAgICAgcmV0dXJuIGxhdW5jaFNlcnZpY2VzXG4gICAgfVxuXG4gICAgZm9yIChsZXQgc2VydmljZU5hbWUgb2YgY29uZmlnLnNlcnZpY2VzKSB7XG4gICAgICAgIGxldCBzZXJ2aWNlXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93IGN1c3RvbSBzZXJ2aWNlc1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlTmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGxhdW5jaFNlcnZpY2VzLnB1c2goc2VydmljZU5hbWUpXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBrZ05hbWUgPSBzZXJ2aWNlTmFtZS5zdGFydHNXaXRoKCdAJylcbiAgICAgICAgICAgICAgICA/IGAke3NlcnZpY2VOYW1lfS9sYXVuY2hlcmBcbiAgICAgICAgICAgICAgICA6IGB3ZGlvLSR7c2VydmljZU5hbWV9LXNlcnZpY2UvbGF1bmNoZXJgXG4gICAgICAgICAgICBzZXJ2aWNlID0gcmVxdWlyZShwa2dOYW1lKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoIWUubWVzc2FnZS5tYXRjaChgQ2Fubm90IGZpbmQgbW9kdWxlICd3ZGlvLSR7c2VydmljZU5hbWV9LXNlcnZpY2UvbGF1bmNoZXInYCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IGluaXRpYWxpc2UgbGF1bmNoZXIgZnJvbSBzZXJ2aWNlIFwiJHtzZXJ2aWNlTmFtZX1cIi5cXG4ke2Uuc3RhY2t9YClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXJ2aWNlICYmICh0eXBlb2Ygc2VydmljZS5vblByZXBhcmUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHNlcnZpY2Uub25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgIGxhdW5jaFNlcnZpY2VzLnB1c2goc2VydmljZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYXVuY2hTZXJ2aWNlc1xufVxuXG4vKipcbiAqIHJ1biBzZXJ2aWNlIGxhdW5jaCBzZXF1ZW5jZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blNlcnZpY2VIb29rIChsYXVuY2hlciwgaG9va05hbWUsIC4uLmFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwobGF1bmNoZXIubWFwKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlcnZpY2VbaG9va05hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VbaG9va05hbWVdKC4uLmFyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGBBIHNlcnZpY2UgZmFpbGVkIGluIHRoZSAnJHtob29rTmFtZX0nIGhvb2tcXG4ke2Uuc3RhY2t9XFxuXFxuQ29udGludWUuLi5gKVxuICAgIH1cbn1cbiJdfQ==