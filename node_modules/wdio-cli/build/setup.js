'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

exports.default = setup;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _ejs = require('ejs');

var _ejs2 = _interopRequireDefault(_ejs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _npmInstallPackage = require('npm-install-package');

var _npmInstallPackage2 = _interopRequireDefault(_npmInstallPackage);

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();
function setup() {
    console.log(_config.CONFIG_HELPER_INTRO); // eslint-disable-line no-console
    _inquirer2.default.prompt(_config.QUESTIONNAIRE).then(answers => {
        let packagesToInstall = [];
        if (answers.installRunner) {
            packagesToInstall.push(`wdio-${answers.runner}-runner`);
        }
        if (answers.installFramework) {
            packagesToInstall.push(`wdio-${answers.framework}-framework`);
        }
        if (answers.installReporter) {
            packagesToInstall = packagesToInstall.concat(answers.reporters);
        }
        if (answers.installServices) {
            packagesToInstall = packagesToInstall.concat(answers.services);
        }
        if (answers.executionMode === 'sync') {
            packagesToInstall.push('wdio-sync');
        }

        if (packagesToInstall.length > 0) {
            console.log('\nInstalling wdio packages:\n-', packagesToInstall.join('\n- ')); // eslint-disable-line no-console
            return (0, _npmInstallPackage2.default)(packagesToInstall, { saveDev: true }, err => {
                if (err) {
                    throw err;
                }

                console.log('\nPackages installed successfully, creating configuration file...'); // eslint-disable-line no-console
                renderConfigurationFile(answers);
            });
        }

        renderConfigurationFile(answers);
        process.exit(0);
    });
}

function renderConfigurationFile(answers) {
    let tpl = _fs2.default.readFileSync(_path2.default.join(__dirname, '/templates/wdio.conf.tpl.ejs'), 'utf8');
    let renderedTpl = _ejs2.default.render(tpl, { answers });
    _fs2.default.writeFileSync(_path2.default.join(process.cwd(), 'wdio.conf.js'), renderedTpl);
    console.log(_config.CONFIG_HELPER_SUCCESS_MESSAGE); // eslint-disable-line no-console
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXR1cC5qcyJdLCJuYW1lcyI6WyJzZXR1cCIsImNvbnNvbGUiLCJsb2ciLCJDT05GSUdfSEVMUEVSX0lOVFJPIiwiaW5xdWlyZXIiLCJwcm9tcHQiLCJRVUVTVElPTk5BSVJFIiwidGhlbiIsImFuc3dlcnMiLCJwYWNrYWdlc1RvSW5zdGFsbCIsImluc3RhbGxSdW5uZXIiLCJwdXNoIiwicnVubmVyIiwiaW5zdGFsbEZyYW1ld29yayIsImZyYW1ld29yayIsImluc3RhbGxSZXBvcnRlciIsImNvbmNhdCIsInJlcG9ydGVycyIsImluc3RhbGxTZXJ2aWNlcyIsInNlcnZpY2VzIiwiZXhlY3V0aW9uTW9kZSIsImxlbmd0aCIsImpvaW4iLCJzYXZlRGV2IiwiZXJyIiwicmVuZGVyQ29uZmlndXJhdGlvbkZpbGUiLCJwcm9jZXNzIiwiZXhpdCIsInRwbCIsImZzIiwicmVhZEZpbGVTeW5jIiwicGF0aCIsIl9fZGlybmFtZSIsInJlbmRlcmVkVHBsIiwiZWpzIiwicmVuZGVyIiwid3JpdGVGaWxlU3luYyIsImN3ZCIsIkNPTkZJR19IRUxQRVJfU1VDQ0VTU19NRVNTQUdFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkFRd0JBLEs7O0FBUnhCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7QUFFZSxTQUFTQSxLQUFULEdBQWtCO0FBQzdCQyxZQUFRQyxHQUFSLENBQVlDLDJCQUFaLEVBRDZCLENBQ0k7QUFDakNDLHVCQUFTQyxNQUFULENBQWdCQyxxQkFBaEIsRUFBK0JDLElBQS9CLENBQXFDQyxPQUFELElBQWE7QUFDN0MsWUFBSUMsb0JBQW9CLEVBQXhCO0FBQ0EsWUFBSUQsUUFBUUUsYUFBWixFQUEyQjtBQUN2QkQsOEJBQWtCRSxJQUFsQixDQUF3QixRQUFPSCxRQUFRSSxNQUFPLFNBQTlDO0FBQ0g7QUFDRCxZQUFJSixRQUFRSyxnQkFBWixFQUE4QjtBQUMxQkosOEJBQWtCRSxJQUFsQixDQUF3QixRQUFPSCxRQUFRTSxTQUFVLFlBQWpEO0FBQ0g7QUFDRCxZQUFJTixRQUFRTyxlQUFaLEVBQTZCO0FBQ3pCTixnQ0FBb0JBLGtCQUFrQk8sTUFBbEIsQ0FBeUJSLFFBQVFTLFNBQWpDLENBQXBCO0FBQ0g7QUFDRCxZQUFJVCxRQUFRVSxlQUFaLEVBQTZCO0FBQ3pCVCxnQ0FBb0JBLGtCQUFrQk8sTUFBbEIsQ0FBeUJSLFFBQVFXLFFBQWpDLENBQXBCO0FBQ0g7QUFDRCxZQUFJWCxRQUFRWSxhQUFSLEtBQTBCLE1BQTlCLEVBQXNDO0FBQ2xDWCw4QkFBa0JFLElBQWxCLENBQXVCLFdBQXZCO0FBQ0g7O0FBRUQsWUFBSUYsa0JBQWtCWSxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUM5QnBCLG9CQUFRQyxHQUFSLENBQVksZ0NBQVosRUFBOENPLGtCQUFrQmEsSUFBbEIsQ0FBdUIsTUFBdkIsQ0FBOUMsRUFEOEIsQ0FDZ0Q7QUFDOUUsbUJBQU8saUNBQWtCYixpQkFBbEIsRUFBcUMsRUFBRWMsU0FBUyxJQUFYLEVBQXJDLEVBQXlEQyxHQUFELElBQVM7QUFDcEUsb0JBQUlBLEdBQUosRUFBUztBQUNMLDBCQUFNQSxHQUFOO0FBQ0g7O0FBRUR2Qix3QkFBUUMsR0FBUixDQUFZLG1FQUFaLEVBTG9FLENBS2E7QUFDakZ1Qix3Q0FBd0JqQixPQUF4QjtBQUNILGFBUE0sQ0FBUDtBQVFIOztBQUVEaUIsZ0NBQXdCakIsT0FBeEI7QUFDQWtCLGdCQUFRQyxJQUFSLENBQWEsQ0FBYjtBQUNILEtBaENEO0FBaUNIOztBQUVELFNBQVNGLHVCQUFULENBQWtDakIsT0FBbEMsRUFBMkM7QUFDdkMsUUFBSW9CLE1BQU1DLGFBQUdDLFlBQUgsQ0FBZ0JDLGVBQUtULElBQUwsQ0FBVVUsU0FBVixFQUFxQiw4QkFBckIsQ0FBaEIsRUFBc0UsTUFBdEUsQ0FBVjtBQUNBLFFBQUlDLGNBQWNDLGNBQUlDLE1BQUosQ0FBV1AsR0FBWCxFQUFnQixFQUFFcEIsT0FBRixFQUFoQixDQUFsQjtBQUNBcUIsaUJBQUdPLGFBQUgsQ0FBaUJMLGVBQUtULElBQUwsQ0FBVUksUUFBUVcsR0FBUixFQUFWLEVBQXlCLGNBQXpCLENBQWpCLEVBQTJESixXQUEzRDtBQUNBaEMsWUFBUUMsR0FBUixDQUFZb0MscUNBQVosRUFKdUMsQ0FJSTtBQUM5QyIsImZpbGUiOiJzZXR1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBlanMgZnJvbSAnZWpzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBpbnF1aXJlciBmcm9tICdpbnF1aXJlcidcbmltcG9ydCBucG1JbnN0YWxsUGFja2FnZSBmcm9tICducG0taW5zdGFsbC1wYWNrYWdlJ1xuXG5pbXBvcnQgeyBDT05GSUdfSEVMUEVSX0lOVFJPLCBDT05GSUdfSEVMUEVSX1NVQ0NFU1NfTUVTU0FHRSwgUVVFU1RJT05OQUlSRSB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cCAoKSB7XG4gICAgY29uc29sZS5sb2coQ09ORklHX0hFTFBFUl9JTlRSTykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgaW5xdWlyZXIucHJvbXB0KFFVRVNUSU9OTkFJUkUpLnRoZW4oKGFuc3dlcnMpID0+IHtcbiAgICAgICAgbGV0IHBhY2thZ2VzVG9JbnN0YWxsID0gW11cbiAgICAgICAgaWYgKGFuc3dlcnMuaW5zdGFsbFJ1bm5lcikge1xuICAgICAgICAgICAgcGFja2FnZXNUb0luc3RhbGwucHVzaChgd2Rpby0ke2Fuc3dlcnMucnVubmVyfS1ydW5uZXJgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbnN3ZXJzLmluc3RhbGxGcmFtZXdvcmspIHtcbiAgICAgICAgICAgIHBhY2thZ2VzVG9JbnN0YWxsLnB1c2goYHdkaW8tJHthbnN3ZXJzLmZyYW1ld29ya30tZnJhbWV3b3JrYClcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5zd2Vycy5pbnN0YWxsUmVwb3J0ZXIpIHtcbiAgICAgICAgICAgIHBhY2thZ2VzVG9JbnN0YWxsID0gcGFja2FnZXNUb0luc3RhbGwuY29uY2F0KGFuc3dlcnMucmVwb3J0ZXJzKVxuICAgICAgICB9XG4gICAgICAgIGlmIChhbnN3ZXJzLmluc3RhbGxTZXJ2aWNlcykge1xuICAgICAgICAgICAgcGFja2FnZXNUb0luc3RhbGwgPSBwYWNrYWdlc1RvSW5zdGFsbC5jb25jYXQoYW5zd2Vycy5zZXJ2aWNlcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5zd2Vycy5leGVjdXRpb25Nb2RlID09PSAnc3luYycpIHtcbiAgICAgICAgICAgIHBhY2thZ2VzVG9JbnN0YWxsLnB1c2goJ3dkaW8tc3luYycpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFja2FnZXNUb0luc3RhbGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1xcbkluc3RhbGxpbmcgd2RpbyBwYWNrYWdlczpcXG4tJywgcGFja2FnZXNUb0luc3RhbGwuam9pbignXFxuLSAnKSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICByZXR1cm4gbnBtSW5zdGFsbFBhY2thZ2UocGFja2FnZXNUb0luc3RhbGwsIHsgc2F2ZURldjogdHJ1ZSB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXFxuUGFja2FnZXMgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSwgY3JlYXRpbmcgY29uZmlndXJhdGlvbiBmaWxlLi4uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgcmVuZGVyQ29uZmlndXJhdGlvbkZpbGUoYW5zd2VycylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJDb25maWd1cmF0aW9uRmlsZShhbnN3ZXJzKVxuICAgICAgICBwcm9jZXNzLmV4aXQoMClcbiAgICB9KVxufVxuXG5mdW5jdGlvbiByZW5kZXJDb25maWd1cmF0aW9uRmlsZSAoYW5zd2Vycykge1xuICAgIGxldCB0cGwgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy90ZW1wbGF0ZXMvd2Rpby5jb25mLnRwbC5lanMnKSwgJ3V0ZjgnKVxuICAgIGxldCByZW5kZXJlZFRwbCA9IGVqcy5yZW5kZXIodHBsLCB7IGFuc3dlcnMgfSlcbiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnd2Rpby5jb25mLmpzJyksIHJlbmRlcmVkVHBsKVxuICAgIGNvbnNvbGUubG9nKENPTkZJR19IRUxQRVJfU1VDQ0VTU19NRVNTQUdFKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbn1cbiJdfQ==