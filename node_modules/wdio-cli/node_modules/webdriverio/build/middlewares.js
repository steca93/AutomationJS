"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiremoteHandler = exports.elementErrorHandler = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('webdriverio');
/**
 * This method is an command wrapper for elements that checks if a command is called
 * that wasn't found on the page and automatically waits for it
 *
 * @param  {Function} fn  commandWrap from wdio-sync package (or shim if not running in sync)
 */

const elementErrorHandler = fn => (commandName, commandFn) => {
  return function (...args) {
    /**
     * wait on element if:
     *  - elementId couldn't be fetched in the first place
     *  - command is not explicit wait command for existance or displayedness
     */
    if (!this.elementId && !commandName.match(/(wait(Until|ForDisplayed|ForExist|ForEnabled)|isExisting)/)) {
      log.debug(`command ${commandName} was called on an element ("${this.selector}") ` + `that wasn't found, waiting for it...`);
      return fn(commandName, () => {
        /**
         * create new promise so we can apply a custom error message in cases waitForExist fails
         */
        return new Promise((resolve, reject) => this.waitForExist().then(resolve, reject)).then(
        /**
         * if waitForExist was successful requery element and assign elementId to the scope
         */
        () => {
          return this.parent.$(this.selector).then(elem => {
            this.elementId = elem.elementId;
            return fn(commandName, commandFn).apply(this, args);
          });
        },
        /**
         * if waitForExist failes throw custom error
         */
        () => {
          throw new Error(`Can't call ${commandName} on element with selector "${this.selector}" because element wasn't found`);
        });
      }).apply(this);
    }

    return fn(commandName, commandFn).apply(this, args);
  };
};
/**
 * handle single command calls from multiremote instances
 */


exports.elementErrorHandler = elementErrorHandler;

const multiremoteHandler = wrapCommand => commandName => {
  return wrapCommand(commandName, function (...args) {
    const commandResults = this.instances.map(instanceName => {
      return this[instanceName][commandName](...args);
    });
    return Promise.all(commandResults);
  });
};

exports.multiremoteHandler = multiremoteHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWRkbGV3YXJlcy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJlbGVtZW50RXJyb3JIYW5kbGVyIiwiZm4iLCJjb21tYW5kTmFtZSIsImNvbW1hbmRGbiIsImFyZ3MiLCJlbGVtZW50SWQiLCJtYXRjaCIsImRlYnVnIiwic2VsZWN0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIndhaXRGb3JFeGlzdCIsInRoZW4iLCJwYXJlbnQiLCIkIiwiZWxlbSIsImFwcGx5IiwiRXJyb3IiLCJtdWx0aXJlbW90ZUhhbmRsZXIiLCJ3cmFwQ29tbWFuZCIsImNvbW1hbmRSZXN1bHRzIiwiaW5zdGFuY2VzIiwibWFwIiwiaW5zdGFuY2VOYW1lIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxhQUFQLENBQVo7QUFFQTs7Ozs7OztBQU1PLE1BQU1DLG1CQUFtQixHQUFJQyxFQUFELElBQVEsQ0FBQ0MsV0FBRCxFQUFjQyxTQUFkLEtBQTRCO0FBQ25FLFNBQU8sVUFBVSxHQUFHQyxJQUFiLEVBQW1CO0FBQ3RCOzs7OztBQUtBLFFBQUksQ0FBQyxLQUFLQyxTQUFOLElBQW1CLENBQUNILFdBQVcsQ0FBQ0ksS0FBWixDQUFrQiwyREFBbEIsQ0FBeEIsRUFBd0c7QUFDcEdQLE1BQUFBLEdBQUcsQ0FBQ1EsS0FBSixDQUNLLFdBQVVMLFdBQVksK0JBQThCLEtBQUtNLFFBQVMsS0FBbkUsR0FDQyxzQ0FGTDtBQUtBLGFBQU9QLEVBQUUsQ0FBQ0MsV0FBRCxFQUFjLE1BQU07QUFDekI7OztBQUdBLGVBQU8sSUFBSU8sT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQixLQUFLQyxZQUFMLEdBQW9CQyxJQUFwQixDQUF5QkgsT0FBekIsRUFBa0NDLE1BQWxDLENBQWpDLEVBQTRFRSxJQUE1RTtBQUNIOzs7QUFHQSxjQUFNO0FBQ0YsaUJBQU8sS0FBS0MsTUFBTCxDQUFZQyxDQUFaLENBQWMsS0FBS1AsUUFBbkIsRUFBNkJLLElBQTdCLENBQW1DRyxJQUFELElBQVU7QUFDL0MsaUJBQUtYLFNBQUwsR0FBaUJXLElBQUksQ0FBQ1gsU0FBdEI7QUFDQSxtQkFBT0osRUFBRSxDQUFDQyxXQUFELEVBQWNDLFNBQWQsQ0FBRixDQUEyQmMsS0FBM0IsQ0FBaUMsSUFBakMsRUFBdUNiLElBQXZDLENBQVA7QUFDSCxXQUhNLENBQVA7QUFJSCxTQVRFO0FBVUg7OztBQUdBLGNBQU07QUFDRixnQkFBTSxJQUFJYyxLQUFKLENBQVcsY0FBYWhCLFdBQVksOEJBQTZCLEtBQUtNLFFBQVMsZ0NBQS9FLENBQU47QUFDSCxTQWZFLENBQVA7QUFpQkgsT0FyQlEsQ0FBRixDQXFCSlMsS0FyQkksQ0FxQkUsSUFyQkYsQ0FBUDtBQXNCSDs7QUFFRCxXQUFPaEIsRUFBRSxDQUFDQyxXQUFELEVBQWNDLFNBQWQsQ0FBRixDQUEyQmMsS0FBM0IsQ0FBaUMsSUFBakMsRUFBdUNiLElBQXZDLENBQVA7QUFDSCxHQXJDRDtBQXNDSCxDQXZDTTtBQXlDUDs7Ozs7OztBQUdPLE1BQU1lLGtCQUFrQixHQUFJQyxXQUFELElBQWtCbEIsV0FBRCxJQUFpQjtBQUNoRSxTQUFPa0IsV0FBVyxDQUFDbEIsV0FBRCxFQUFjLFVBQVUsR0FBR0UsSUFBYixFQUFtQjtBQUMvQyxVQUFNaUIsY0FBYyxHQUFHLEtBQUtDLFNBQUwsQ0FBZUMsR0FBZixDQUFvQkMsWUFBRCxJQUFrQjtBQUN4RCxhQUFPLEtBQUtBLFlBQUwsRUFBbUJ0QixXQUFuQixFQUFnQyxHQUFHRSxJQUFuQyxDQUFQO0FBQ0gsS0FGc0IsQ0FBdkI7QUFJQSxXQUFPSyxPQUFPLENBQUNnQixHQUFSLENBQVlKLGNBQVosQ0FBUDtBQUNILEdBTmlCLENBQWxCO0FBT0gsQ0FSTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnQHdkaW8vbG9nZ2VyJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dlYmRyaXZlcmlvJylcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBhbiBjb21tYW5kIHdyYXBwZXIgZm9yIGVsZW1lbnRzIHRoYXQgY2hlY2tzIGlmIGEgY29tbWFuZCBpcyBjYWxsZWRcbiAqIHRoYXQgd2Fzbid0IGZvdW5kIG9uIHRoZSBwYWdlIGFuZCBhdXRvbWF0aWNhbGx5IHdhaXRzIGZvciBpdFxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgY29tbWFuZFdyYXAgZnJvbSB3ZGlvLXN5bmMgcGFja2FnZSAob3Igc2hpbSBpZiBub3QgcnVubmluZyBpbiBzeW5jKVxuICovXG5leHBvcnQgY29uc3QgZWxlbWVudEVycm9ySGFuZGxlciA9IChmbikgPT4gKGNvbW1hbmROYW1lLCBjb21tYW5kRm4pID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdhaXQgb24gZWxlbWVudCBpZjpcbiAgICAgICAgICogIC0gZWxlbWVudElkIGNvdWxkbid0IGJlIGZldGNoZWQgaW4gdGhlIGZpcnN0IHBsYWNlXG4gICAgICAgICAqICAtIGNvbW1hbmQgaXMgbm90IGV4cGxpY2l0IHdhaXQgY29tbWFuZCBmb3IgZXhpc3RhbmNlIG9yIGRpc3BsYXllZG5lc3NcbiAgICAgICAgICovXG4gICAgICAgIGlmICghdGhpcy5lbGVtZW50SWQgJiYgIWNvbW1hbmROYW1lLm1hdGNoKC8od2FpdChVbnRpbHxGb3JEaXNwbGF5ZWR8Rm9yRXhpc3R8Rm9yRW5hYmxlZCl8aXNFeGlzdGluZykvKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgIGBjb21tYW5kICR7Y29tbWFuZE5hbWV9IHdhcyBjYWxsZWQgb24gYW4gZWxlbWVudCAoXCIke3RoaXMuc2VsZWN0b3J9XCIpIGAgK1xuICAgICAgICAgICAgICAgIGB0aGF0IHdhc24ndCBmb3VuZCwgd2FpdGluZyBmb3IgaXQuLi5gXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHJldHVybiBmbihjb21tYW5kTmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIGNyZWF0ZSBuZXcgcHJvbWlzZSBzbyB3ZSBjYW4gYXBwbHkgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSBpbiBjYXNlcyB3YWl0Rm9yRXhpc3QgZmFpbHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gdGhpcy53YWl0Rm9yRXhpc3QoKS50aGVuKHJlc29sdmUsIHJlamVjdCkpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBpZiB3YWl0Rm9yRXhpc3Qgd2FzIHN1Y2Nlc3NmdWwgcmVxdWVyeSBlbGVtZW50IGFuZCBhc3NpZ24gZWxlbWVudElkIHRvIHRoZSBzY29wZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LiQodGhpcy5zZWxlY3RvcikudGhlbigoZWxlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudElkID0gZWxlbS5lbGVtZW50SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4oY29tbWFuZE5hbWUsIGNvbW1hbmRGbikuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBpZiB3YWl0Rm9yRXhpc3QgZmFpbGVzIHRocm93IGN1c3RvbSBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjYWxsICR7Y29tbWFuZE5hbWV9IG9uIGVsZW1lbnQgd2l0aCBzZWxlY3RvciBcIiR7dGhpcy5zZWxlY3Rvcn1cIiBiZWNhdXNlIGVsZW1lbnQgd2Fzbid0IGZvdW5kYClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pLmFwcGx5KHRoaXMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm4oY29tbWFuZE5hbWUsIGNvbW1hbmRGbikuYXBwbHkodGhpcywgYXJncylcbiAgICB9XG59XG5cbi8qKlxuICogaGFuZGxlIHNpbmdsZSBjb21tYW5kIGNhbGxzIGZyb20gbXVsdGlyZW1vdGUgaW5zdGFuY2VzXG4gKi9cbmV4cG9ydCBjb25zdCBtdWx0aXJlbW90ZUhhbmRsZXIgPSAod3JhcENvbW1hbmQpID0+IChjb21tYW5kTmFtZSkgPT4ge1xuICAgIHJldHVybiB3cmFwQ29tbWFuZChjb21tYW5kTmFtZSwgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZFJlc3VsdHMgPSB0aGlzLmluc3RhbmNlcy5tYXAoKGluc3RhbmNlTmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbaW5zdGFuY2VOYW1lXVtjb21tYW5kTmFtZV0oLi4uYXJncylcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoY29tbWFuZFJlc3VsdHMpXG4gICAgfSlcbn1cbiJdfQ==