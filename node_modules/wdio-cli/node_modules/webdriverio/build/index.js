"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiremote = exports.attach = exports.remote = void 0;

require("source-map-support/register");

var _webdriver = _interopRequireDefault(require("webdriver"));

var _config = require("@wdio/config");

var _multiremote = _interopRequireDefault(require("./multiremote"));

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A method to create a new session with WebdriverIO
 *
 * @param  {Object} [params={}]       Options to create the session with
 * @param  {function} remoteModifier  Modifier function to change the monad object
 * @return {object}                   browser object with sessionId
 */
const remote = function (params = {}, remoteModifier) {
  const config = (0, _config.validateConfig)(_constants.WDIO_DEFAULTS, params);

  const modifier = (client, options) => {
    if (typeof remoteModifier === 'function') {
      client = remoteModifier(client, Object.assign(options, config));
    }

    Object.assign(options, config);
    return client;
  };

  if (params.user && params.key) {
    params = Object.assign(params, (0, _config.detectBackend)(params));
  }

  const prototype = (0, _utils.getPrototype)('browser');
  /**
   * apply mobile check flags to browser scope
   */

  const mobileDetection = (0, _utils.mobileDetector)(params.capabilities);
  Object.assign(prototype, Object.keys(mobileDetection).reduce((proto, flag) => {
    proto[flag] = {
      value: mobileDetection[flag]
    };
    return proto;
  }, {}));
  return _webdriver.default.newSession(params, modifier, prototype, _config.wrapCommand);
};

exports.remote = remote;

const attach = function (params) {
  const prototype = (0, _utils.getPrototype)('browser');
  return _webdriver.default.attachToSession(params, null, prototype, _config.wrapCommand);
};

exports.attach = attach;

const multiremote = async function (params = {}) {
  const multibrowser = new _multiremote.default();
  const browserNames = Object.keys(params);
  /**
   * create all instance sessions
   */

  await Promise.all(browserNames.map(browserName => {
    (0, _config.validateConfig)(_constants.WDIO_DEFAULTS, params[browserName]);
    const prototype = (0, _utils.getPrototype)('browser');

    const instance = _webdriver.default.newSession(params[browserName], null, prototype);

    return multibrowser.addInstance(browserName, instance);
  }));
  /**
   * use attachToSession capability to wrap instances around blank pod
   */

  const prototype = (0, _utils.getPrototype)('browser');
  const sessionParams = {
    sessionId: '',
    isW3C: multibrowser.instances[browserNames[0]].isW3C
  };
  return _webdriver.default.attachToSession(sessionParams, multibrowser.modifier.bind(multibrowser), prototype);
};

exports.multiremote = multiremote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZW1vdGUiLCJwYXJhbXMiLCJyZW1vdGVNb2RpZmllciIsImNvbmZpZyIsIldESU9fREVGQVVMVFMiLCJtb2RpZmllciIsImNsaWVudCIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1c2VyIiwia2V5IiwicHJvdG90eXBlIiwibW9iaWxlRGV0ZWN0aW9uIiwiY2FwYWJpbGl0aWVzIiwia2V5cyIsInJlZHVjZSIsInByb3RvIiwiZmxhZyIsInZhbHVlIiwiV2ViRHJpdmVyIiwibmV3U2Vzc2lvbiIsIndyYXBDb21tYW5kIiwiYXR0YWNoIiwiYXR0YWNoVG9TZXNzaW9uIiwibXVsdGlyZW1vdGUiLCJtdWx0aWJyb3dzZXIiLCJNdWx0aVJlbW90ZSIsImJyb3dzZXJOYW1lcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJicm93c2VyTmFtZSIsImluc3RhbmNlIiwiYWRkSW5zdGFuY2UiLCJzZXNzaW9uUGFyYW1zIiwic2Vzc2lvbklkIiwiaXNXM0MiLCJpbnN0YW5jZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7Ozs7QUFPTyxNQUFNQSxNQUFNLEdBQUcsVUFBVUMsTUFBTSxHQUFHLEVBQW5CLEVBQXVCQyxjQUF2QixFQUF1QztBQUN6RCxRQUFNQyxNQUFNLEdBQUcsNEJBQWVDLHdCQUFmLEVBQThCSCxNQUE5QixDQUFmOztBQUNBLFFBQU1JLFFBQVEsR0FBRyxDQUFDQyxNQUFELEVBQVNDLE9BQVQsS0FBcUI7QUFDbEMsUUFBSSxPQUFPTCxjQUFQLEtBQTBCLFVBQTlCLEVBQTBDO0FBQ3RDSSxNQUFBQSxNQUFNLEdBQUdKLGNBQWMsQ0FBQ0ksTUFBRCxFQUFTRSxNQUFNLENBQUNDLE1BQVAsQ0FBY0YsT0FBZCxFQUF1QkosTUFBdkIsQ0FBVCxDQUF2QjtBQUNIOztBQUVESyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0YsT0FBZCxFQUF1QkosTUFBdkI7QUFDQSxXQUFPRyxNQUFQO0FBQ0gsR0FQRDs7QUFTQSxNQUFJTCxNQUFNLENBQUNTLElBQVAsSUFBZVQsTUFBTSxDQUFDVSxHQUExQixFQUErQjtBQUMzQlYsSUFBQUEsTUFBTSxHQUFHTyxNQUFNLENBQUNDLE1BQVAsQ0FBY1IsTUFBZCxFQUFzQiwyQkFBY0EsTUFBZCxDQUF0QixDQUFUO0FBQ0g7O0FBRUQsUUFBTVcsU0FBUyxHQUFHLHlCQUFhLFNBQWIsQ0FBbEI7QUFFQTs7OztBQUdBLFFBQU1DLGVBQWUsR0FBRywyQkFBZVosTUFBTSxDQUFDYSxZQUF0QixDQUF4QjtBQUNBTixFQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBY0csU0FBZCxFQUF5QkosTUFBTSxDQUFDTyxJQUFQLENBQVlGLGVBQVosRUFBNkJHLE1BQTdCLENBQW9DLENBQUNDLEtBQUQsRUFBUUMsSUFBUixLQUFpQjtBQUMxRUQsSUFBQUEsS0FBSyxDQUFDQyxJQUFELENBQUwsR0FBYztBQUFFQyxNQUFBQSxLQUFLLEVBQUVOLGVBQWUsQ0FBQ0ssSUFBRDtBQUF4QixLQUFkO0FBQ0EsV0FBT0QsS0FBUDtBQUNILEdBSHdCLEVBR3RCLEVBSHNCLENBQXpCO0FBS0EsU0FBT0csbUJBQVVDLFVBQVYsQ0FBcUJwQixNQUFyQixFQUE2QkksUUFBN0IsRUFBdUNPLFNBQXZDLEVBQWtEVSxtQkFBbEQsQ0FBUDtBQUNILENBM0JNOzs7O0FBNkJBLE1BQU1DLE1BQU0sR0FBRyxVQUFVdEIsTUFBVixFQUFrQjtBQUNwQyxRQUFNVyxTQUFTLEdBQUcseUJBQWEsU0FBYixDQUFsQjtBQUNBLFNBQU9RLG1CQUFVSSxlQUFWLENBQTBCdkIsTUFBMUIsRUFBa0MsSUFBbEMsRUFBd0NXLFNBQXhDLEVBQW1EVSxtQkFBbkQsQ0FBUDtBQUNILENBSE07Ozs7QUFLQSxNQUFNRyxXQUFXLEdBQUcsZ0JBQWdCeEIsTUFBTSxHQUFHLEVBQXpCLEVBQTZCO0FBQ3BELFFBQU15QixZQUFZLEdBQUcsSUFBSUMsb0JBQUosRUFBckI7QUFDQSxRQUFNQyxZQUFZLEdBQUdwQixNQUFNLENBQUNPLElBQVAsQ0FBWWQsTUFBWixDQUFyQjtBQUVBOzs7O0FBR0EsUUFBTTRCLE9BQU8sQ0FBQ0MsR0FBUixDQUNGRixZQUFZLENBQUNHLEdBQWIsQ0FBa0JDLFdBQUQsSUFBaUI7QUFDOUIsZ0NBQWU1Qix3QkFBZixFQUE4QkgsTUFBTSxDQUFDK0IsV0FBRCxDQUFwQztBQUNBLFVBQU1wQixTQUFTLEdBQUcseUJBQWEsU0FBYixDQUFsQjs7QUFDQSxVQUFNcUIsUUFBUSxHQUFHYixtQkFBVUMsVUFBVixDQUFxQnBCLE1BQU0sQ0FBQytCLFdBQUQsQ0FBM0IsRUFBMEMsSUFBMUMsRUFBZ0RwQixTQUFoRCxDQUFqQjs7QUFDQSxXQUFPYyxZQUFZLENBQUNRLFdBQWIsQ0FBeUJGLFdBQXpCLEVBQXNDQyxRQUF0QyxDQUFQO0FBQ0gsR0FMRCxDQURFLENBQU47QUFTQTs7OztBQUdBLFFBQU1yQixTQUFTLEdBQUcseUJBQWEsU0FBYixDQUFsQjtBQUNBLFFBQU11QixhQUFhLEdBQUc7QUFDbEJDLElBQUFBLFNBQVMsRUFBRSxFQURPO0FBRWxCQyxJQUFBQSxLQUFLLEVBQUVYLFlBQVksQ0FBQ1ksU0FBYixDQUF1QlYsWUFBWSxDQUFDLENBQUQsQ0FBbkMsRUFBd0NTO0FBRjdCLEdBQXRCO0FBSUEsU0FBT2pCLG1CQUFVSSxlQUFWLENBQTBCVyxhQUExQixFQUEyQ1QsWUFBWSxDQUFDckIsUUFBeEQsTUFBMkNxQixZQUEzQyxHQUFrRWQsU0FBbEUsQ0FBUDtBQUNILENBekJNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYkRyaXZlciBmcm9tICd3ZWJkcml2ZXInXG5pbXBvcnQgeyB2YWxpZGF0ZUNvbmZpZywgd3JhcENvbW1hbmQsIGRldGVjdEJhY2tlbmQgfSBmcm9tICdAd2Rpby9jb25maWcnXG5cbmltcG9ydCBNdWx0aVJlbW90ZSBmcm9tICcuL211bHRpcmVtb3RlJ1xuaW1wb3J0IHsgV0RJT19ERUZBVUxUUyB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgZ2V0UHJvdG90eXBlLCBtb2JpbGVEZXRlY3RvciB9IGZyb20gJy4vdXRpbHMnXG5cbi8qKlxuICogQSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHNlc3Npb24gd2l0aCBXZWJkcml2ZXJJT1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gW3BhcmFtcz17fV0gICAgICAgT3B0aW9ucyB0byBjcmVhdGUgdGhlIHNlc3Npb24gd2l0aFxuICogQHBhcmFtICB7ZnVuY3Rpb259IHJlbW90ZU1vZGlmaWVyICBNb2RpZmllciBmdW5jdGlvbiB0byBjaGFuZ2UgdGhlIG1vbmFkIG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICBicm93c2VyIG9iamVjdCB3aXRoIHNlc3Npb25JZFxuICovXG5leHBvcnQgY29uc3QgcmVtb3RlID0gZnVuY3Rpb24gKHBhcmFtcyA9IHt9LCByZW1vdGVNb2RpZmllcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHZhbGlkYXRlQ29uZmlnKFdESU9fREVGQVVMVFMsIHBhcmFtcylcbiAgICBjb25zdCBtb2RpZmllciA9IChjbGllbnQsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZW1vdGVNb2RpZmllciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2xpZW50ID0gcmVtb3RlTW9kaWZpZXIoY2xpZW50LCBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZykpXG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZylcbiAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudXNlciAmJiBwYXJhbXMua2V5KSB7XG4gICAgICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24ocGFyYW1zLCBkZXRlY3RCYWNrZW5kKHBhcmFtcykpXG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlKCdicm93c2VyJylcblxuICAgIC8qKlxuICAgICAqIGFwcGx5IG1vYmlsZSBjaGVjayBmbGFncyB0byBicm93c2VyIHNjb3BlXG4gICAgICovXG4gICAgY29uc3QgbW9iaWxlRGV0ZWN0aW9uID0gbW9iaWxlRGV0ZWN0b3IocGFyYW1zLmNhcGFiaWxpdGllcylcbiAgICBPYmplY3QuYXNzaWduKHByb3RvdHlwZSwgT2JqZWN0LmtleXMobW9iaWxlRGV0ZWN0aW9uKS5yZWR1Y2UoKHByb3RvLCBmbGFnKSA9PiB7XG4gICAgICAgIHByb3RvW2ZsYWddID0geyB2YWx1ZTogbW9iaWxlRGV0ZWN0aW9uW2ZsYWddIH1cbiAgICAgICAgcmV0dXJuIHByb3RvXG4gICAgfSwge30pKVxuXG4gICAgcmV0dXJuIFdlYkRyaXZlci5uZXdTZXNzaW9uKHBhcmFtcywgbW9kaWZpZXIsIHByb3RvdHlwZSwgd3JhcENvbW1hbmQpXG59XG5cbmV4cG9ydCBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlKCdicm93c2VyJylcbiAgICByZXR1cm4gV2ViRHJpdmVyLmF0dGFjaFRvU2Vzc2lvbihwYXJhbXMsIG51bGwsIHByb3RvdHlwZSwgd3JhcENvbW1hbmQpXG59XG5cbmV4cG9ydCBjb25zdCBtdWx0aXJlbW90ZSA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IG11bHRpYnJvd3NlciA9IG5ldyBNdWx0aVJlbW90ZSgpXG4gICAgY29uc3QgYnJvd3Nlck5hbWVzID0gT2JqZWN0LmtleXMocGFyYW1zKVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGFsbCBpbnN0YW5jZSBzZXNzaW9uc1xuICAgICAqL1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBicm93c2VyTmFtZXMubWFwKChicm93c2VyTmFtZSkgPT4ge1xuICAgICAgICAgICAgdmFsaWRhdGVDb25maWcoV0RJT19ERUZBVUxUUywgcGFyYW1zW2Jyb3dzZXJOYW1lXSlcbiAgICAgICAgICAgIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZSgnYnJvd3NlcicpXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IFdlYkRyaXZlci5uZXdTZXNzaW9uKHBhcmFtc1ticm93c2VyTmFtZV0sIG51bGwsIHByb3RvdHlwZSlcbiAgICAgICAgICAgIHJldHVybiBtdWx0aWJyb3dzZXIuYWRkSW5zdGFuY2UoYnJvd3Nlck5hbWUsIGluc3RhbmNlKVxuICAgICAgICB9KVxuICAgIClcblxuICAgIC8qKlxuICAgICAqIHVzZSBhdHRhY2hUb1Nlc3Npb24gY2FwYWJpbGl0eSB0byB3cmFwIGluc3RhbmNlcyBhcm91bmQgYmxhbmsgcG9kXG4gICAgICovXG4gICAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlKCdicm93c2VyJylcbiAgICBjb25zdCBzZXNzaW9uUGFyYW1zID0ge1xuICAgICAgICBzZXNzaW9uSWQ6ICcnLFxuICAgICAgICBpc1czQzogbXVsdGlicm93c2VyLmluc3RhbmNlc1ticm93c2VyTmFtZXNbMF1dLmlzVzNDXG4gICAgfVxuICAgIHJldHVybiBXZWJEcml2ZXIuYXR0YWNoVG9TZXNzaW9uKHNlc3Npb25QYXJhbXMsIDo6bXVsdGlicm93c2VyLm1vZGlmaWVyLCBwcm90b3R5cGUpXG59XG4iXX0=