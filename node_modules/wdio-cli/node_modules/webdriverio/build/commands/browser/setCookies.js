"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setCookies;

require("source-map-support/register");

/**
 *
 * Sets a [cookie](https://w3c.github.io/webdriver/#cookies) for current page. Make sure you are
 * on the page that should receive the cookie. You can't set a cookie for an arbitrary page without
 * being on that page.
 *
 * <example>
    :setCookie.js
    it('should set a cookie for the page', () => {
        browser.url('/')
        browser.setCookie({name: 'test', value: '123'})

        const cookies = browser.getCookie()
        console.log(cookies); // outputs: [{ name: 'test', value: '123', domain: 'www.example.com' }]
    });
 * </example>
 *
 * @alias browser.setCookie
 * @param {Object} cookie cookie object
 * @param {String} cookie.name The name of the cookie
 * @param {String} cookie.value The cookie value
 * @param {String} cookie.path  (Optional) The cookie path
 * @param {String} cookie.domain  (Optional) The domain the cookie is visible to
 * @param {Boolean} cookie.secure (Optional) Whether the cookie is a secure cookie
 * @param {Boolean} cookie.httpOnly  (Optional) Whether the cookie is an httpOnly cookie
 * @param {Number} cookie.expiry  (Optional) When the cookie expires, specified in seconds since midnight, January 1, 1970 UTC
 * @uses protocol/addCookie
 * @type cookie
 *
 */
async function setCookies(cookieObjs) {
  const cookieObjsList = !Array.isArray(cookieObjs) ? [cookieObjs] : cookieObjs;

  if (cookieObjsList.some(obj => !(obj instanceof Object))) {
    throw new Error('Invalid input (see http://webdriver.io/docs/api/browser/setCookies.html for documentation.');
  }

  return Promise.all(cookieObjsList.map(cookieObj => this.addCookie(cookieObj)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3NldENvb2tpZXMuanMiXSwibmFtZXMiOlsic2V0Q29va2llcyIsImNvb2tpZU9ianMiLCJjb29raWVPYmpzTGlzdCIsIkFycmF5IiwiaXNBcnJheSIsInNvbWUiLCJvYmoiLCJPYmplY3QiLCJFcnJvciIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjb29raWVPYmoiLCJhZGRDb29raWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QmUsZUFBZUEsVUFBZixDQUEwQkMsVUFBMUIsRUFBc0M7QUFDakQsUUFBTUMsY0FBYyxHQUFHLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxVQUFkLENBQUQsR0FBNkIsQ0FBQ0EsVUFBRCxDQUE3QixHQUE0Q0EsVUFBbkU7O0FBRUEsTUFBSUMsY0FBYyxDQUFDRyxJQUFmLENBQW9CQyxHQUFHLElBQUksRUFBRUEsR0FBRyxZQUFZQyxNQUFqQixDQUEzQixDQUFKLEVBQTBEO0FBQ3RELFVBQU0sSUFBSUMsS0FBSixDQUFVLDRGQUFWLENBQU47QUFDSDs7QUFFRCxTQUFPQyxPQUFPLENBQUNDLEdBQVIsQ0FBWVIsY0FBYyxDQUFDUyxHQUFmLENBQW1CQyxTQUFTLElBQUksS0FBS0MsU0FBTCxDQUFlRCxTQUFmLENBQWhDLENBQVosQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogU2V0cyBhIFtjb29raWVdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvI2Nvb2tpZXMpIGZvciBjdXJyZW50IHBhZ2UuIE1ha2Ugc3VyZSB5b3UgYXJlXG4gKiBvbiB0aGUgcGFnZSB0aGF0IHNob3VsZCByZWNlaXZlIHRoZSBjb29raWUuIFlvdSBjYW4ndCBzZXQgYSBjb29raWUgZm9yIGFuIGFyYml0cmFyeSBwYWdlIHdpdGhvdXRcbiAqIGJlaW5nIG9uIHRoYXQgcGFnZS5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6c2V0Q29va2llLmpzXG4gICAgaXQoJ3Nob3VsZCBzZXQgYSBjb29raWUgZm9yIHRoZSBwYWdlJywgKCkgPT4ge1xuICAgICAgICBicm93c2VyLnVybCgnLycpXG4gICAgICAgIGJyb3dzZXIuc2V0Q29va2llKHtuYW1lOiAndGVzdCcsIHZhbHVlOiAnMTIzJ30pXG5cbiAgICAgICAgY29uc3QgY29va2llcyA9IGJyb3dzZXIuZ2V0Q29va2llKClcbiAgICAgICAgY29uc29sZS5sb2coY29va2llcyk7IC8vIG91dHB1dHM6IFt7IG5hbWU6ICd0ZXN0JywgdmFsdWU6ICcxMjMnLCBkb21haW46ICd3d3cuZXhhbXBsZS5jb20nIH1dXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzIGJyb3dzZXIuc2V0Q29va2llXG4gKiBAcGFyYW0ge09iamVjdH0gY29va2llIGNvb2tpZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb29raWUubmFtZSBUaGUgbmFtZSBvZiB0aGUgY29va2llXG4gKiBAcGFyYW0ge1N0cmluZ30gY29va2llLnZhbHVlIFRoZSBjb29raWUgdmFsdWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb29raWUucGF0aCAgKE9wdGlvbmFsKSBUaGUgY29va2llIHBhdGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb29raWUuZG9tYWluICAoT3B0aW9uYWwpIFRoZSBkb21haW4gdGhlIGNvb2tpZSBpcyB2aXNpYmxlIHRvXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGNvb2tpZS5zZWN1cmUgKE9wdGlvbmFsKSBXaGV0aGVyIHRoZSBjb29raWUgaXMgYSBzZWN1cmUgY29va2llXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGNvb2tpZS5odHRwT25seSAgKE9wdGlvbmFsKSBXaGV0aGVyIHRoZSBjb29raWUgaXMgYW4gaHR0cE9ubHkgY29va2llXG4gKiBAcGFyYW0ge051bWJlcn0gY29va2llLmV4cGlyeSAgKE9wdGlvbmFsKSBXaGVuIHRoZSBjb29raWUgZXhwaXJlcywgc3BlY2lmaWVkIGluIHNlY29uZHMgc2luY2UgbWlkbmlnaHQsIEphbnVhcnkgMSwgMTk3MCBVVENcbiAqIEB1c2VzIHByb3RvY29sL2FkZENvb2tpZVxuICogQHR5cGUgY29va2llXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBzZXRDb29raWVzKGNvb2tpZU9ianMpIHtcbiAgICBjb25zdCBjb29raWVPYmpzTGlzdCA9ICFBcnJheS5pc0FycmF5KGNvb2tpZU9ianMpID8gW2Nvb2tpZU9ianNdIDogY29va2llT2JqcztcblxuICAgIGlmIChjb29raWVPYmpzTGlzdC5zb21lKG9iaiA9PiAhKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCAoc2VlIGh0dHA6Ly93ZWJkcml2ZXIuaW8vZG9jcy9hcGkvYnJvd3Nlci9zZXRDb29raWVzLmh0bWwgZm9yIGRvY3VtZW50YXRpb24uJylcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoY29va2llT2Jqc0xpc3QubWFwKGNvb2tpZU9iaiA9PiB0aGlzLmFkZENvb2tpZShjb29raWVPYmopKSlcbn1cbiJdfQ==