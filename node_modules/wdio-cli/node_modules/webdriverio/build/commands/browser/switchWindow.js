"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = switchWindow;

require("source-map-support/register");

/**
 *
 * Switch focus to a particular tab / window.
 *
 * <example>
    :switchWindow.js
    it('should switch to another window', () => {
        // open url
        browser.url('https://google.com')
        // create new window
        browser.newWindow('http://webdriver.io')

        // switch back via url match
        browser.switchWindow('google.com')

        // switch back via title match
        browser.switchWindow('Next-gen WebDriver test framework')
    });
 * </example>
 *
 * @param {String|RegExp}  urlOrTitleToMatch  String or regular expression that matches the title or url of the page
 *
 * @uses protocol/getWindowHandles, protocol/switchToWindow, protocol/getCurrentUrl, protocol/getTitle
 * @alias browser.switchTab
 * @type window
 *
 */
async function switchWindow(urlOrTitleToMatch) {
  /*!
   * parameter check
   */
  if (typeof urlOrTitleToMatch !== 'string' && !(urlOrTitleToMatch instanceof RegExp)) {
    throw new Error('Unsupported parameter for switchWindow, required is "string" or an RegExp');
  }

  const tabs = await this.getWindowHandles();

  for (const tab of tabs) {
    await this.switchToWindow(tab);
    /**
     * check if url matches
     */

    const url = await this.getCurrentUrl();

    if (url.match(urlOrTitleToMatch)) {
      return tab;
    }
    /**
     * check title
     */


    const title = await this.getTitle();

    if (title.match(urlOrTitleToMatch)) {
      return tab;
    }
  }

  throw new Error(`No window found with title or url matching "${urlOrTitleToMatch}"`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3N3aXRjaFdpbmRvdy5qcyJdLCJuYW1lcyI6WyJzd2l0Y2hXaW5kb3ciLCJ1cmxPclRpdGxlVG9NYXRjaCIsIlJlZ0V4cCIsIkVycm9yIiwidGFicyIsImdldFdpbmRvd0hhbmRsZXMiLCJ0YWIiLCJzd2l0Y2hUb1dpbmRvdyIsInVybCIsImdldEN1cnJlbnRVcmwiLCJtYXRjaCIsInRpdGxlIiwiZ2V0VGl0bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0QmUsZUFBZUEsWUFBZixDQUE2QkMsaUJBQTdCLEVBQWdEO0FBQzNEOzs7QUFHQSxNQUFJLE9BQU9BLGlCQUFQLEtBQTZCLFFBQTdCLElBQXlDLEVBQUVBLGlCQUFpQixZQUFZQyxNQUEvQixDQUE3QyxFQUFxRjtBQUNqRixVQUFNLElBQUlDLEtBQUosQ0FBVSwyRUFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBTUMsSUFBSSxHQUFHLE1BQU0sS0FBS0MsZ0JBQUwsRUFBbkI7O0FBRUEsT0FBSyxNQUFNQyxHQUFYLElBQWtCRixJQUFsQixFQUF3QjtBQUNwQixVQUFNLEtBQUtHLGNBQUwsQ0FBb0JELEdBQXBCLENBQU47QUFFQTs7OztBQUdBLFVBQU1FLEdBQUcsR0FBRyxNQUFNLEtBQUtDLGFBQUwsRUFBbEI7O0FBQ0EsUUFBSUQsR0FBRyxDQUFDRSxLQUFKLENBQVVULGlCQUFWLENBQUosRUFBa0M7QUFDOUIsYUFBT0ssR0FBUDtBQUNIO0FBRUQ7Ozs7O0FBR0EsVUFBTUssS0FBSyxHQUFHLE1BQU0sS0FBS0MsUUFBTCxFQUFwQjs7QUFDQSxRQUFJRCxLQUFLLENBQUNELEtBQU4sQ0FBWVQsaUJBQVosQ0FBSixFQUFvQztBQUNoQyxhQUFPSyxHQUFQO0FBQ0g7QUFDSjs7QUFFRCxRQUFNLElBQUlILEtBQUosQ0FBVywrQ0FBOENGLGlCQUFrQixHQUEzRSxDQUFOO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICpcbiAqIFN3aXRjaCBmb2N1cyB0byBhIHBhcnRpY3VsYXIgdGFiIC8gd2luZG93LlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpzd2l0Y2hXaW5kb3cuanNcbiAgICBpdCgnc2hvdWxkIHN3aXRjaCB0byBhbm90aGVyIHdpbmRvdycsICgpID0+IHtcbiAgICAgICAgLy8gb3BlbiB1cmxcbiAgICAgICAgYnJvd3Nlci51cmwoJ2h0dHBzOi8vZ29vZ2xlLmNvbScpXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgd2luZG93XG4gICAgICAgIGJyb3dzZXIubmV3V2luZG93KCdodHRwOi8vd2ViZHJpdmVyLmlvJylcblxuICAgICAgICAvLyBzd2l0Y2ggYmFjayB2aWEgdXJsIG1hdGNoXG4gICAgICAgIGJyb3dzZXIuc3dpdGNoV2luZG93KCdnb29nbGUuY29tJylcblxuICAgICAgICAvLyBzd2l0Y2ggYmFjayB2aWEgdGl0bGUgbWF0Y2hcbiAgICAgICAgYnJvd3Nlci5zd2l0Y2hXaW5kb3coJ05leHQtZ2VuIFdlYkRyaXZlciB0ZXN0IGZyYW1ld29yaycpXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSAgdXJsT3JUaXRsZVRvTWF0Y2ggIFN0cmluZyBvciByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIHRoZSB0aXRsZSBvciB1cmwgb2YgdGhlIHBhZ2VcbiAqXG4gKiBAdXNlcyBwcm90b2NvbC9nZXRXaW5kb3dIYW5kbGVzLCBwcm90b2NvbC9zd2l0Y2hUb1dpbmRvdywgcHJvdG9jb2wvZ2V0Q3VycmVudFVybCwgcHJvdG9jb2wvZ2V0VGl0bGVcbiAqIEBhbGlhcyBicm93c2VyLnN3aXRjaFRhYlxuICogQHR5cGUgd2luZG93XG4gKlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHN3aXRjaFdpbmRvdyAodXJsT3JUaXRsZVRvTWF0Y2gpIHtcbiAgICAvKiFcbiAgICAgKiBwYXJhbWV0ZXIgY2hlY2tcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIHVybE9yVGl0bGVUb01hdGNoICE9PSAnc3RyaW5nJyAmJiAhKHVybE9yVGl0bGVUb01hdGNoIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHBhcmFtZXRlciBmb3Igc3dpdGNoV2luZG93LCByZXF1aXJlZCBpcyBcInN0cmluZ1wiIG9yIGFuIFJlZ0V4cCcpXG4gICAgfVxuXG4gICAgY29uc3QgdGFicyA9IGF3YWl0IHRoaXMuZ2V0V2luZG93SGFuZGxlcygpXG5cbiAgICBmb3IgKGNvbnN0IHRhYiBvZiB0YWJzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3dpdGNoVG9XaW5kb3codGFiKVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjaGVjayBpZiB1cmwgbWF0Y2hlc1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5nZXRDdXJyZW50VXJsKClcbiAgICAgICAgaWYgKHVybC5tYXRjaCh1cmxPclRpdGxlVG9NYXRjaCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjaGVjayB0aXRsZVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgdGl0bGUgPSBhd2FpdCB0aGlzLmdldFRpdGxlKClcbiAgICAgICAgaWYgKHRpdGxlLm1hdGNoKHVybE9yVGl0bGVUb01hdGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhYlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyB3aW5kb3cgZm91bmQgd2l0aCB0aXRsZSBvciB1cmwgbWF0Y2hpbmcgXCIke3VybE9yVGl0bGVUb01hdGNofVwiYClcbn1cbiJdfQ==