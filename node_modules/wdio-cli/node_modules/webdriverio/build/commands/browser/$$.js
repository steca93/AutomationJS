"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $$;

require("source-map-support/register");

var _webdriver = require("webdriver");

var _config = require("@wdio/config");

var _utils = require("../../utils");

var _middlewares = require("../../middlewares");

var _constants = require("../../constants");

/**
 * The `$$` command is a short way to call the [`findElements`](/docs/api/webdriver.html#findelements) command in order
 * to fetch multiple elements on the page. It returns an array with element results that will have an
 * extended prototype to call action commands without passing in a selector. However if you still pass
 * in a selector it will look for that element first and call the action on that element.
 *
 * Using the wdio testrunner this command is a global variable else it will be located on the browser object instead.
 *
 * You can chain `$` or `$$` together in order to walk down the DOM tree. For more information on how
 * to select specific elements, see [`Selectors`](/docs/selectors.html).
 *
 * <example>
    :index.html
    <ul id="menu">
        <li><a href="/">Home</a></li>
        <li><a href="/">Developer Guide</a></li>
        <li><a href="/">API</a></li>
        <li><a href="/">Contribute</a></li>
    </ul>
    :$.js
    it('should get text a menu link', () => {
        const text = $('#menu');
        console.log(text.$$('li')[2].$('a').getText()); // outputs: "API"
    });
 * </example>
 *
 * @alias $$
 * @param {String} selector  selector to fetch multiple elements
 * @type utility
 *
 */
async function $$(selector) {
  const res = await _utils.findElements.call(this, selector);
  const prototype = Object.assign((0, _webdriver.getPrototype)(this.isW3C), (0, _utils.getPrototype)('element'), {
    scope: 'element'
  });
  const elements = res.map((res, i) => {
    const element = (0, _webdriver.webdriverMonad)(this.options, client => {
      const elementId = (0, _utils.getElementFromResponse)(res);

      if (elementId) {
        /**
         * set elementId for easy access
         */
        client.elementId = elementId;
        /**
         * set element id with proper key so element can be passed into execute commands
         */

        if (this.isW3C) {
          client[_constants.ELEMENT_KEY] = elementId;
        } else {
          client.ELEMENT = elementId;
        }
      } else {
        client.error = res;
      }

      client.selector = selector;
      client.parent = this;
      client.index = i;
      client.emit = this.emit.bind(this);
      return client;
    }, prototype);
    return element(this.sessionId, (0, _middlewares.elementErrorHandler)(_config.wrapCommand));
  });
  return elements;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyLyQkLmpzIl0sIm5hbWVzIjpbIiQkIiwic2VsZWN0b3IiLCJyZXMiLCJmaW5kRWxlbWVudHMiLCJjYWxsIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNXM0MiLCJzY29wZSIsImVsZW1lbnRzIiwibWFwIiwiaSIsImVsZW1lbnQiLCJvcHRpb25zIiwiY2xpZW50IiwiZWxlbWVudElkIiwiRUxFTUVOVF9LRVkiLCJFTEVNRU5UIiwiZXJyb3IiLCJwYXJlbnQiLCJpbmRleCIsImVtaXQiLCJzZXNzaW9uSWQiLCJ3cmFwQ29tbWFuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBK0JBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQXBDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDZSxlQUFlQSxFQUFmLENBQW1CQyxRQUFuQixFQUE2QjtBQUN4QyxRQUFNQyxHQUFHLEdBQUcsTUFBTUMsb0JBQWFDLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0JILFFBQXhCLENBQWxCO0FBQ0EsUUFBTUksU0FBUyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyw2QkFBc0IsS0FBS0MsS0FBM0IsQ0FBZCxFQUFpRCx5QkFBaUIsU0FBakIsQ0FBakQsRUFBOEU7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBOUUsQ0FBbEI7QUFFQSxRQUFNQyxRQUFRLEdBQUdSLEdBQUcsQ0FBQ1MsR0FBSixDQUFRLENBQUNULEdBQUQsRUFBTVUsQ0FBTixLQUFZO0FBQ2pDLFVBQU1DLE9BQU8sR0FBRywrQkFBZSxLQUFLQyxPQUFwQixFQUE4QkMsTUFBRCxJQUFZO0FBQ3JELFlBQU1DLFNBQVMsR0FBRyxtQ0FBdUJkLEdBQXZCLENBQWxCOztBQUVBLFVBQUljLFNBQUosRUFBZTtBQUNYOzs7QUFHQUQsUUFBQUEsTUFBTSxDQUFDQyxTQUFQLEdBQW1CQSxTQUFuQjtBQUVBOzs7O0FBR0EsWUFBSSxLQUFLUixLQUFULEVBQWdCO0FBQ1pPLFVBQUFBLE1BQU0sQ0FBQ0Usc0JBQUQsQ0FBTixHQUFzQkQsU0FBdEI7QUFDSCxTQUZELE1BRU87QUFDSEQsVUFBQUEsTUFBTSxDQUFDRyxPQUFQLEdBQWlCRixTQUFqQjtBQUNIO0FBQ0osT0FkRCxNQWNPO0FBQ0hELFFBQUFBLE1BQU0sQ0FBQ0ksS0FBUCxHQUFlakIsR0FBZjtBQUNIOztBQUVEYSxNQUFBQSxNQUFNLENBQUNkLFFBQVAsR0FBa0JBLFFBQWxCO0FBQ0FjLE1BQUFBLE1BQU0sQ0FBQ0ssTUFBUCxHQUFnQixJQUFoQjtBQUNBTCxNQUFBQSxNQUFNLENBQUNNLEtBQVAsR0FBZVQsQ0FBZjtBQUNBRyxNQUFBQSxNQUFNLENBQUNPLElBQVAsR0FBZ0IsS0FBS0EsSUFBckIsTUFBZ0IsSUFBaEI7QUFDQSxhQUFPUCxNQUFQO0FBQ0gsS0ExQmUsRUEwQmJWLFNBMUJhLENBQWhCO0FBNEJBLFdBQU9RLE9BQU8sQ0FBQyxLQUFLVSxTQUFOLEVBQWlCLHNDQUFvQkMsbUJBQXBCLENBQWpCLENBQWQ7QUFDSCxHQTlCZ0IsQ0FBakI7QUFnQ0EsU0FBT2QsUUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYCQkYCBjb21tYW5kIGlzIGEgc2hvcnQgd2F5IHRvIGNhbGwgdGhlIFtgZmluZEVsZW1lbnRzYF0oL2RvY3MvYXBpL3dlYmRyaXZlci5odG1sI2ZpbmRlbGVtZW50cykgY29tbWFuZCBpbiBvcmRlclxuICogdG8gZmV0Y2ggbXVsdGlwbGUgZWxlbWVudHMgb24gdGhlIHBhZ2UuIEl0IHJldHVybnMgYW4gYXJyYXkgd2l0aCBlbGVtZW50IHJlc3VsdHMgdGhhdCB3aWxsIGhhdmUgYW5cbiAqIGV4dGVuZGVkIHByb3RvdHlwZSB0byBjYWxsIGFjdGlvbiBjb21tYW5kcyB3aXRob3V0IHBhc3NpbmcgaW4gYSBzZWxlY3Rvci4gSG93ZXZlciBpZiB5b3Ugc3RpbGwgcGFzc1xuICogaW4gYSBzZWxlY3RvciBpdCB3aWxsIGxvb2sgZm9yIHRoYXQgZWxlbWVudCBmaXJzdCBhbmQgY2FsbCB0aGUgYWN0aW9uIG9uIHRoYXQgZWxlbWVudC5cbiAqXG4gKiBVc2luZyB0aGUgd2RpbyB0ZXN0cnVubmVyIHRoaXMgY29tbWFuZCBpcyBhIGdsb2JhbCB2YXJpYWJsZSBlbHNlIGl0IHdpbGwgYmUgbG9jYXRlZCBvbiB0aGUgYnJvd3NlciBvYmplY3QgaW5zdGVhZC5cbiAqXG4gKiBZb3UgY2FuIGNoYWluIGAkYCBvciBgJCRgIHRvZ2V0aGVyIGluIG9yZGVyIHRvIHdhbGsgZG93biB0aGUgRE9NIHRyZWUuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvd1xuICogdG8gc2VsZWN0IHNwZWNpZmljIGVsZW1lbnRzLCBzZWUgW2BTZWxlY3RvcnNgXSgvZG9jcy9zZWxlY3RvcnMuaHRtbCkuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8dWwgaWQ9XCJtZW51XCI+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkhvbWU8L2E+PC9saT5cbiAgICAgICAgPGxpPjxhIGhyZWY9XCIvXCI+RGV2ZWxvcGVyIEd1aWRlPC9hPjwvbGk+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkFQSTwvYT48L2xpPlxuICAgICAgICA8bGk+PGEgaHJlZj1cIi9cIj5Db250cmlidXRlPC9hPjwvbGk+XG4gICAgPC91bD5cbiAgICA6JC5qc1xuICAgIGl0KCdzaG91bGQgZ2V0IHRleHQgYSBtZW51IGxpbmsnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRleHQgPSAkKCcjbWVudScpO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXh0LiQkKCdsaScpWzJdLiQoJ2EnKS5nZXRUZXh0KCkpOyAvLyBvdXRwdXRzOiBcIkFQSVwiXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzICQkXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgIHNlbGVjdG9yIHRvIGZldGNoIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5pbXBvcnQgeyB3ZWJkcml2ZXJNb25hZCwgZ2V0UHJvdG90eXBlIGFzIGdldFdlYmRyaXZlclByb3RvdHlwZSB9IGZyb20gJ3dlYmRyaXZlcidcbmltcG9ydCB7IHdyYXBDb21tYW5kIH0gZnJvbSAnQHdkaW8vY29uZmlnJ1xuXG5pbXBvcnQgeyBmaW5kRWxlbWVudHMsIGdldFByb3RvdHlwZSBhcyBnZXRXRElPUHJvdG90eXBlLCBnZXRFbGVtZW50RnJvbVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyBlbGVtZW50RXJyb3JIYW5kbGVyIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZXMnXG5pbXBvcnQgeyBFTEVNRU5UX0tFWSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gJCQgKHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmluZEVsZW1lbnRzLmNhbGwodGhpcywgc2VsZWN0b3IpXG4gICAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihnZXRXZWJkcml2ZXJQcm90b3R5cGUodGhpcy5pc1czQyksIGdldFdESU9Qcm90b3R5cGUoJ2VsZW1lbnQnKSwgeyBzY29wZTogJ2VsZW1lbnQnIH0pXG5cbiAgICBjb25zdCBlbGVtZW50cyA9IHJlcy5tYXAoKHJlcywgaSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gd2ViZHJpdmVyTW9uYWQodGhpcy5vcHRpb25zLCAoY2xpZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50SWQgPSBnZXRFbGVtZW50RnJvbVJlc3BvbnNlKHJlcylcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnRJZCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIHNldCBlbGVtZW50SWQgZm9yIGVhc3kgYWNjZXNzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY2xpZW50LmVsZW1lbnRJZCA9IGVsZW1lbnRJZFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogc2V0IGVsZW1lbnQgaWQgd2l0aCBwcm9wZXIga2V5IHNvIGVsZW1lbnQgY2FuIGJlIHBhc3NlZCBpbnRvIGV4ZWN1dGUgY29tbWFuZHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1czQykge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRbRUxFTUVOVF9LRVldID0gZWxlbWVudElkXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LkVMRU1FTlQgPSBlbGVtZW50SWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudC5lcnJvciA9IHJlc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGllbnQuc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgICAgICAgICAgY2xpZW50LnBhcmVudCA9IHRoaXNcbiAgICAgICAgICAgIGNsaWVudC5pbmRleCA9IGlcbiAgICAgICAgICAgIGNsaWVudC5lbWl0ID0gOjp0aGlzLmVtaXRcbiAgICAgICAgICAgIHJldHVybiBjbGllbnRcbiAgICAgICAgfSwgcHJvdG90eXBlKVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50KHRoaXMuc2Vzc2lvbklkLCBlbGVtZW50RXJyb3JIYW5kbGVyKHdyYXBDb21tYW5kKSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzXG59XG4iXX0=