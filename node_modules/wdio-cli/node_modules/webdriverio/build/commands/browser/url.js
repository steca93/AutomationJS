"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = url;

require("source-map-support/register");

var _url = _interopRequireDefault(require("url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Protocol binding to load or get the URL of the browser. If a baseUrl is
 * specified in the config, it will be prepended to the url parameter using
 * node's url.resolve() method.
 *
 * <example>
    :url.js
    // navigate to a new URL
    browser.url('http://webdriver.io');
    // receive url
    console.log(browser.getUrl()); // outputs: "http://webdriver.io"

    :baseUrlResolutions.js
    // With a base URL of http://example.com/site, the following url parameters resolve as such:
    // When providing a scheme:
    // http://webdriver.io
    browser.url('http://webdriver.io');
    // When not starting with a slash, the URL resolves relative to the baseUrl
    // http://example.com/site/relative
    browser.url('relative');
    // When starting with a slash, the URL resolves relative to the root path of the baseUrl
    // http://example.com/rootRelative
    browser.url('/rootRelative');
 * </example>
 *
 * @param {String=} url  the URL to navigate to
 * @return {String}     the current URL
 *
 * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get
 * @see  https://nodejs.org/api/url.html#url_url_resolve_from_to
 * @type protocol
 *
 */
function url(path) {
  if (typeof path !== 'string') {
    throw new Error(`Parameter for 'url' command needs to be type of string`);
  }

  if (typeof this.options.baseUrl === 'string') {
    path = _url.default.resolve(this.options.baseUrl, path);
  }

  return this.navigateTo(path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3VybC5qcyJdLCJuYW1lcyI6WyJ1cmwiLCJwYXRoIiwiRXJyb3IiLCJvcHRpb25zIiwiYmFzZVVybCIsIm5vZGVVcmwiLCJyZXNvbHZlIiwibmF2aWdhdGVUbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBbUNBOzs7O0FBbkNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNlLFNBQVNBLEdBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUMvQixNQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUIsVUFBTSxJQUFJQyxLQUFKLENBQVcsd0RBQVgsQ0FBTjtBQUNIOztBQUVELE1BQUksT0FBTyxLQUFLQyxPQUFMLENBQWFDLE9BQXBCLEtBQWdDLFFBQXBDLEVBQThDO0FBQzFDSCxJQUFBQSxJQUFJLEdBQUdJLGFBQVFDLE9BQVIsQ0FBZ0IsS0FBS0gsT0FBTCxDQUFhQyxPQUE3QixFQUFzQ0gsSUFBdEMsQ0FBUDtBQUNIOztBQUVELFNBQU8sS0FBS00sVUFBTCxDQUFnQk4sSUFBaEIsQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogUHJvdG9jb2wgYmluZGluZyB0byBsb2FkIG9yIGdldCB0aGUgVVJMIG9mIHRoZSBicm93c2VyLiBJZiBhIGJhc2VVcmwgaXNcbiAqIHNwZWNpZmllZCBpbiB0aGUgY29uZmlnLCBpdCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUgdXJsIHBhcmFtZXRlciB1c2luZ1xuICogbm9kZSdzIHVybC5yZXNvbHZlKCkgbWV0aG9kLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDp1cmwuanNcbiAgICAvLyBuYXZpZ2F0ZSB0byBhIG5ldyBVUkxcbiAgICBicm93c2VyLnVybCgnaHR0cDovL3dlYmRyaXZlci5pbycpO1xuICAgIC8vIHJlY2VpdmUgdXJsXG4gICAgY29uc29sZS5sb2coYnJvd3Nlci5nZXRVcmwoKSk7IC8vIG91dHB1dHM6IFwiaHR0cDovL3dlYmRyaXZlci5pb1wiXG5cbiAgICA6YmFzZVVybFJlc29sdXRpb25zLmpzXG4gICAgLy8gV2l0aCBhIGJhc2UgVVJMIG9mIGh0dHA6Ly9leGFtcGxlLmNvbS9zaXRlLCB0aGUgZm9sbG93aW5nIHVybCBwYXJhbWV0ZXJzIHJlc29sdmUgYXMgc3VjaDpcbiAgICAvLyBXaGVuIHByb3ZpZGluZyBhIHNjaGVtZTpcbiAgICAvLyBodHRwOi8vd2ViZHJpdmVyLmlvXG4gICAgYnJvd3Nlci51cmwoJ2h0dHA6Ly93ZWJkcml2ZXIuaW8nKTtcbiAgICAvLyBXaGVuIG5vdCBzdGFydGluZyB3aXRoIGEgc2xhc2gsIHRoZSBVUkwgcmVzb2x2ZXMgcmVsYXRpdmUgdG8gdGhlIGJhc2VVcmxcbiAgICAvLyBodHRwOi8vZXhhbXBsZS5jb20vc2l0ZS9yZWxhdGl2ZVxuICAgIGJyb3dzZXIudXJsKCdyZWxhdGl2ZScpO1xuICAgIC8vIFdoZW4gc3RhcnRpbmcgd2l0aCBhIHNsYXNoLCB0aGUgVVJMIHJlc29sdmVzIHJlbGF0aXZlIHRvIHRoZSByb290IHBhdGggb2YgdGhlIGJhc2VVcmxcbiAgICAvLyBodHRwOi8vZXhhbXBsZS5jb20vcm9vdFJlbGF0aXZlXG4gICAgYnJvd3Nlci51cmwoJy9yb290UmVsYXRpdmUnKTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZz19IHVybCAgdGhlIFVSTCB0byBuYXZpZ2F0ZSB0b1xuICogQHJldHVybiB7U3RyaW5nfSAgICAgdGhlIGN1cnJlbnQgVVJMXG4gKlxuICogQHNlZSAgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci93ZWJkcml2ZXItc3BlYy5odG1sI2Rmbi1nZXRcbiAqIEBzZWUgIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdXJsLmh0bWwjdXJsX3VybF9yZXNvbHZlX2Zyb21fdG9cbiAqIEB0eXBlIHByb3RvY29sXG4gKlxuICovXG5cbmltcG9ydCBub2RlVXJsIGZyb20gJ3VybCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXJsIChwYXRoKSB7XG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhcmFtZXRlciBmb3IgJ3VybCcgY29tbWFuZCBuZWVkcyB0byBiZSB0eXBlIG9mIHN0cmluZ2ApXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFzZVVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCA9IG5vZGVVcmwucmVzb2x2ZSh0aGlzLm9wdGlvbnMuYmFzZVVybCwgcGF0aClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5uYXZpZ2F0ZVRvKHBhdGgpXG59XG4iXX0=