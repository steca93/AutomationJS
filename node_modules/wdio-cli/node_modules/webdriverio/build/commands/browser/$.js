"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $;

require("source-map-support/register");

var _webdriver = require("webdriver");

var _config = require("@wdio/config");

var _utils = require("../../utils");

var _middlewares = require("../../middlewares");

var _constants = require("../../constants");

/**
 * The `$` command is a short way to call the [`findElement`](/docs/api/webdriver.html#findelement) command in order
 * to fetch a single element on the page. It returns an object that with an extended prototype to call
 * action commands without passing in a selector. However if you still pass in a selector it will look
 * for that element first and call the action on that element.
 *
 * Using the wdio testrunner this command is a global variable else it will be located on the browser object instead.
 *
 * You can chain `$` or `$$` together in order to walk down the DOM tree. For more information on how
 * to select specific elements, see [`Selectors`](/docs/selectors.html).
 *
 * <example>
    :index.html
    <ul id="menu">
        <li><a href="/">Home</a></li>
        <li><a href="/">Developer Guide</a></li>
        <li><a href="/">API</a></li>
        <li><a href="/">Contribute</a></li>
    </ul>
    :$.js
    it('should get text a menu link', () => {
        const text = $('#menu');
        console.log(text.$$('li')[2].$('a').getText()); // outputs: "API"
    });
 * </example>
 *
 * @alias $
 * @param {String} selector  selector to fetch a certain element
 * @type utility
 *
 */
async function $(selector) {
  const res = await _utils.findElement.call(this, selector);
  const prototype = Object.assign((0, _webdriver.getPrototype)(this.isW3C), (0, _utils.getPrototype)('element'), {
    scope: 'element'
  });
  const element = (0, _webdriver.webdriverMonad)(this.options, client => {
    const elementId = (0, _utils.getElementFromResponse)(res);

    if (elementId) {
      /**
       * set elementId for easy access
       */
      client.elementId = elementId;
      /**
       * set element id with proper key so element can be passed into execute commands
       */

      if (this.isW3C) {
        client[_constants.ELEMENT_KEY] = elementId;
      } else {
        client.ELEMENT = elementId;
      }
    } else {
      client.error = res;
    }

    client.selector = selector;
    client.parent = this;
    client.emit = this.emit.bind(this);
    return client;
  }, prototype);
  return element(this.sessionId, (0, _middlewares.elementErrorHandler)(_config.wrapCommand));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyLyQuanMiXSwibmFtZXMiOlsiJCIsInNlbGVjdG9yIiwicmVzIiwiZmluZEVsZW1lbnQiLCJjYWxsIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNXM0MiLCJzY29wZSIsImVsZW1lbnQiLCJvcHRpb25zIiwiY2xpZW50IiwiZWxlbWVudElkIiwiRUxFTUVOVF9LRVkiLCJFTEVNRU5UIiwiZXJyb3IiLCJwYXJlbnQiLCJlbWl0Iiwic2Vzc2lvbklkIiwid3JhcENvbW1hbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQStCQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFwQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQ2UsZUFBZUEsQ0FBZixDQUFrQkMsUUFBbEIsRUFBNEI7QUFDdkMsUUFBTUMsR0FBRyxHQUFHLE1BQU1DLG1CQUFZQyxJQUFaLENBQWlCLElBQWpCLEVBQXVCSCxRQUF2QixDQUFsQjtBQUNBLFFBQU1JLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsNkJBQXNCLEtBQUtDLEtBQTNCLENBQWQsRUFBaUQseUJBQWlCLFNBQWpCLENBQWpELEVBQThFO0FBQUVDLElBQUFBLEtBQUssRUFBRTtBQUFULEdBQTlFLENBQWxCO0FBRUEsUUFBTUMsT0FBTyxHQUFHLCtCQUFlLEtBQUtDLE9BQXBCLEVBQThCQyxNQUFELElBQVk7QUFDckQsVUFBTUMsU0FBUyxHQUFHLG1DQUF1QlgsR0FBdkIsQ0FBbEI7O0FBRUEsUUFBSVcsU0FBSixFQUFlO0FBQ1g7OztBQUdBRCxNQUFBQSxNQUFNLENBQUNDLFNBQVAsR0FBbUJBLFNBQW5CO0FBRUE7Ozs7QUFHQSxVQUFJLEtBQUtMLEtBQVQsRUFBZ0I7QUFDWkksUUFBQUEsTUFBTSxDQUFDRSxzQkFBRCxDQUFOLEdBQXNCRCxTQUF0QjtBQUNILE9BRkQsTUFFTztBQUNIRCxRQUFBQSxNQUFNLENBQUNHLE9BQVAsR0FBaUJGLFNBQWpCO0FBQ0g7QUFDSixLQWRELE1BY087QUFDSEQsTUFBQUEsTUFBTSxDQUFDSSxLQUFQLEdBQWVkLEdBQWY7QUFDSDs7QUFFRFUsSUFBQUEsTUFBTSxDQUFDWCxRQUFQLEdBQWtCQSxRQUFsQjtBQUNBVyxJQUFBQSxNQUFNLENBQUNLLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUwsSUFBQUEsTUFBTSxDQUFDTSxJQUFQLEdBQWdCLEtBQUtBLElBQXJCLE1BQWdCLElBQWhCO0FBQ0EsV0FBT04sTUFBUDtBQUNILEdBekJlLEVBeUJiUCxTQXpCYSxDQUFoQjtBQTJCQSxTQUFPSyxPQUFPLENBQUMsS0FBS1MsU0FBTixFQUFpQixzQ0FBb0JDLG1CQUFwQixDQUFqQixDQUFkO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBgJGAgY29tbWFuZCBpcyBhIHNob3J0IHdheSB0byBjYWxsIHRoZSBbYGZpbmRFbGVtZW50YF0oL2RvY3MvYXBpL3dlYmRyaXZlci5odG1sI2ZpbmRlbGVtZW50KSBjb21tYW5kIGluIG9yZGVyXG4gKiB0byBmZXRjaCBhIHNpbmdsZSBlbGVtZW50IG9uIHRoZSBwYWdlLiBJdCByZXR1cm5zIGFuIG9iamVjdCB0aGF0IHdpdGggYW4gZXh0ZW5kZWQgcHJvdG90eXBlIHRvIGNhbGxcbiAqIGFjdGlvbiBjb21tYW5kcyB3aXRob3V0IHBhc3NpbmcgaW4gYSBzZWxlY3Rvci4gSG93ZXZlciBpZiB5b3Ugc3RpbGwgcGFzcyBpbiBhIHNlbGVjdG9yIGl0IHdpbGwgbG9va1xuICogZm9yIHRoYXQgZWxlbWVudCBmaXJzdCBhbmQgY2FsbCB0aGUgYWN0aW9uIG9uIHRoYXQgZWxlbWVudC5cbiAqXG4gKiBVc2luZyB0aGUgd2RpbyB0ZXN0cnVubmVyIHRoaXMgY29tbWFuZCBpcyBhIGdsb2JhbCB2YXJpYWJsZSBlbHNlIGl0IHdpbGwgYmUgbG9jYXRlZCBvbiB0aGUgYnJvd3NlciBvYmplY3QgaW5zdGVhZC5cbiAqXG4gKiBZb3UgY2FuIGNoYWluIGAkYCBvciBgJCRgIHRvZ2V0aGVyIGluIG9yZGVyIHRvIHdhbGsgZG93biB0aGUgRE9NIHRyZWUuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvd1xuICogdG8gc2VsZWN0IHNwZWNpZmljIGVsZW1lbnRzLCBzZWUgW2BTZWxlY3RvcnNgXSgvZG9jcy9zZWxlY3RvcnMuaHRtbCkuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8dWwgaWQ9XCJtZW51XCI+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkhvbWU8L2E+PC9saT5cbiAgICAgICAgPGxpPjxhIGhyZWY9XCIvXCI+RGV2ZWxvcGVyIEd1aWRlPC9hPjwvbGk+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkFQSTwvYT48L2xpPlxuICAgICAgICA8bGk+PGEgaHJlZj1cIi9cIj5Db250cmlidXRlPC9hPjwvbGk+XG4gICAgPC91bD5cbiAgICA6JC5qc1xuICAgIGl0KCdzaG91bGQgZ2V0IHRleHQgYSBtZW51IGxpbmsnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRleHQgPSAkKCcjbWVudScpO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXh0LiQkKCdsaScpWzJdLiQoJ2EnKS5nZXRUZXh0KCkpOyAvLyBvdXRwdXRzOiBcIkFQSVwiXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzICRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAgc2VsZWN0b3IgdG8gZmV0Y2ggYSBjZXJ0YWluIGVsZW1lbnRcbiAqIEB0eXBlIHV0aWxpdHlcbiAqXG4gKi9cbmltcG9ydCB7IHdlYmRyaXZlck1vbmFkLCBnZXRQcm90b3R5cGUgYXMgZ2V0V2ViZHJpdmVyUHJvdG90eXBlIH0gZnJvbSAnd2ViZHJpdmVyJ1xuaW1wb3J0IHsgd3JhcENvbW1hbmQgfSBmcm9tICdAd2Rpby9jb25maWcnXG5cbmltcG9ydCB7IGZpbmRFbGVtZW50LCBnZXRQcm90b3R5cGUgYXMgZ2V0V0RJT1Byb3RvdHlwZSwgZ2V0RWxlbWVudEZyb21SZXNwb25zZSB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuaW1wb3J0IHsgZWxlbWVudEVycm9ySGFuZGxlciB9IGZyb20gJy4uLy4uL21pZGRsZXdhcmVzJ1xuaW1wb3J0IHsgRUxFTUVOVF9LRVkgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICQgKHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmluZEVsZW1lbnQuY2FsbCh0aGlzLCBzZWxlY3RvcilcbiAgICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKGdldFdlYmRyaXZlclByb3RvdHlwZSh0aGlzLmlzVzNDKSwgZ2V0V0RJT1Byb3RvdHlwZSgnZWxlbWVudCcpLCB7IHNjb3BlOiAnZWxlbWVudCcgfSlcblxuICAgIGNvbnN0IGVsZW1lbnQgPSB3ZWJkcml2ZXJNb25hZCh0aGlzLm9wdGlvbnMsIChjbGllbnQpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudElkID0gZ2V0RWxlbWVudEZyb21SZXNwb25zZShyZXMpXG5cbiAgICAgICAgaWYgKGVsZW1lbnRJZCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBzZXQgZWxlbWVudElkIGZvciBlYXN5IGFjY2Vzc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGllbnQuZWxlbWVudElkID0gZWxlbWVudElkXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogc2V0IGVsZW1lbnQgaWQgd2l0aCBwcm9wZXIga2V5IHNvIGVsZW1lbnQgY2FuIGJlIHBhc3NlZCBpbnRvIGV4ZWN1dGUgY29tbWFuZHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNXM0MpIHtcbiAgICAgICAgICAgICAgICBjbGllbnRbRUxFTUVOVF9LRVldID0gZWxlbWVudElkXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudC5FTEVNRU5UID0gZWxlbWVudElkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGllbnQuZXJyb3IgPSByZXNcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaWVudC5zZWxlY3RvciA9IHNlbGVjdG9yXG4gICAgICAgIGNsaWVudC5wYXJlbnQgPSB0aGlzXG4gICAgICAgIGNsaWVudC5lbWl0ID0gOjp0aGlzLmVtaXRcbiAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgIH0sIHByb3RvdHlwZSlcblxuICAgIHJldHVybiBlbGVtZW50KHRoaXMuc2Vzc2lvbklkLCBlbGVtZW50RXJyb3JIYW5kbGVyKHdyYXBDb21tYW5kKSlcbn1cbiJdfQ==