"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteCookies;

require("source-map-support/register");

/**
 *
 * Delete cookies visible to the current page. By providing a cookie name it just removes the single cookie.
 *
 * <example>
    :deleteCookie.js
    it('should delete cookies', () => {
        browser.setCookie({name: 'test', value: '123'})
        browser.setCookie({name: 'test2', value: '456'})
        browser.setCookie({name: 'test3', value: '789'})
        let cookies = browser.getCookies()
        console.log(cookies)
        // outputs:
        // [
        //     { name: 'test', value: '123' },
        //     { name: 'test2', value: '456' }
        //     { name: 'test3', value: '789' }
        // ]

        browser.deleteCookie(['test3'])
        cookies = browser.getCookies()
        console.log(cookies)
        // outputs:
        // [
        //     { name: 'test', value: '123' },
        //     { name: 'test2', value: '456' }
        // ]
        
        browser.deleteCookies()
        cookies = browser.getCookies()
        console.log(cookies) // outputs: []
    })
 * </example>
 *
 * @alias browser.deleteCookie
 * @param {String[]=} name  names of cookies to be deleted
 * @uses webdriver/deleteAllCookies,webdriver/deleteCookie
 * @type cookie
 *
 */
function deleteCookies(names) {
  const namesList = typeof names !== 'undefined' && !Array.isArray(names) ? [names] : names;

  if (typeof namesList === 'undefined') {
    return this.deleteAllCookies();
  }

  if (namesList.every(obj => typeof obj !== 'string')) {
    return Promise.reject(new Error('Invalid input (see http://webdriver.io/docs/api/browser/deleteCookies.html for documentation.'));
  }

  return Promise.all(namesList.map(name => this.deleteCookie(name)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL2RlbGV0ZUNvb2tpZXMuanMiXSwibmFtZXMiOlsiZGVsZXRlQ29va2llcyIsIm5hbWVzIiwibmFtZXNMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVsZXRlQWxsQ29va2llcyIsImV2ZXJ5Iiwib2JqIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiYWxsIiwibWFwIiwibmFtZSIsImRlbGV0ZUNvb2tpZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q2UsU0FBU0EsYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEI7QUFDekMsUUFBTUMsU0FBUyxHQUFHLE9BQU9ELEtBQVAsS0FBaUIsV0FBakIsSUFBZ0MsQ0FBQ0UsS0FBSyxDQUFDQyxPQUFOLENBQWNILEtBQWQsQ0FBakMsR0FBd0QsQ0FBQ0EsS0FBRCxDQUF4RCxHQUFrRUEsS0FBcEY7O0FBRUEsTUFBSSxPQUFPQyxTQUFQLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ2xDLFdBQU8sS0FBS0csZ0JBQUwsRUFBUDtBQUNIOztBQUVELE1BQUlILFNBQVMsQ0FBQ0ksS0FBVixDQUFnQkMsR0FBRyxJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUF0QyxDQUFKLEVBQXFEO0FBQ2pELFdBQU9DLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSwrRkFBVixDQUFmLENBQVA7QUFDSDs7QUFFRCxTQUFPRixPQUFPLENBQUNHLEdBQVIsQ0FBWVQsU0FBUyxDQUFDVSxHQUFWLENBQWNDLElBQUksSUFBSSxLQUFLQyxZQUFMLENBQWtCRCxJQUFsQixDQUF0QixDQUFaLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIERlbGV0ZSBjb29raWVzIHZpc2libGUgdG8gdGhlIGN1cnJlbnQgcGFnZS4gQnkgcHJvdmlkaW5nIGEgY29va2llIG5hbWUgaXQganVzdCByZW1vdmVzIHRoZSBzaW5nbGUgY29va2llLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpkZWxldGVDb29raWUuanNcbiAgICBpdCgnc2hvdWxkIGRlbGV0ZSBjb29raWVzJywgKCkgPT4ge1xuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMyd9KVxuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QyJywgdmFsdWU6ICc0NTYnfSlcbiAgICAgICAgYnJvd3Nlci5zZXRDb29raWUoe25hbWU6ICd0ZXN0MycsIHZhbHVlOiAnNzg5J30pXG4gICAgICAgIGxldCBjb29raWVzID0gYnJvd3Nlci5nZXRDb29raWVzKClcbiAgICAgICAgY29uc29sZS5sb2coY29va2llcylcbiAgICAgICAgLy8gb3V0cHV0czpcbiAgICAgICAgLy8gW1xuICAgICAgICAvLyAgICAgeyBuYW1lOiAndGVzdCcsIHZhbHVlOiAnMTIzJyB9LFxuICAgICAgICAvLyAgICAgeyBuYW1lOiAndGVzdDInLCB2YWx1ZTogJzQ1NicgfVxuICAgICAgICAvLyAgICAgeyBuYW1lOiAndGVzdDMnLCB2YWx1ZTogJzc4OScgfVxuICAgICAgICAvLyBdXG5cbiAgICAgICAgYnJvd3Nlci5kZWxldGVDb29raWUoWyd0ZXN0MyddKVxuICAgICAgICBjb29raWVzID0gYnJvd3Nlci5nZXRDb29raWVzKClcbiAgICAgICAgY29uc29sZS5sb2coY29va2llcylcbiAgICAgICAgLy8gb3V0cHV0czpcbiAgICAgICAgLy8gW1xuICAgICAgICAvLyAgICAgeyBuYW1lOiAndGVzdCcsIHZhbHVlOiAnMTIzJyB9LFxuICAgICAgICAvLyAgICAgeyBuYW1lOiAndGVzdDInLCB2YWx1ZTogJzQ1NicgfVxuICAgICAgICAvLyBdXG4gICAgICAgIFxuICAgICAgICBicm93c2VyLmRlbGV0ZUNvb2tpZXMoKVxuICAgICAgICBjb29raWVzID0gYnJvd3Nlci5nZXRDb29raWVzKClcbiAgICAgICAgY29uc29sZS5sb2coY29va2llcykgLy8gb3V0cHV0czogW11cbiAgICB9KVxuICogPC9leGFtcGxlPlxuICpcbiAqIEBhbGlhcyBicm93c2VyLmRlbGV0ZUNvb2tpZVxuICogQHBhcmFtIHtTdHJpbmdbXT19IG5hbWUgIG5hbWVzIG9mIGNvb2tpZXMgdG8gYmUgZGVsZXRlZFxuICogQHVzZXMgd2ViZHJpdmVyL2RlbGV0ZUFsbENvb2tpZXMsd2ViZHJpdmVyL2RlbGV0ZUNvb2tpZVxuICogQHR5cGUgY29va2llXG4gKlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZXMobmFtZXMpIHtcbiAgICBjb25zdCBuYW1lc0xpc3QgPSB0eXBlb2YgbmFtZXMgIT09ICd1bmRlZmluZWQnICYmICFBcnJheS5pc0FycmF5KG5hbWVzKSA/IFtuYW1lc10gOiBuYW1lc1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lc0xpc3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUFsbENvb2tpZXMoKVxuICAgIH1cblxuICAgIGlmIChuYW1lc0xpc3QuZXZlcnkob2JqID0+IHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIGlucHV0IChzZWUgaHR0cDovL3dlYmRyaXZlci5pby9kb2NzL2FwaS9icm93c2VyL2RlbGV0ZUNvb2tpZXMuaHRtbCBmb3IgZG9jdW1lbnRhdGlvbi4nKSlcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobmFtZXNMaXN0Lm1hcChuYW1lID0+IHRoaXMuZGVsZXRlQ29va2llKG5hbWUpKSlcbn1cbiJdfQ==