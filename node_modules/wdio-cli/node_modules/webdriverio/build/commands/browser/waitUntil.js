"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

require("source-map-support/register");

var _Timer = _interopRequireDefault(require("../../utils/Timer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * This wait command is your universal weapon if you want to wait on something. It expects a condition
 * and waits until that condition is fulfilled with a truthy value. If you use the WDIO testrunner the
 * commands within the condition are getting executed synchronously like in your test.
 *
 * A common example is to wait until a certain element contains a certain text (see example).
 *
 * <example>
    :example.html
    <div id="someText">I am some text</div>
    <script>
      setTimeout(() => {
        $('#someText').html('I am now different');
      }, 1000);
    </script>

    :waitUntil.js
    it('should wait until text has changed', () => {
        browser.waitUntil(() => {
          return $('#someText').getText() === 'I am now different'
        }, 5000, 'expected text to be different after 5s');
    });
 * </example>
 *
 *
 * @alias browser.waitUntil
 * @param {Function} condition  condition to wait on
 * @param {Number=}  timeout    timeout in ms (default: 500)
 * @param {String=}  timeoutMsg error message to throw when waitUntil times out
 * @param {Number=}  interval   interval between condition checks (default: 500)
 * @uses utility/pause
 * @type utility
 *
 */
function _default(condition, timeout, timeoutMsg, interval) {
  if (typeof condition !== 'function') {
    throw new Error('Condition is not a function');
  }
  /*!
   * ensure that timeout and interval are set properly
   */


  if (typeof timeout !== 'number') {
    timeout = this.options.waitforTimeout;
  }

  if (typeof interval !== 'number') {
    interval = this.options.waitforInterval;
  }

  const fn = condition.bind(this);
  let timer = new _Timer.default(interval, timeout, fn, true);
  return timer.catch(e => {
    if (e.message === 'timeout' && typeof timeoutMsg === 'string') {
      throw new Error(timeoutMsg);
    }

    throw new Error(`Promise was rejected with the following reason: ${e}`);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3dhaXRVbnRpbC5qcyJdLCJuYW1lcyI6WyJjb25kaXRpb24iLCJ0aW1lb3V0IiwidGltZW91dE1zZyIsImludGVydmFsIiwiRXJyb3IiLCJvcHRpb25zIiwid2FpdGZvclRpbWVvdXQiLCJ3YWl0Zm9ySW50ZXJ2YWwiLCJmbiIsImJpbmQiLCJ0aW1lciIsIlRpbWVyIiwiY2F0Y2giLCJlIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBb0NBOzs7O0FBcENBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDZSxrQkFBVUEsU0FBVixFQUFxQkMsT0FBckIsRUFBOEJDLFVBQTlCLEVBQTBDQyxRQUExQyxFQUFvRDtBQUMvRCxNQUFJLE9BQU9ILFNBQVAsS0FBcUIsVUFBekIsRUFBcUM7QUFDakMsVUFBTSxJQUFJSSxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNIO0FBRUQ7Ozs7O0FBR0EsTUFBSSxPQUFPSCxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQzdCQSxJQUFBQSxPQUFPLEdBQUcsS0FBS0ksT0FBTCxDQUFhQyxjQUF2QjtBQUNIOztBQUVELE1BQUksT0FBT0gsUUFBUCxLQUFvQixRQUF4QixFQUFrQztBQUM5QkEsSUFBQUEsUUFBUSxHQUFHLEtBQUtFLE9BQUwsQ0FBYUUsZUFBeEI7QUFDSDs7QUFFRCxRQUFNQyxFQUFFLEdBQUdSLFNBQVMsQ0FBQ1MsSUFBVixDQUFlLElBQWYsQ0FBWDtBQUNBLE1BQUlDLEtBQUssR0FBRyxJQUFJQyxjQUFKLENBQVVSLFFBQVYsRUFBb0JGLE9BQXBCLEVBQTZCTyxFQUE3QixFQUFpQyxJQUFqQyxDQUFaO0FBRUEsU0FBT0UsS0FBSyxDQUFDRSxLQUFOLENBQWFDLENBQUQsSUFBTztBQUN0QixRQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBYyxTQUFkLElBQTJCLE9BQU9aLFVBQVAsS0FBc0IsUUFBckQsRUFBK0Q7QUFDM0QsWUFBTSxJQUFJRSxLQUFKLENBQVVGLFVBQVYsQ0FBTjtBQUNIOztBQUVELFVBQU0sSUFBSUUsS0FBSixDQUFXLG1EQUFrRFMsQ0FBRSxFQUEvRCxDQUFOO0FBQ0gsR0FOTSxDQUFQO0FBT0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBUaGlzIHdhaXQgY29tbWFuZCBpcyB5b3VyIHVuaXZlcnNhbCB3ZWFwb24gaWYgeW91IHdhbnQgdG8gd2FpdCBvbiBzb21ldGhpbmcuIEl0IGV4cGVjdHMgYSBjb25kaXRpb25cbiAqIGFuZCB3YWl0cyB1bnRpbCB0aGF0IGNvbmRpdGlvbiBpcyBmdWxmaWxsZWQgd2l0aCBhIHRydXRoeSB2YWx1ZS4gSWYgeW91IHVzZSB0aGUgV0RJTyB0ZXN0cnVubmVyIHRoZVxuICogY29tbWFuZHMgd2l0aGluIHRoZSBjb25kaXRpb24gYXJlIGdldHRpbmcgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBsaWtlIGluIHlvdXIgdGVzdC5cbiAqXG4gKiBBIGNvbW1vbiBleGFtcGxlIGlzIHRvIHdhaXQgdW50aWwgYSBjZXJ0YWluIGVsZW1lbnQgY29udGFpbnMgYSBjZXJ0YWluIHRleHQgKHNlZSBleGFtcGxlKS5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6ZXhhbXBsZS5odG1sXG4gICAgPGRpdiBpZD1cInNvbWVUZXh0XCI+SSBhbSBzb21lIHRleHQ8L2Rpdj5cbiAgICA8c2NyaXB0PlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICQoJyNzb21lVGV4dCcpLmh0bWwoJ0kgYW0gbm93IGRpZmZlcmVudCcpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgPC9zY3JpcHQ+XG5cbiAgICA6d2FpdFVudGlsLmpzXG4gICAgaXQoJ3Nob3VsZCB3YWl0IHVudGlsIHRleHQgaGFzIGNoYW5nZWQnLCAoKSA9PiB7XG4gICAgICAgIGJyb3dzZXIud2FpdFVudGlsKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gJCgnI3NvbWVUZXh0JykuZ2V0VGV4dCgpID09PSAnSSBhbSBub3cgZGlmZmVyZW50J1xuICAgICAgICB9LCA1MDAwLCAnZXhwZWN0ZWQgdGV4dCB0byBiZSBkaWZmZXJlbnQgYWZ0ZXIgNXMnKTtcbiAgICB9KTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICogQGFsaWFzIGJyb3dzZXIud2FpdFVudGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25kaXRpb24gIGNvbmRpdGlvbiB0byB3YWl0IG9uXG4gKiBAcGFyYW0ge051bWJlcj19ICB0aW1lb3V0ICAgIHRpbWVvdXQgaW4gbXMgKGRlZmF1bHQ6IDUwMClcbiAqIEBwYXJhbSB7U3RyaW5nPX0gIHRpbWVvdXRNc2cgZXJyb3IgbWVzc2FnZSB0byB0aHJvdyB3aGVuIHdhaXRVbnRpbCB0aW1lcyBvdXRcbiAqIEBwYXJhbSB7TnVtYmVyPX0gIGludGVydmFsICAgaW50ZXJ2YWwgYmV0d2VlbiBjb25kaXRpb24gY2hlY2tzIChkZWZhdWx0OiA1MDApXG4gKiBAdXNlcyB1dGlsaXR5L3BhdXNlXG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5cbmltcG9ydCBUaW1lciBmcm9tICcuLi8uLi91dGlscy9UaW1lcidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmRpdGlvbiwgdGltZW91dCwgdGltZW91dE1zZywgaW50ZXJ2YWwpIHtcbiAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmRpdGlvbiBpcyBub3QgYSBmdW5jdGlvbicpXG4gICAgfVxuXG4gICAgLyohXG4gICAgICogZW5zdXJlIHRoYXQgdGltZW91dCBhbmQgaW50ZXJ2YWwgYXJlIHNldCBwcm9wZXJseVxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGltZW91dCA9IHRoaXMub3B0aW9ucy53YWl0Zm9yVGltZW91dFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGludGVydmFsID0gdGhpcy5vcHRpb25zLndhaXRmb3JJbnRlcnZhbFxuICAgIH1cblxuICAgIGNvbnN0IGZuID0gY29uZGl0aW9uLmJpbmQodGhpcylcbiAgICBsZXQgdGltZXIgPSBuZXcgVGltZXIoaW50ZXJ2YWwsIHRpbWVvdXQsIGZuLCB0cnVlKVxuXG4gICAgcmV0dXJuIHRpbWVyLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGlmIChlLm1lc3NhZ2UgPT09ICd0aW1lb3V0JyAmJiB0eXBlb2YgdGltZW91dE1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aW1lb3V0TXNnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcmVhc29uOiAke2V9YClcbiAgICB9KVxufVxuIl19