"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = saveScreenshot;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _safeBuffer = require("safe-buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Save a screenshot of the current browsing context to a PNG file on your OS. Be aware that
 * some browser driver take screenshots of the whole document (e.g. Geckodriver with Firefox)
 * and others only of the current viewport (e.g. Chromedriver with Chrome). If you want to
 * always be sure that the screenshot has the size of the whole document, use [wdio-screenshot](https://www.npmjs.com/package/wdio-screenshot)
 * to enhance this command with that functionality.
 *
 * <example>
    :saveScreenshot.js
    it('should save a screenshot of the browser view', function () {
        browser.saveScreenshot('./some/path/screenshot.png');
    });
 * </example>
 *
 * @alias browser.saveScreenshot
 * @param   {String}  filename  path to the generated image (`.png` suffix is required) relative to the execution directory
 * @return  {Buffer}            screenshot buffer
 * @type utility
 *
 */
async function saveScreenshot(filepath) {
  /**
   * type check
   */
  if (typeof filepath !== 'string' || !filepath.endsWith('.png')) {
    throw new Error('saveScreenshot expects a filepath of type string and ".png" file ending');
  }

  const absoluteFilepath = filepath.startsWith('/') ? filepath : _path.default.join(process.cwd(), filepath);
  /**
   * check if directory exists
   */

  if (!_fs.default.existsSync(_path.default.dirname(absoluteFilepath))) {
    throw new Error(`directory (${_path.default.dirname(absoluteFilepath)}) doesn't exist`);
  }

  const screenBuffer = await this.takeScreenshot();
  const screenshot = new _safeBuffer.Buffer(screenBuffer, 'base64');

  _fs.default.writeFileSync(absoluteFilepath, screenshot);

  return screenshot;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3NhdmVTY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbInNhdmVTY3JlZW5zaG90IiwiZmlsZXBhdGgiLCJlbmRzV2l0aCIsIkVycm9yIiwiYWJzb2x1dGVGaWxlcGF0aCIsInN0YXJ0c1dpdGgiLCJwYXRoIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJmcyIsImV4aXN0c1N5bmMiLCJkaXJuYW1lIiwic2NyZWVuQnVmZmVyIiwidGFrZVNjcmVlbnNob3QiLCJzY3JlZW5zaG90IiwiQnVmZmVyIiwid3JpdGVGaWxlU3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBc0JBOztBQUNBOztBQUNBOzs7O0FBeEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQmUsZUFBZUEsY0FBZixDQUErQkMsUUFBL0IsRUFBeUM7QUFDcEQ7OztBQUdBLE1BQUksT0FBT0EsUUFBUCxLQUFvQixRQUFwQixJQUFnQyxDQUFDQSxRQUFRLENBQUNDLFFBQVQsQ0FBa0IsTUFBbEIsQ0FBckMsRUFBZ0U7QUFDNUQsVUFBTSxJQUFJQyxLQUFKLENBQVUseUVBQVYsQ0FBTjtBQUNIOztBQUVELFFBQU1DLGdCQUFnQixHQUFHSCxRQUFRLENBQUNJLFVBQVQsQ0FBb0IsR0FBcEIsSUFDbkJKLFFBRG1CLEdBRW5CSyxjQUFLQyxJQUFMLENBQVVDLE9BQU8sQ0FBQ0MsR0FBUixFQUFWLEVBQXlCUixRQUF6QixDQUZOO0FBSUE7Ozs7QUFHQSxNQUFJLENBQUNTLFlBQUdDLFVBQUgsQ0FBY0wsY0FBS00sT0FBTCxDQUFhUixnQkFBYixDQUFkLENBQUwsRUFBb0Q7QUFDaEQsVUFBTSxJQUFJRCxLQUFKLENBQVcsY0FBYUcsY0FBS00sT0FBTCxDQUFhUixnQkFBYixDQUErQixpQkFBdkQsQ0FBTjtBQUNIOztBQUVELFFBQU1TLFlBQVksR0FBRyxNQUFNLEtBQUtDLGNBQUwsRUFBM0I7QUFDQSxRQUFNQyxVQUFVLEdBQUcsSUFBSUMsa0JBQUosQ0FBV0gsWUFBWCxFQUF5QixRQUF6QixDQUFuQjs7QUFDQUgsY0FBR08sYUFBSCxDQUFpQmIsZ0JBQWpCLEVBQW1DVyxVQUFuQzs7QUFFQSxTQUFPQSxVQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBTYXZlIGEgc2NyZWVuc2hvdCBvZiB0aGUgY3VycmVudCBicm93c2luZyBjb250ZXh0IHRvIGEgUE5HIGZpbGUgb24geW91ciBPUy4gQmUgYXdhcmUgdGhhdFxuICogc29tZSBicm93c2VyIGRyaXZlciB0YWtlIHNjcmVlbnNob3RzIG9mIHRoZSB3aG9sZSBkb2N1bWVudCAoZS5nLiBHZWNrb2RyaXZlciB3aXRoIEZpcmVmb3gpXG4gKiBhbmQgb3RoZXJzIG9ubHkgb2YgdGhlIGN1cnJlbnQgdmlld3BvcnQgKGUuZy4gQ2hyb21lZHJpdmVyIHdpdGggQ2hyb21lKS4gSWYgeW91IHdhbnQgdG9cbiAqIGFsd2F5cyBiZSBzdXJlIHRoYXQgdGhlIHNjcmVlbnNob3QgaGFzIHRoZSBzaXplIG9mIHRoZSB3aG9sZSBkb2N1bWVudCwgdXNlIFt3ZGlvLXNjcmVlbnNob3RdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3dkaW8tc2NyZWVuc2hvdClcbiAqIHRvIGVuaGFuY2UgdGhpcyBjb21tYW5kIHdpdGggdGhhdCBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpzYXZlU2NyZWVuc2hvdC5qc1xuICAgIGl0KCdzaG91bGQgc2F2ZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGJyb3dzZXIgdmlldycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYnJvd3Nlci5zYXZlU2NyZWVuc2hvdCgnLi9zb21lL3BhdGgvc2NyZWVuc2hvdC5wbmcnKTtcbiAgICB9KTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAYWxpYXMgYnJvd3Nlci5zYXZlU2NyZWVuc2hvdFxuICogQHBhcmFtICAge1N0cmluZ30gIGZpbGVuYW1lICBwYXRoIHRvIHRoZSBnZW5lcmF0ZWQgaW1hZ2UgKGAucG5nYCBzdWZmaXggaXMgcmVxdWlyZWQpIHJlbGF0aXZlIHRvIHRoZSBleGVjdXRpb24gZGlyZWN0b3J5XG4gKiBAcmV0dXJuICB7QnVmZmVyfSAgICAgICAgICAgIHNjcmVlbnNob3QgYnVmZmVyXG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5cbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdzYWZlLWJ1ZmZlcidcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc2F2ZVNjcmVlbnNob3QgKGZpbGVwYXRoKSB7XG4gICAgLyoqXG4gICAgICogdHlwZSBjaGVja1xuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZmlsZXBhdGggIT09ICdzdHJpbmcnIHx8ICFmaWxlcGF0aC5lbmRzV2l0aCgnLnBuZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2F2ZVNjcmVlbnNob3QgZXhwZWN0cyBhIGZpbGVwYXRoIG9mIHR5cGUgc3RyaW5nIGFuZCBcIi5wbmdcIiBmaWxlIGVuZGluZycpXG4gICAgfVxuXG4gICAgY29uc3QgYWJzb2x1dGVGaWxlcGF0aCA9IGZpbGVwYXRoLnN0YXJ0c1dpdGgoJy8nKVxuICAgICAgICA/IGZpbGVwYXRoXG4gICAgICAgIDogcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGZpbGVwYXRoKVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgaWYgZGlyZWN0b3J5IGV4aXN0c1xuICAgICAqL1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwYXRoLmRpcm5hbWUoYWJzb2x1dGVGaWxlcGF0aCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlyZWN0b3J5ICgke3BhdGguZGlybmFtZShhYnNvbHV0ZUZpbGVwYXRoKX0pIGRvZXNuJ3QgZXhpc3RgKVxuICAgIH1cblxuICAgIGNvbnN0IHNjcmVlbkJ1ZmZlciA9IGF3YWl0IHRoaXMudGFrZVNjcmVlbnNob3QoKVxuICAgIGNvbnN0IHNjcmVlbnNob3QgPSBuZXcgQnVmZmVyKHNjcmVlbkJ1ZmZlciwgJ2Jhc2U2NCcpXG4gICAgZnMud3JpdGVGaWxlU3luYyhhYnNvbHV0ZUZpbGVwYXRoLCBzY3JlZW5zaG90KVxuXG4gICAgcmV0dXJuIHNjcmVlbnNob3Rcbn1cbiJdfQ==