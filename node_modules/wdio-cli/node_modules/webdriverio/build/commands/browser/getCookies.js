"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCookies;

require("source-map-support/register");

/**
 *
 * Retrieve a [cookie](https://w3c.github.io/webdriver/webdriver-spec.html#cookies)
 * visible to the current page. You can query a specific cookie by providing the cookie name or
 * retrieve all.
 *
 * <example>
    :getCookie.js
    it('should return a cookie for me', () => {
        browser.setCookie({name: 'test', value: '123'})
        browser.setCookie({name: 'test2', value: '456'})
        const testCookie = browser.getCookies(['test'])
        console.log(testCookie); // outputs: { name: 'test', value: '123' }
        
        const allCookies = browser.getCookies()
        console.log(allCookies);
        // outputs:
        // [
        //    { name: 'test', value: '123' },
        //    { name: 'test2', value: '456' }
        // ]
    })
 * </example>
 *
 * @alias browser.getCookie
 * @param {String[]=} names  names of requested cookies
 * @return {Object[]}        requested cookies if existing
 * @uses webdriver/getAllCookies
 *
 */
async function getCookies(names) {
  const namesList = typeof names !== 'undefined' && !Array.isArray(names) ? [names] : names;

  if (typeof namesList === 'undefined') {
    return this.getAllCookies();
  }

  if (namesList.every(obj => typeof obj !== 'string')) {
    throw new Error('Invalid input (see http://webdriver.io/docs/api/browser/getCookies.html for documentation.');
  }

  const allCookies = await this.getAllCookies();
  return allCookies.filter(cookie => namesList.includes(cookie.name));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL2dldENvb2tpZXMuanMiXSwibmFtZXMiOlsiZ2V0Q29va2llcyIsIm5hbWVzIiwibmFtZXNMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0QWxsQ29va2llcyIsImV2ZXJ5Iiwib2JqIiwiRXJyb3IiLCJhbGxDb29raWVzIiwiZmlsdGVyIiwiY29va2llIiwiaW5jbHVkZXMiLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJlLGVBQWVBLFVBQWYsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQzVDLFFBQU1DLFNBQVMsR0FBRyxPQUFPRCxLQUFQLEtBQWlCLFdBQWpCLElBQWdDLENBQUNFLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxLQUFkLENBQWpDLEdBQXdELENBQUNBLEtBQUQsQ0FBeEQsR0FBa0VBLEtBQXBGOztBQUVBLE1BQUksT0FBT0MsU0FBUCxLQUFxQixXQUF6QixFQUFzQztBQUNsQyxXQUFPLEtBQUtHLGFBQUwsRUFBUDtBQUNIOztBQUVELE1BQUlILFNBQVMsQ0FBQ0ksS0FBVixDQUFnQkMsR0FBRyxJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUF0QyxDQUFKLEVBQXFEO0FBQ2pELFVBQU0sSUFBSUMsS0FBSixDQUFVLDRGQUFWLENBQU47QUFDSDs7QUFFRCxRQUFNQyxVQUFVLEdBQUcsTUFBTSxLQUFLSixhQUFMLEVBQXpCO0FBRUEsU0FBT0ksVUFBVSxDQUFDQyxNQUFYLENBQWtCQyxNQUFNLElBQUlULFNBQVMsQ0FBQ1UsUUFBVixDQUFtQkQsTUFBTSxDQUFDRSxJQUExQixDQUE1QixDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBSZXRyaWV2ZSBhIFtjb29raWVdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbCNjb29raWVzKVxuICogdmlzaWJsZSB0byB0aGUgY3VycmVudCBwYWdlLiBZb3UgY2FuIHF1ZXJ5IGEgc3BlY2lmaWMgY29va2llIGJ5IHByb3ZpZGluZyB0aGUgY29va2llIG5hbWUgb3JcbiAqIHJldHJpZXZlIGFsbC5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6Z2V0Q29va2llLmpzXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBjb29raWUgZm9yIG1lJywgKCkgPT4ge1xuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMyd9KVxuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QyJywgdmFsdWU6ICc0NTYnfSlcbiAgICAgICAgY29uc3QgdGVzdENvb2tpZSA9IGJyb3dzZXIuZ2V0Q29va2llcyhbJ3Rlc3QnXSlcbiAgICAgICAgY29uc29sZS5sb2codGVzdENvb2tpZSk7IC8vIG91dHB1dHM6IHsgbmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMycgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYWxsQ29va2llcyA9IGJyb3dzZXIuZ2V0Q29va2llcygpXG4gICAgICAgIGNvbnNvbGUubG9nKGFsbENvb2tpZXMpO1xuICAgICAgICAvLyBvdXRwdXRzOlxuICAgICAgICAvLyBbXG4gICAgICAgIC8vICAgIHsgbmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMycgfSxcbiAgICAgICAgLy8gICAgeyBuYW1lOiAndGVzdDInLCB2YWx1ZTogJzQ1NicgfVxuICAgICAgICAvLyBdXG4gICAgfSlcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAYWxpYXMgYnJvd3Nlci5nZXRDb29raWVcbiAqIEBwYXJhbSB7U3RyaW5nW109fSBuYW1lcyAgbmFtZXMgb2YgcmVxdWVzdGVkIGNvb2tpZXNcbiAqIEByZXR1cm4ge09iamVjdFtdfSAgICAgICAgcmVxdWVzdGVkIGNvb2tpZXMgaWYgZXhpc3RpbmdcbiAqIEB1c2VzIHdlYmRyaXZlci9nZXRBbGxDb29raWVzXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnZXRDb29raWVzKG5hbWVzKSB7XG4gICAgY29uc3QgbmFtZXNMaXN0ID0gdHlwZW9mIG5hbWVzICE9PSAndW5kZWZpbmVkJyAmJiAhQXJyYXkuaXNBcnJheShuYW1lcykgPyBbbmFtZXNdIDogbmFtZXNcblxuICAgIGlmICh0eXBlb2YgbmFtZXNMaXN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGxDb29raWVzKClcbiAgICB9XG5cbiAgICBpZiAobmFtZXNMaXN0LmV2ZXJ5KG9iaiA9PiB0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGlucHV0IChzZWUgaHR0cDovL3dlYmRyaXZlci5pby9kb2NzL2FwaS9icm93c2VyL2dldENvb2tpZXMuaHRtbCBmb3IgZG9jdW1lbnRhdGlvbi4nKVxuICAgIH1cblxuICAgIGNvbnN0IGFsbENvb2tpZXMgPSBhd2FpdCB0aGlzLmdldEFsbENvb2tpZXMoKVxuXG4gICAgcmV0dXJuIGFsbENvb2tpZXMuZmlsdGVyKGNvb2tpZSA9PiBuYW1lc0xpc3QuaW5jbHVkZXMoY29va2llLm5hbWUpKTtcbn1cbiJdfQ==