"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keys;

require("source-map-support/register");

var _utils = require("../../utils");

/**
 *
 * Send a sequence of key strokes to the active element. You can also use characters like
 * "Left arrow" or "Back space". WebdriverIO will take care of translating them into unicode
 * characters. Youâ€™ll find all supported characters [here](https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions).
 * To do that, the value has to correspond to a key from the table.
 *
 * <example>
    :keys.js
    it('copies text out of active element', () => {
        // copies text from an input element
        const input = $('#username')
        input.setValue('anonymous')

        browser.keys(['Meta', 'a'])
        browser.keys(['Meta', 'c'])
    });
 * </example>
 *
 * @param {String|String[]} value  The sequence of keys to type. An array or string must be provided.
 * @see https://w3c.github.io/webdriver/#dispatching-actions
 *
 */
function keys(value) {
  let keySequence = [];
  /**
   * replace key with corresponding unicode character
   */

  if (typeof value === 'string') {
    keySequence = (0, _utils.checkUnicode)(value);
  } else if (value instanceof Array) {
    for (const charSet of value) {
      keySequence = keySequence.concat((0, _utils.checkUnicode)(charSet));
    }
  } else {
    throw new Error(`"keys" command requires a string or array of strings as parameter`);
  }
  /**
   * JsonWireProtocol action
   */


  if (!this.isW3C) {
    return this.sendKeys(keySequence);
  }
  /**
   * W3C way of handle it key actions
   */


  const keyDownActions = keySequence.map(value => ({
    type: 'keyDown',
    value
  }));
  const keyUpActions = keySequence.map(value => ({
    type: 'keyUp',
    value
  }));
  return this.performActions([{
    type: 'key',
    id: 'keyboard',
    actions: [...keyDownActions, ...keyUpActions]
  }]).then(() => this.releaseActions());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL2tleXMuanMiXSwibmFtZXMiOlsia2V5cyIsInZhbHVlIiwia2V5U2VxdWVuY2UiLCJBcnJheSIsImNoYXJTZXQiLCJjb25jYXQiLCJFcnJvciIsImlzVzNDIiwic2VuZEtleXMiLCJrZXlEb3duQWN0aW9ucyIsIm1hcCIsInR5cGUiLCJrZXlVcEFjdGlvbnMiLCJwZXJmb3JtQWN0aW9ucyIsImlkIiwiYWN0aW9ucyIsInRoZW4iLCJyZWxlYXNlQWN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBd0JBOztBQXhCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQmUsU0FBU0EsSUFBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ2pDLE1BQUlDLFdBQVcsR0FBRyxFQUFsQjtBQUVBOzs7O0FBR0EsTUFBSSxPQUFPRCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCQyxJQUFBQSxXQUFXLEdBQUcseUJBQWFELEtBQWIsQ0FBZDtBQUNILEdBRkQsTUFFTyxJQUFJQSxLQUFLLFlBQVlFLEtBQXJCLEVBQTRCO0FBQy9CLFNBQUssTUFBTUMsT0FBWCxJQUFzQkgsS0FBdEIsRUFBNkI7QUFDekJDLE1BQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRyxNQUFaLENBQW1CLHlCQUFhRCxPQUFiLENBQW5CLENBQWQ7QUFDSDtBQUNKLEdBSk0sTUFJQTtBQUNILFVBQU0sSUFBSUUsS0FBSixDQUFXLG1FQUFYLENBQU47QUFDSDtBQUVEOzs7OztBQUdBLE1BQUksQ0FBQyxLQUFLQyxLQUFWLEVBQWlCO0FBQ2IsV0FBTyxLQUFLQyxRQUFMLENBQWNOLFdBQWQsQ0FBUDtBQUNIO0FBRUQ7Ozs7O0FBR0EsUUFBTU8sY0FBYyxHQUFHUCxXQUFXLENBQUNRLEdBQVosQ0FBaUJULEtBQUQsS0FBWTtBQUFFVSxJQUFBQSxJQUFJLEVBQUUsU0FBUjtBQUFtQlYsSUFBQUE7QUFBbkIsR0FBWixDQUFoQixDQUF2QjtBQUNBLFFBQU1XLFlBQVksR0FBR1YsV0FBVyxDQUFDUSxHQUFaLENBQWlCVCxLQUFELEtBQVk7QUFBRVUsSUFBQUEsSUFBSSxFQUFFLE9BQVI7QUFBaUJWLElBQUFBO0FBQWpCLEdBQVosQ0FBaEIsQ0FBckI7QUFFQSxTQUFPLEtBQUtZLGNBQUwsQ0FBb0IsQ0FBQztBQUN4QkYsSUFBQUEsSUFBSSxFQUFFLEtBRGtCO0FBRXhCRyxJQUFBQSxFQUFFLEVBQUUsVUFGb0I7QUFHeEJDLElBQUFBLE9BQU8sRUFBRSxDQUFDLEdBQUdOLGNBQUosRUFBb0IsR0FBR0csWUFBdkI7QUFIZSxHQUFELENBQXBCLEVBSUhJLElBSkcsQ0FJRSxNQUFNLEtBQUtDLGNBQUwsRUFKUixDQUFQO0FBS0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBTZW5kIGEgc2VxdWVuY2Ugb2Yga2V5IHN0cm9rZXMgdG8gdGhlIGFjdGl2ZSBlbGVtZW50LiBZb3UgY2FuIGFsc28gdXNlIGNoYXJhY3RlcnMgbGlrZVxuICogXCJMZWZ0IGFycm93XCIgb3IgXCJCYWNrIHNwYWNlXCIuIFdlYmRyaXZlcklPIHdpbGwgdGFrZSBjYXJlIG9mIHRyYW5zbGF0aW5nIHRoZW0gaW50byB1bmljb2RlXG4gKiBjaGFyYWN0ZXJzLiBZb3XigJlsbCBmaW5kIGFsbCBzdXBwb3J0ZWQgY2hhcmFjdGVycyBbaGVyZV0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci93ZWJkcml2ZXItc3BlYy5odG1sI2tleWJvYXJkLWFjdGlvbnMpLlxuICogVG8gZG8gdGhhdCwgdGhlIHZhbHVlIGhhcyB0byBjb3JyZXNwb25kIHRvIGEga2V5IGZyb20gdGhlIHRhYmxlLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDprZXlzLmpzXG4gICAgaXQoJ2NvcGllcyB0ZXh0IG91dCBvZiBhY3RpdmUgZWxlbWVudCcsICgpID0+IHtcbiAgICAgICAgLy8gY29waWVzIHRleHQgZnJvbSBhbiBpbnB1dCBlbGVtZW50XG4gICAgICAgIGNvbnN0IGlucHV0ID0gJCgnI3VzZXJuYW1lJylcbiAgICAgICAgaW5wdXQuc2V0VmFsdWUoJ2Fub255bW91cycpXG5cbiAgICAgICAgYnJvd3Nlci5rZXlzKFsnTWV0YScsICdhJ10pXG4gICAgICAgIGJyb3dzZXIua2V5cyhbJ01ldGEnLCAnYyddKVxuICAgIH0pO1xuICogPC9leGFtcGxlPlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfSB2YWx1ZSAgVGhlIHNlcXVlbmNlIG9mIGtleXMgdG8gdHlwZS4gQW4gYXJyYXkgb3Igc3RyaW5nIG11c3QgYmUgcHJvdmlkZWQuXG4gKiBAc2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvI2Rpc3BhdGNoaW5nLWFjdGlvbnNcbiAqXG4gKi9cblxuaW1wb3J0IHsgY2hlY2tVbmljb2RlIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleXMgKHZhbHVlKSB7XG4gICAgbGV0IGtleVNlcXVlbmNlID0gW11cblxuICAgIC8qKlxuICAgICAqIHJlcGxhY2Uga2V5IHdpdGggY29ycmVzcG9uZGluZyB1bmljb2RlIGNoYXJhY3RlclxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGtleVNlcXVlbmNlID0gY2hlY2tVbmljb2RlKHZhbHVlKVxuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYXJTZXQgb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIGtleVNlcXVlbmNlID0ga2V5U2VxdWVuY2UuY29uY2F0KGNoZWNrVW5pY29kZShjaGFyU2V0KSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJrZXlzXCIgY29tbWFuZCByZXF1aXJlcyBhIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIGFzIHBhcmFtZXRlcmApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSnNvbldpcmVQcm90b2NvbCBhY3Rpb25cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuaXNXM0MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEtleXMoa2V5U2VxdWVuY2UpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVzNDIHdheSBvZiBoYW5kbGUgaXQga2V5IGFjdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdCBrZXlEb3duQWN0aW9ucyA9IGtleVNlcXVlbmNlLm1hcCgodmFsdWUpID0+ICh7IHR5cGU6ICdrZXlEb3duJywgdmFsdWUgfSkpXG4gICAgY29uc3Qga2V5VXBBY3Rpb25zID0ga2V5U2VxdWVuY2UubWFwKCh2YWx1ZSkgPT4gKHsgdHlwZTogJ2tleVVwJywgdmFsdWUgfSkpXG5cbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtQWN0aW9ucyhbe1xuICAgICAgICB0eXBlOiAna2V5JyxcbiAgICAgICAgaWQ6ICdrZXlib2FyZCcsXG4gICAgICAgIGFjdGlvbnM6IFsuLi5rZXlEb3duQWN0aW9ucywgLi4ua2V5VXBBY3Rpb25zXVxuICAgIH1dKS50aGVuKCgpID0+IHRoaXMucmVsZWFzZUFjdGlvbnMoKSlcbn1cbiJdfQ==