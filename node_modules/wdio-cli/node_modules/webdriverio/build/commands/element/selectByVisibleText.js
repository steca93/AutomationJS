"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = selectByVisibleText;

require("source-map-support/register");

var _utils = require("../../utils");

/**
 *
 * Select option with displayed text matching the argument.
 *
 * <example>
    :example.html
    <select id="selectbox">
        <option value="someValue0">uno</option>
        <option value="someValue1">dos</option>
        <option value="someValue2">tres</option>
        <option value="someValue3">cuatro</option>
        <option value="someValue4">cinco</option>
        <option value="someValue5">seis</option>
    </select>
    :selectByVisibleText.js
    it('demonstrate the selectByVisibleText command', () => {
        const selectBox = $('#selectbox');
        console.log(selectBox.getText('option:checked')); // returns "uno"
        selectBox.selectByVisibleText('cuatro');
        console.log(selectBox.getText('option:checked')); // returns "cuatro"
    })
 * </example>
 *
 * @alias element.selectByVisibleText
 * @param {String} text       text of option element to get selected
 * @uses protocol/findElementsFromElement, protocol/elementClick
 * @type action
 *
 */
async function selectByVisibleText(text) {
  /**
   * convert value into string
   */
  text = typeof text === 'number' ? text.toString() : text;
  /**
  * find option element using xpath
  */

  const formatted = /"/.test(text) ? 'concat("' + text.trim().split('"').join('", \'"\', "') + '")' : `"${text.trim()}"`;
  const normalized = `[normalize-space(text()) = ${formatted}]`;
  const optionElement = await this.findElementFromElement(this.elementId, 'xpath', `./option${normalized}|./optgroup/option${normalized}`);
  /**
  * select option
  */

  return this.elementClick((0, _utils.getElementFromResponse)(optionElement));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L3NlbGVjdEJ5VmlzaWJsZVRleHQuanMiXSwibmFtZXMiOlsic2VsZWN0QnlWaXNpYmxlVGV4dCIsInRleHQiLCJ0b1N0cmluZyIsImZvcm1hdHRlZCIsInRlc3QiLCJ0cmltIiwic3BsaXQiLCJqb2luIiwibm9ybWFsaXplZCIsIm9wdGlvbkVsZW1lbnQiLCJmaW5kRWxlbWVudEZyb21FbGVtZW50IiwiZWxlbWVudElkIiwiZWxlbWVudENsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUE4QkE7O0FBOUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDZSxlQUFlQSxtQkFBZixDQUFvQ0MsSUFBcEMsRUFBMEM7QUFDckQ7OztBQUdBQSxFQUFBQSxJQUFJLEdBQUcsT0FBT0EsSUFBUCxLQUFnQixRQUFoQixHQUNEQSxJQUFJLENBQUNDLFFBQUwsRUFEQyxHQUVERCxJQUZOO0FBSUE7Ozs7QUFHQSxRQUFNRSxTQUFTLEdBQUcsSUFBSUMsSUFBSixDQUFTSCxJQUFULElBQ1osYUFBYUEsSUFBSSxDQUFDSSxJQUFMLEdBQVlDLEtBQVosQ0FBa0IsR0FBbEIsRUFBdUJDLElBQXZCLENBQTRCLGFBQTVCLENBQWIsR0FBMEQsSUFEOUMsR0FFWCxJQUFHTixJQUFJLENBQUNJLElBQUwsRUFBWSxHQUZ0QjtBQUdBLFFBQU1HLFVBQVUsR0FBSSw4QkFBNkJMLFNBQVUsR0FBM0Q7QUFDQSxRQUFNTSxhQUFhLEdBQUcsTUFBTSxLQUFLQyxzQkFBTCxDQUE0QixLQUFLQyxTQUFqQyxFQUE0QyxPQUE1QyxFQUFzRCxXQUFVSCxVQUFXLHFCQUFvQkEsVUFBVyxFQUExRyxDQUE1QjtBQUVBOzs7O0FBR0EsU0FBTyxLQUFLSSxZQUFMLENBQWtCLG1DQUF1QkgsYUFBdkIsQ0FBbEIsQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogU2VsZWN0IG9wdGlvbiB3aXRoIGRpc3BsYXllZCB0ZXh0IG1hdGNoaW5nIHRoZSBhcmd1bWVudC5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6ZXhhbXBsZS5odG1sXG4gICAgPHNlbGVjdCBpZD1cInNlbGVjdGJveFwiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwic29tZVZhbHVlMFwiPnVubzwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwic29tZVZhbHVlMVwiPmRvczwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwic29tZVZhbHVlMlwiPnRyZXM8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNvbWVWYWx1ZTNcIj5jdWF0cm88L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNvbWVWYWx1ZTRcIj5jaW5jbzwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwic29tZVZhbHVlNVwiPnNlaXM8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA6c2VsZWN0QnlWaXNpYmxlVGV4dC5qc1xuICAgIGl0KCdkZW1vbnN0cmF0ZSB0aGUgc2VsZWN0QnlWaXNpYmxlVGV4dCBjb21tYW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RCb3ggPSAkKCcjc2VsZWN0Ym94Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdEJveC5nZXRUZXh0KCdvcHRpb246Y2hlY2tlZCcpKTsgLy8gcmV0dXJucyBcInVub1wiXG4gICAgICAgIHNlbGVjdEJveC5zZWxlY3RCeVZpc2libGVUZXh0KCdjdWF0cm8nKTtcbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0Qm94LmdldFRleHQoJ29wdGlvbjpjaGVja2VkJykpOyAvLyByZXR1cm5zIFwiY3VhdHJvXCJcbiAgICB9KVxuICogPC9leGFtcGxlPlxuICpcbiAqIEBhbGlhcyBlbGVtZW50LnNlbGVjdEJ5VmlzaWJsZVRleHRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0ICAgICAgIHRleHQgb2Ygb3B0aW9uIGVsZW1lbnQgdG8gZ2V0IHNlbGVjdGVkXG4gKiBAdXNlcyBwcm90b2NvbC9maW5kRWxlbWVudHNGcm9tRWxlbWVudCwgcHJvdG9jb2wvZWxlbWVudENsaWNrXG4gKiBAdHlwZSBhY3Rpb25cbiAqXG4gKi9cblxuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21SZXNwb25zZSB9IGZyb20gJy4uLy4uL3V0aWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBzZWxlY3RCeVZpc2libGVUZXh0ICh0ZXh0KSB7XG4gICAgLyoqXG4gICAgICogY29udmVydCB2YWx1ZSBpbnRvIHN0cmluZ1xuICAgICAqL1xuICAgIHRleHQgPSB0eXBlb2YgdGV4dCA9PT0gJ251bWJlcidcbiAgICAgICAgPyB0ZXh0LnRvU3RyaW5nKClcbiAgICAgICAgOiB0ZXh0XG5cbiAgICAvKipcbiAgICAqIGZpbmQgb3B0aW9uIGVsZW1lbnQgdXNpbmcgeHBhdGhcbiAgICAqL1xuICAgIGNvbnN0IGZvcm1hdHRlZCA9IC9cIi8udGVzdCh0ZXh0KVxuICAgICAgICA/ICdjb25jYXQoXCInICsgdGV4dC50cmltKCkuc3BsaXQoJ1wiJykuam9pbignXCIsIFxcJ1wiXFwnLCBcIicpICsgJ1wiKSdcbiAgICAgICAgOiBgXCIke3RleHQudHJpbSgpfVwiYFxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBgW25vcm1hbGl6ZS1zcGFjZSh0ZXh0KCkpID0gJHtmb3JtYXR0ZWR9XWBcbiAgICBjb25zdCBvcHRpb25FbGVtZW50ID0gYXdhaXQgdGhpcy5maW5kRWxlbWVudEZyb21FbGVtZW50KHRoaXMuZWxlbWVudElkLCAneHBhdGgnLCBgLi9vcHRpb24ke25vcm1hbGl6ZWR9fC4vb3B0Z3JvdXAvb3B0aW9uJHtub3JtYWxpemVkfWApXG5cbiAgICAvKipcbiAgICAqIHNlbGVjdCBvcHRpb25cbiAgICAqL1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRDbGljayhnZXRFbGVtZW50RnJvbVJlc3BvbnNlKG9wdGlvbkVsZW1lbnQpKVxufVxuIl19