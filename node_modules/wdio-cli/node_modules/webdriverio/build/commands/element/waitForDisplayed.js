"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitForDisplayed;

require("source-map-support/register");

/**
 *
 * Wait for an element for the provided amount of
 * milliseconds to be displayed or not displayed.
 *
 * <example>
    :index.html
    <div id="elem" style="visibility: hidden;">Hello World!</div>
    <script type="text/javascript">
        setTimeout(() => {
            document.getElementById('elem').style.visibility = 'visible';
        }, 2000);
    </script>
    :waitForVisibleExample.js
    it('should detect when element is visible', () => {
        const elem = $('#elem')
        elem.waitForDisplayed(3000);
    });
 * </example>
 *
 * @alias element.waitForDisplayed
 * @param {Number=}  ms       time in ms (default: 500)
 * @param {Boolean=} reverse  if true it waits for the opposite (default: false)
 * @uses utility/waitUntil, state/isDisplayed
 * @type utility
 *
 */
async function waitForDisplayed(ms, reverse = false) {
  /**
   * if element wasn't found in the first place wait for its existance first
   */
  if (!this.elementId && !reverse) {
    await this.waitForExist(ms);
  }
  /*
   * ensure that ms is set properly
   */


  if (typeof ms !== 'number') {
    ms = this.options.waitforTimeout;
  }

  const isReversed = reverse ? '' : 'not ';
  const errorMsg = `element ("${this.selector}") still ${isReversed}displayed after ${ms}ms`;
  return this.waitUntil(async () => {
    const isVisible = await this.isElementDisplayed(this.elementId);
    return isVisible !== reverse;
  }, ms, errorMsg);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L3dhaXRGb3JEaXNwbGF5ZWQuanMiXSwibmFtZXMiOlsid2FpdEZvckRpc3BsYXllZCIsIm1zIiwicmV2ZXJzZSIsImVsZW1lbnRJZCIsIndhaXRGb3JFeGlzdCIsIm9wdGlvbnMiLCJ3YWl0Zm9yVGltZW91dCIsImlzUmV2ZXJzZWQiLCJlcnJvck1zZyIsInNlbGVjdG9yIiwid2FpdFVudGlsIiwiaXNWaXNpYmxlIiwiaXNFbGVtZW50RGlzcGxheWVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJlLGVBQWVBLGdCQUFmLENBQWlDQyxFQUFqQyxFQUFxQ0MsT0FBTyxHQUFHLEtBQS9DLEVBQXNEO0FBQ2pFOzs7QUFHQSxNQUFJLENBQUMsS0FBS0MsU0FBTixJQUFtQixDQUFDRCxPQUF4QixFQUFpQztBQUM3QixVQUFNLEtBQUtFLFlBQUwsQ0FBa0JILEVBQWxCLENBQU47QUFDSDtBQUVEOzs7OztBQUdBLE1BQUksT0FBT0EsRUFBUCxLQUFjLFFBQWxCLEVBQTRCO0FBQ3hCQSxJQUFBQSxFQUFFLEdBQUcsS0FBS0ksT0FBTCxDQUFhQyxjQUFsQjtBQUNIOztBQUVELFFBQU1DLFVBQVUsR0FBR0wsT0FBTyxHQUFHLEVBQUgsR0FBUSxNQUFsQztBQUNBLFFBQU1NLFFBQVEsR0FBSSxhQUFZLEtBQUtDLFFBQVMsWUFBV0YsVUFBVyxtQkFBa0JOLEVBQUcsSUFBdkY7QUFFQSxTQUFPLEtBQUtTLFNBQUwsQ0FBZSxZQUFZO0FBQzlCLFVBQU1DLFNBQVMsR0FBRyxNQUFNLEtBQUtDLGtCQUFMLENBQXdCLEtBQUtULFNBQTdCLENBQXhCO0FBRUEsV0FBT1EsU0FBUyxLQUFLVCxPQUFyQjtBQUNILEdBSk0sRUFJSkQsRUFKSSxFQUlBTyxRQUpBLENBQVA7QUFLSCIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKlxuICogV2FpdCBmb3IgYW4gZWxlbWVudCBmb3IgdGhlIHByb3ZpZGVkIGFtb3VudCBvZlxuICogbWlsbGlzZWNvbmRzIHRvIGJlIGRpc3BsYXllZCBvciBub3QgZGlzcGxheWVkLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDppbmRleC5odG1sXG4gICAgPGRpdiBpZD1cImVsZW1cIiBzdHlsZT1cInZpc2liaWxpdHk6IGhpZGRlbjtcIj5IZWxsbyBXb3JsZCE8L2Rpdj5cbiAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWxlbScpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIH0sIDIwMDApO1xuICAgIDwvc2NyaXB0PlxuICAgIDp3YWl0Rm9yVmlzaWJsZUV4YW1wbGUuanNcbiAgICBpdCgnc2hvdWxkIGRldGVjdCB3aGVuIGVsZW1lbnQgaXMgdmlzaWJsZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbSA9ICQoJyNlbGVtJylcbiAgICAgICAgZWxlbS53YWl0Rm9yRGlzcGxheWVkKDMwMDApO1xuICAgIH0pO1xuICogPC9leGFtcGxlPlxuICpcbiAqIEBhbGlhcyBlbGVtZW50LndhaXRGb3JEaXNwbGF5ZWRcbiAqIEBwYXJhbSB7TnVtYmVyPX0gIG1zICAgICAgIHRpbWUgaW4gbXMgKGRlZmF1bHQ6IDUwMClcbiAqIEBwYXJhbSB7Qm9vbGVhbj19IHJldmVyc2UgIGlmIHRydWUgaXQgd2FpdHMgZm9yIHRoZSBvcHBvc2l0ZSAoZGVmYXVsdDogZmFsc2UpXG4gKiBAdXNlcyB1dGlsaXR5L3dhaXRVbnRpbCwgc3RhdGUvaXNEaXNwbGF5ZWRcbiAqIEB0eXBlIHV0aWxpdHlcbiAqXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckRpc3BsYXllZCAobXMsIHJldmVyc2UgPSBmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIGlmIGVsZW1lbnQgd2Fzbid0IGZvdW5kIGluIHRoZSBmaXJzdCBwbGFjZSB3YWl0IGZvciBpdHMgZXhpc3RhbmNlIGZpcnN0XG4gICAgICovXG4gICAgaWYgKCF0aGlzLmVsZW1lbnRJZCAmJiAhcmV2ZXJzZSkge1xuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JFeGlzdChtcylcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGVuc3VyZSB0aGF0IG1zIGlzIHNldCBwcm9wZXJseVxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgbXMgIT09ICdudW1iZXInKSB7XG4gICAgICAgIG1zID0gdGhpcy5vcHRpb25zLndhaXRmb3JUaW1lb3V0XG4gICAgfVxuXG4gICAgY29uc3QgaXNSZXZlcnNlZCA9IHJldmVyc2UgPyAnJyA6ICdub3QgJ1xuICAgIGNvbnN0IGVycm9yTXNnID0gYGVsZW1lbnQgKFwiJHt0aGlzLnNlbGVjdG9yfVwiKSBzdGlsbCAke2lzUmV2ZXJzZWR9ZGlzcGxheWVkIGFmdGVyICR7bXN9bXNgXG5cbiAgICByZXR1cm4gdGhpcy53YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBpc1Zpc2libGUgPSBhd2FpdCB0aGlzLmlzRWxlbWVudERpc3BsYXllZCh0aGlzLmVsZW1lbnRJZClcblxuICAgICAgICByZXR1cm4gaXNWaXNpYmxlICE9PSByZXZlcnNlXG4gICAgfSwgbXMsIGVycm9yTXNnKVxufVxuIl19