"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = saveScreenshot;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _safeBuffer = require("safe-buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Save a screenshot of an element to a PNG file on your OS.
 *
 * <example>
    :saveScreenshot.js
    it('should save a screenshot of the browser view', function () {
        const elem = $('#someElem');
        elem.saveScreenshot('./some/path/elemScreenshot.png');
    });
 * </example>
 *
 * @alias element.saveScreenshot
 * @param   {String}  filename  path to the generated image (`.png` suffix is required) relative to the execution directory
 * @return  {Buffer}            screenshot buffer
 * @type utility
 *
 */
async function saveScreenshot(filepath) {
  /**
   * type check
   */
  if (typeof filepath !== 'string' || !filepath.endsWith('.png')) {
    throw new Error('saveScreenshot expects a filepath of type string and ".png" file ending');
  }

  const absoluteFilepath = filepath.startsWith('/') ? filepath : _path.default.join(process.cwd(), filepath);
  /**
   * check if directory exists
   */

  if (!_fs.default.existsSync(_path.default.dirname(absoluteFilepath))) {
    throw new Error(`directory (${_path.default.dirname(absoluteFilepath)}) doesn't exist`);
  }

  const screenBuffer = await this.takeElementScreenshot(this.elementId);
  const screenshot = new _safeBuffer.Buffer(screenBuffer, 'base64');

  _fs.default.writeFileSync(absoluteFilepath, screenshot);

  return screenshot;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L3NhdmVTY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbInNhdmVTY3JlZW5zaG90IiwiZmlsZXBhdGgiLCJlbmRzV2l0aCIsIkVycm9yIiwiYWJzb2x1dGVGaWxlcGF0aCIsInN0YXJ0c1dpdGgiLCJwYXRoIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJmcyIsImV4aXN0c1N5bmMiLCJkaXJuYW1lIiwic2NyZWVuQnVmZmVyIiwidGFrZUVsZW1lbnRTY3JlZW5zaG90IiwiZWxlbWVudElkIiwic2NyZWVuc2hvdCIsIkJ1ZmZlciIsIndyaXRlRmlsZVN5bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7QUFDQTs7OztBQXJCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJlLGVBQWVBLGNBQWYsQ0FBK0JDLFFBQS9CLEVBQXlDO0FBQ3BEOzs7QUFHQSxNQUFJLE9BQU9BLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsQ0FBQ0EsUUFBUSxDQUFDQyxRQUFULENBQWtCLE1BQWxCLENBQXJDLEVBQWdFO0FBQzVELFVBQU0sSUFBSUMsS0FBSixDQUFVLHlFQUFWLENBQU47QUFDSDs7QUFFRCxRQUFNQyxnQkFBZ0IsR0FBR0gsUUFBUSxDQUFDSSxVQUFULENBQW9CLEdBQXBCLElBQ25CSixRQURtQixHQUVuQkssY0FBS0MsSUFBTCxDQUFVQyxPQUFPLENBQUNDLEdBQVIsRUFBVixFQUF5QlIsUUFBekIsQ0FGTjtBQUlBOzs7O0FBR0EsTUFBSSxDQUFDUyxZQUFHQyxVQUFILENBQWNMLGNBQUtNLE9BQUwsQ0FBYVIsZ0JBQWIsQ0FBZCxDQUFMLEVBQW9EO0FBQ2hELFVBQU0sSUFBSUQsS0FBSixDQUFXLGNBQWFHLGNBQUtNLE9BQUwsQ0FBYVIsZ0JBQWIsQ0FBK0IsaUJBQXZELENBQU47QUFDSDs7QUFFRCxRQUFNUyxZQUFZLEdBQUcsTUFBTSxLQUFLQyxxQkFBTCxDQUEyQixLQUFLQyxTQUFoQyxDQUEzQjtBQUNBLFFBQU1DLFVBQVUsR0FBRyxJQUFJQyxrQkFBSixDQUFXSixZQUFYLEVBQXlCLFFBQXpCLENBQW5COztBQUNBSCxjQUFHUSxhQUFILENBQWlCZCxnQkFBakIsRUFBbUNZLFVBQW5DOztBQUVBLFNBQU9BLFVBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIFNhdmUgYSBzY3JlZW5zaG90IG9mIGFuIGVsZW1lbnQgdG8gYSBQTkcgZmlsZSBvbiB5b3VyIE9TLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpzYXZlU2NyZWVuc2hvdC5qc1xuICAgIGl0KCdzaG91bGQgc2F2ZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGJyb3dzZXIgdmlldycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZWxlbSA9ICQoJyNzb21lRWxlbScpO1xuICAgICAgICBlbGVtLnNhdmVTY3JlZW5zaG90KCcuL3NvbWUvcGF0aC9lbGVtU2NyZWVuc2hvdC5wbmcnKTtcbiAgICB9KTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAYWxpYXMgZWxlbWVudC5zYXZlU2NyZWVuc2hvdFxuICogQHBhcmFtICAge1N0cmluZ30gIGZpbGVuYW1lICBwYXRoIHRvIHRoZSBnZW5lcmF0ZWQgaW1hZ2UgKGAucG5nYCBzdWZmaXggaXMgcmVxdWlyZWQpIHJlbGF0aXZlIHRvIHRoZSBleGVjdXRpb24gZGlyZWN0b3J5XG4gKiBAcmV0dXJuICB7QnVmZmVyfSAgICAgICAgICAgIHNjcmVlbnNob3QgYnVmZmVyXG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5cbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdzYWZlLWJ1ZmZlcidcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gc2F2ZVNjcmVlbnNob3QgKGZpbGVwYXRoKSB7XG4gICAgLyoqXG4gICAgICogdHlwZSBjaGVja1xuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZmlsZXBhdGggIT09ICdzdHJpbmcnIHx8ICFmaWxlcGF0aC5lbmRzV2l0aCgnLnBuZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2F2ZVNjcmVlbnNob3QgZXhwZWN0cyBhIGZpbGVwYXRoIG9mIHR5cGUgc3RyaW5nIGFuZCBcIi5wbmdcIiBmaWxlIGVuZGluZycpXG4gICAgfVxuXG4gICAgY29uc3QgYWJzb2x1dGVGaWxlcGF0aCA9IGZpbGVwYXRoLnN0YXJ0c1dpdGgoJy8nKVxuICAgICAgICA/IGZpbGVwYXRoXG4gICAgICAgIDogcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGZpbGVwYXRoKVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgaWYgZGlyZWN0b3J5IGV4aXN0c1xuICAgICAqL1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwYXRoLmRpcm5hbWUoYWJzb2x1dGVGaWxlcGF0aCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlyZWN0b3J5ICgke3BhdGguZGlybmFtZShhYnNvbHV0ZUZpbGVwYXRoKX0pIGRvZXNuJ3QgZXhpc3RgKVxuICAgIH1cblxuICAgIGNvbnN0IHNjcmVlbkJ1ZmZlciA9IGF3YWl0IHRoaXMudGFrZUVsZW1lbnRTY3JlZW5zaG90KHRoaXMuZWxlbWVudElkKVxuICAgIGNvbnN0IHNjcmVlbnNob3QgPSBuZXcgQnVmZmVyKHNjcmVlbkJ1ZmZlciwgJ2Jhc2U2NCcpXG4gICAgZnMud3JpdGVGaWxlU3luYyhhYnNvbHV0ZUZpbGVwYXRoLCBzY3JlZW5zaG90KVxuXG4gICAgcmV0dXJuIHNjcmVlbnNob3Rcbn1cbiJdfQ==