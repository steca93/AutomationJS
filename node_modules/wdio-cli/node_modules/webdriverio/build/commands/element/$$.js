"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $$;

require("source-map-support/register");

var _webdriver = require("webdriver");

var _config = require("@wdio/config");

var _utils = require("../../utils");

var _middlewares = require("../../middlewares");

var _constants = require("../../constants");

/**
 * The `$$` command is a short way to call the [`findElements`](/docs/api/webdriver.html#findelements) command in order
 * to fetch multiple elements on the page similar to the `$$` command from the browser scope. The difference when calling
 * it from an element scope is that the driver will look within the children of that element.
 *
 * For more information on how to select specific elements, see [`Selectors`](/docs/selectors.html).
 *
 * <example>
    :index.html
    <ul id="menu">
        <li><a href="/">Home</a></li>
        <li><a href="/">Developer Guide</a></li>
        <li><a href="/">API</a></li>
        <li><a href="/">Contribute</a></li>
    </ul>
    :$.js
    it('should get text a menu link', () => {
        const text = $('#menu');
        console.log(text.$$('li')[2].$('a').getText()); // outputs: "API"
        // same as
        console.log(text.$$('li')[2].getText('a'));
    });
 * </example>
 *
 * @alias $$
 * @param {String} selector  selector to fetch multiple elements
 * @type utility
 *
 */
async function $$(selector) {
  const res = await _utils.findElements.call(this, selector);
  const prototype = Object.assign((0, _webdriver.getPrototype)(this.isW3C), (0, _utils.getPrototype)('element'), {
    scope: 'element'
  });
  const elements = res.map((res, i) => {
    const element = (0, _webdriver.webdriverMonad)(this.options, client => {
      const elementId = (0, _utils.getElementFromResponse)(res);

      if (elementId) {
        /**
         * set elementId for easy access
         */
        client.elementId = elementId;
        /**
         * set element id with proper key so element can be passed into execute commands
         */

        if (this.isW3C) {
          client[_constants.ELEMENT_KEY] = elementId;
        } else {
          client.ELEMENT = elementId;
        }
      } else {
        client.error = res;
      }

      client.selector = selector;
      client.parent = this;
      client.index = i;
      client.emit = this.emit.bind(this);
      return client;
    }, prototype);
    return element(this.sessionId, (0, _middlewares.elementErrorHandler)(_config.wrapCommand));
  });
  return elements;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50LyQkLmpzIl0sIm5hbWVzIjpbIiQkIiwic2VsZWN0b3IiLCJyZXMiLCJmaW5kRWxlbWVudHMiLCJjYWxsIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNXM0MiLCJzY29wZSIsImVsZW1lbnRzIiwibWFwIiwiaSIsImVsZW1lbnQiLCJvcHRpb25zIiwiY2xpZW50IiwiZWxlbWVudElkIiwiRUxFTUVOVF9LRVkiLCJFTEVNRU5UIiwiZXJyb3IiLCJwYXJlbnQiLCJpbmRleCIsImVtaXQiLCJzZXNzaW9uSWQiLCJ3cmFwQ29tbWFuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBNkJBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQWxDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ2UsZUFBZUEsRUFBZixDQUFtQkMsUUFBbkIsRUFBNkI7QUFDeEMsUUFBTUMsR0FBRyxHQUFHLE1BQU1DLG9CQUFhQyxJQUFiLENBQWtCLElBQWxCLEVBQXdCSCxRQUF4QixDQUFsQjtBQUNBLFFBQU1JLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsNkJBQXNCLEtBQUtDLEtBQTNCLENBQWQsRUFBaUQseUJBQWlCLFNBQWpCLENBQWpELEVBQThFO0FBQUVDLElBQUFBLEtBQUssRUFBRTtBQUFULEdBQTlFLENBQWxCO0FBRUEsUUFBTUMsUUFBUSxHQUFHUixHQUFHLENBQUNTLEdBQUosQ0FBUSxDQUFDVCxHQUFELEVBQU1VLENBQU4sS0FBWTtBQUNqQyxVQUFNQyxPQUFPLEdBQUcsK0JBQWUsS0FBS0MsT0FBcEIsRUFBOEJDLE1BQUQsSUFBWTtBQUNyRCxZQUFNQyxTQUFTLEdBQUcsbUNBQXVCZCxHQUF2QixDQUFsQjs7QUFFQSxVQUFJYyxTQUFKLEVBQWU7QUFDWDs7O0FBR0FELFFBQUFBLE1BQU0sQ0FBQ0MsU0FBUCxHQUFtQkEsU0FBbkI7QUFFQTs7OztBQUdBLFlBQUksS0FBS1IsS0FBVCxFQUFnQjtBQUNaTyxVQUFBQSxNQUFNLENBQUNFLHNCQUFELENBQU4sR0FBc0JELFNBQXRCO0FBQ0gsU0FGRCxNQUVPO0FBQ0hELFVBQUFBLE1BQU0sQ0FBQ0csT0FBUCxHQUFpQkYsU0FBakI7QUFDSDtBQUNKLE9BZEQsTUFjTztBQUNIRCxRQUFBQSxNQUFNLENBQUNJLEtBQVAsR0FBZWpCLEdBQWY7QUFDSDs7QUFFRGEsTUFBQUEsTUFBTSxDQUFDZCxRQUFQLEdBQWtCQSxRQUFsQjtBQUNBYyxNQUFBQSxNQUFNLENBQUNLLE1BQVAsR0FBZ0IsSUFBaEI7QUFDQUwsTUFBQUEsTUFBTSxDQUFDTSxLQUFQLEdBQWVULENBQWY7QUFDQUcsTUFBQUEsTUFBTSxDQUFDTyxJQUFQLEdBQWdCLEtBQUtBLElBQXJCLE1BQWdCLElBQWhCO0FBQ0EsYUFBT1AsTUFBUDtBQUNILEtBMUJlLEVBMEJiVixTQTFCYSxDQUFoQjtBQTRCQSxXQUFPUSxPQUFPLENBQUMsS0FBS1UsU0FBTixFQUFpQixzQ0FBb0JDLG1CQUFwQixDQUFqQixDQUFkO0FBQ0gsR0E5QmdCLENBQWpCO0FBZ0NBLFNBQU9kLFFBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGAkJGAgY29tbWFuZCBpcyBhIHNob3J0IHdheSB0byBjYWxsIHRoZSBbYGZpbmRFbGVtZW50c2BdKC9kb2NzL2FwaS93ZWJkcml2ZXIuaHRtbCNmaW5kZWxlbWVudHMpIGNvbW1hbmQgaW4gb3JkZXJcbiAqIHRvIGZldGNoIG11bHRpcGxlIGVsZW1lbnRzIG9uIHRoZSBwYWdlIHNpbWlsYXIgdG8gdGhlIGAkJGAgY29tbWFuZCBmcm9tIHRoZSBicm93c2VyIHNjb3BlLiBUaGUgZGlmZmVyZW5jZSB3aGVuIGNhbGxpbmdcbiAqIGl0IGZyb20gYW4gZWxlbWVudCBzY29wZSBpcyB0aGF0IHRoZSBkcml2ZXIgd2lsbCBsb29rIHdpdGhpbiB0aGUgY2hpbGRyZW4gb2YgdGhhdCBlbGVtZW50LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0byBzZWxlY3Qgc3BlY2lmaWMgZWxlbWVudHMsIHNlZSBbYFNlbGVjdG9yc2BdKC9kb2NzL3NlbGVjdG9ycy5odG1sKS5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6aW5kZXguaHRtbFxuICAgIDx1bCBpZD1cIm1lbnVcIj5cbiAgICAgICAgPGxpPjxhIGhyZWY9XCIvXCI+SG9tZTwvYT48L2xpPlxuICAgICAgICA8bGk+PGEgaHJlZj1cIi9cIj5EZXZlbG9wZXIgR3VpZGU8L2E+PC9saT5cbiAgICAgICAgPGxpPjxhIGhyZWY9XCIvXCI+QVBJPC9hPjwvbGk+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkNvbnRyaWJ1dGU8L2E+PC9saT5cbiAgICA8L3VsPlxuICAgIDokLmpzXG4gICAgaXQoJ3Nob3VsZCBnZXQgdGV4dCBhIG1lbnUgbGluaycsICgpID0+IHtcbiAgICAgICAgY29uc3QgdGV4dCA9ICQoJyNtZW51Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRleHQuJCQoJ2xpJylbMl0uJCgnYScpLmdldFRleHQoKSk7IC8vIG91dHB1dHM6IFwiQVBJXCJcbiAgICAgICAgLy8gc2FtZSBhc1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXh0LiQkKCdsaScpWzJdLmdldFRleHQoJ2EnKSk7XG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzICQkXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgIHNlbGVjdG9yIHRvIGZldGNoIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5pbXBvcnQgeyB3ZWJkcml2ZXJNb25hZCwgZ2V0UHJvdG90eXBlIGFzIGdldFdlYmRyaXZlclByb3RvdHlwZSB9IGZyb20gJ3dlYmRyaXZlcidcbmltcG9ydCB7IHdyYXBDb21tYW5kIH0gZnJvbSAnQHdkaW8vY29uZmlnJ1xuXG5pbXBvcnQgeyBmaW5kRWxlbWVudHMsIGdldFByb3RvdHlwZSBhcyBnZXRXRElPUHJvdG90eXBlLCBnZXRFbGVtZW50RnJvbVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5pbXBvcnQgeyBlbGVtZW50RXJyb3JIYW5kbGVyIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZXMnXG5pbXBvcnQgeyBFTEVNRU5UX0tFWSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gJCQgKHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmluZEVsZW1lbnRzLmNhbGwodGhpcywgc2VsZWN0b3IpXG4gICAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihnZXRXZWJkcml2ZXJQcm90b3R5cGUodGhpcy5pc1czQyksIGdldFdESU9Qcm90b3R5cGUoJ2VsZW1lbnQnKSwgeyBzY29wZTogJ2VsZW1lbnQnIH0pXG5cbiAgICBjb25zdCBlbGVtZW50cyA9IHJlcy5tYXAoKHJlcywgaSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gd2ViZHJpdmVyTW9uYWQodGhpcy5vcHRpb25zLCAoY2xpZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50SWQgPSBnZXRFbGVtZW50RnJvbVJlc3BvbnNlKHJlcylcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnRJZCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIHNldCBlbGVtZW50SWQgZm9yIGVhc3kgYWNjZXNzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY2xpZW50LmVsZW1lbnRJZCA9IGVsZW1lbnRJZFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogc2V0IGVsZW1lbnQgaWQgd2l0aCBwcm9wZXIga2V5IHNvIGVsZW1lbnQgY2FuIGJlIHBhc3NlZCBpbnRvIGV4ZWN1dGUgY29tbWFuZHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1czQykge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRbRUxFTUVOVF9LRVldID0gZWxlbWVudElkXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LkVMRU1FTlQgPSBlbGVtZW50SWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudC5lcnJvciA9IHJlc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGllbnQuc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgICAgICAgICAgY2xpZW50LnBhcmVudCA9IHRoaXNcbiAgICAgICAgICAgIGNsaWVudC5pbmRleCA9IGlcbiAgICAgICAgICAgIGNsaWVudC5lbWl0ID0gOjp0aGlzLmVtaXRcbiAgICAgICAgICAgIHJldHVybiBjbGllbnRcbiAgICAgICAgfSwgcHJvdG90eXBlKVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50KHRoaXMuc2Vzc2lvbklkLCBlbGVtZW50RXJyb3JIYW5kbGVyKHdyYXBDb21tYW5kKSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzXG59XG4iXX0=