"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = $;

require("source-map-support/register");

var _webdriver = require("webdriver");

var _config = require("@wdio/config");

var _utils = require("../../utils");

var _middlewares = require("../../middlewares");

var _constants = require("../../constants");

/**
 * The `$` command is a short way to call the [`findElement`](/docs/api/webdriver.html#findelement) command in order
 * to fetch a single element on the page similar to the `$` command from the browser scope. The difference when calling
 * it from an element scope is that the driver will look within the children of that element.
 *
 * Note: chaining `$` and `$$` commands only make sense when you use multiple selector strategies. You will otherwise
 * make unnecessary requests that slow down the test (e.g. `$('body').$('div')` will trigger two request whereas
 * `$('body div')` does literary the same with just one request)
 *
 * For more information on how to select specific elements, see [`Selectors`](/docs/selectors.html).
 *
 * <example>
    :index.html
    <ul id="menu">
        <li><a href="/">Home</a></li>
        <li><a href="/">Developer Guide</a></li>
        <li><a href="/">API</a></li>
        <li><a href="/">Contribute</a></li>
    </ul>
    :$.js
    it('should get text a menu link', () => {
        const text = $('#menu');
        console.log(text.$$('li')[2].$('a').getText()); // outputs: "API"
        // same as
        console.log(text.$$('li')[2].getText('a'));
    });
 * </example>
 *
 * @alias $
 * @param {String} selector  selector to fetch a certain element
 * @type utility
 *
 */
async function $(selector) {
  const res = await _utils.findElement.call(this, selector);
  const prototype = Object.assign((0, _webdriver.getPrototype)(this.isW3C), (0, _utils.getPrototype)('element'), {
    scope: 'element'
  });
  const element = (0, _webdriver.webdriverMonad)(this.options, client => {
    const elementId = (0, _utils.getElementFromResponse)(res);

    if (elementId) {
      /**
       * set elementId for easy access
       */
      client.elementId = elementId;
      /**
       * set element id with proper key so element can be passed into execute commands
       */

      if (this.isW3C) {
        client[_constants.ELEMENT_KEY] = elementId;
      } else {
        client.ELEMENT = elementId;
      }
    } else {
      client.error = res;
    }

    client.selector = selector;
    client.parent = this;
    client.emit = this.emit.bind(this);
    return client;
  }, prototype);
  return element(this.sessionId, (0, _middlewares.elementErrorHandler)(_config.wrapCommand));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50LyQuanMiXSwibmFtZXMiOlsiJCIsInNlbGVjdG9yIiwicmVzIiwiZmluZEVsZW1lbnQiLCJjYWxsIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNXM0MiLCJzY29wZSIsImVsZW1lbnQiLCJvcHRpb25zIiwiY2xpZW50IiwiZWxlbWVudElkIiwiRUxFTUVOVF9LRVkiLCJFTEVNRU5UIiwiZXJyb3IiLCJwYXJlbnQiLCJlbWl0Iiwic2Vzc2lvbklkIiwid3JhcENvbW1hbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWlDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUF0Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDZSxlQUFlQSxDQUFmLENBQWtCQyxRQUFsQixFQUE0QjtBQUN2QyxRQUFNQyxHQUFHLEdBQUcsTUFBTUMsbUJBQVlDLElBQVosQ0FBaUIsSUFBakIsRUFBdUJILFFBQXZCLENBQWxCO0FBQ0EsUUFBTUksU0FBUyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyw2QkFBc0IsS0FBS0MsS0FBM0IsQ0FBZCxFQUFpRCx5QkFBaUIsU0FBakIsQ0FBakQsRUFBOEU7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBOUUsQ0FBbEI7QUFDQSxRQUFNQyxPQUFPLEdBQUcsK0JBQWUsS0FBS0MsT0FBcEIsRUFBOEJDLE1BQUQsSUFBWTtBQUNyRCxVQUFNQyxTQUFTLEdBQUcsbUNBQXVCWCxHQUF2QixDQUFsQjs7QUFFQSxRQUFJVyxTQUFKLEVBQWU7QUFDWDs7O0FBR0FELE1BQUFBLE1BQU0sQ0FBQ0MsU0FBUCxHQUFtQkEsU0FBbkI7QUFFQTs7OztBQUdBLFVBQUksS0FBS0wsS0FBVCxFQUFnQjtBQUNaSSxRQUFBQSxNQUFNLENBQUNFLHNCQUFELENBQU4sR0FBc0JELFNBQXRCO0FBQ0gsT0FGRCxNQUVPO0FBQ0hELFFBQUFBLE1BQU0sQ0FBQ0csT0FBUCxHQUFpQkYsU0FBakI7QUFDSDtBQUNKLEtBZEQsTUFjTztBQUNIRCxNQUFBQSxNQUFNLENBQUNJLEtBQVAsR0FBZWQsR0FBZjtBQUNIOztBQUVEVSxJQUFBQSxNQUFNLENBQUNYLFFBQVAsR0FBa0JBLFFBQWxCO0FBQ0FXLElBQUFBLE1BQU0sQ0FBQ0ssTUFBUCxHQUFnQixJQUFoQjtBQUNBTCxJQUFBQSxNQUFNLENBQUNNLElBQVAsR0FBZ0IsS0FBS0EsSUFBckIsTUFBZ0IsSUFBaEI7QUFDQSxXQUFPTixNQUFQO0FBQ0gsR0F6QmUsRUF5QmJQLFNBekJhLENBQWhCO0FBMkJBLFNBQU9LLE9BQU8sQ0FBQyxLQUFLUyxTQUFOLEVBQWlCLHNDQUFvQkMsbUJBQXBCLENBQWpCLENBQWQ7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGAkYCBjb21tYW5kIGlzIGEgc2hvcnQgd2F5IHRvIGNhbGwgdGhlIFtgZmluZEVsZW1lbnRgXSgvZG9jcy9hcGkvd2ViZHJpdmVyLmh0bWwjZmluZGVsZW1lbnQpIGNvbW1hbmQgaW4gb3JkZXJcbiAqIHRvIGZldGNoIGEgc2luZ2xlIGVsZW1lbnQgb24gdGhlIHBhZ2Ugc2ltaWxhciB0byB0aGUgYCRgIGNvbW1hbmQgZnJvbSB0aGUgYnJvd3NlciBzY29wZS4gVGhlIGRpZmZlcmVuY2Ugd2hlbiBjYWxsaW5nXG4gKiBpdCBmcm9tIGFuIGVsZW1lbnQgc2NvcGUgaXMgdGhhdCB0aGUgZHJpdmVyIHdpbGwgbG9vayB3aXRoaW4gdGhlIGNoaWxkcmVuIG9mIHRoYXQgZWxlbWVudC5cbiAqXG4gKiBOb3RlOiBjaGFpbmluZyBgJGAgYW5kIGAkJGAgY29tbWFuZHMgb25seSBtYWtlIHNlbnNlIHdoZW4geW91IHVzZSBtdWx0aXBsZSBzZWxlY3RvciBzdHJhdGVnaWVzLiBZb3Ugd2lsbCBvdGhlcndpc2VcbiAqIG1ha2UgdW5uZWNlc3NhcnkgcmVxdWVzdHMgdGhhdCBzbG93IGRvd24gdGhlIHRlc3QgKGUuZy4gYCQoJ2JvZHknKS4kKCdkaXYnKWAgd2lsbCB0cmlnZ2VyIHR3byByZXF1ZXN0IHdoZXJlYXNcbiAqIGAkKCdib2R5IGRpdicpYCBkb2VzIGxpdGVyYXJ5IHRoZSBzYW1lIHdpdGgganVzdCBvbmUgcmVxdWVzdClcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gc2VsZWN0IHNwZWNpZmljIGVsZW1lbnRzLCBzZWUgW2BTZWxlY3RvcnNgXSgvZG9jcy9zZWxlY3RvcnMuaHRtbCkuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8dWwgaWQ9XCJtZW51XCI+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkhvbWU8L2E+PC9saT5cbiAgICAgICAgPGxpPjxhIGhyZWY9XCIvXCI+RGV2ZWxvcGVyIEd1aWRlPC9hPjwvbGk+XG4gICAgICAgIDxsaT48YSBocmVmPVwiL1wiPkFQSTwvYT48L2xpPlxuICAgICAgICA8bGk+PGEgaHJlZj1cIi9cIj5Db250cmlidXRlPC9hPjwvbGk+XG4gICAgPC91bD5cbiAgICA6JC5qc1xuICAgIGl0KCdzaG91bGQgZ2V0IHRleHQgYSBtZW51IGxpbmsnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRleHQgPSAkKCcjbWVudScpO1xuICAgICAgICBjb25zb2xlLmxvZyh0ZXh0LiQkKCdsaScpWzJdLiQoJ2EnKS5nZXRUZXh0KCkpOyAvLyBvdXRwdXRzOiBcIkFQSVwiXG4gICAgICAgIC8vIHNhbWUgYXNcbiAgICAgICAgY29uc29sZS5sb2codGV4dC4kJCgnbGknKVsyXS5nZXRUZXh0KCdhJykpO1xuICAgIH0pO1xuICogPC9leGFtcGxlPlxuICpcbiAqIEBhbGlhcyAkXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgIHNlbGVjdG9yIHRvIGZldGNoIGEgY2VydGFpbiBlbGVtZW50XG4gKiBAdHlwZSB1dGlsaXR5XG4gKlxuICovXG5pbXBvcnQgeyB3ZWJkcml2ZXJNb25hZCwgZ2V0UHJvdG90eXBlIGFzIGdldFdlYmRyaXZlclByb3RvdHlwZSB9IGZyb20gJ3dlYmRyaXZlcidcbmltcG9ydCB7IHdyYXBDb21tYW5kIH0gZnJvbSAnQHdkaW8vY29uZmlnJ1xuXG5pbXBvcnQgeyBmaW5kRWxlbWVudCwgZ2V0UHJvdG90eXBlIGFzIGdldFdESU9Qcm90b3R5cGUsIGdldEVsZW1lbnRGcm9tUmVzcG9uc2UgfSBmcm9tICcuLi8uLi91dGlscydcbmltcG9ydCB7IGVsZW1lbnRFcnJvckhhbmRsZXIgfSBmcm9tICcuLi8uLi9taWRkbGV3YXJlcydcbmltcG9ydCB7IEVMRU1FTlRfS0VZIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAkIChzZWxlY3Rvcikge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZpbmRFbGVtZW50LmNhbGwodGhpcywgc2VsZWN0b3IpXG4gICAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihnZXRXZWJkcml2ZXJQcm90b3R5cGUodGhpcy5pc1czQyksIGdldFdESU9Qcm90b3R5cGUoJ2VsZW1lbnQnKSwgeyBzY29wZTogJ2VsZW1lbnQnIH0pXG4gICAgY29uc3QgZWxlbWVudCA9IHdlYmRyaXZlck1vbmFkKHRoaXMub3B0aW9ucywgKGNsaWVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50SWQgPSBnZXRFbGVtZW50RnJvbVJlc3BvbnNlKHJlcylcblxuICAgICAgICBpZiAoZWxlbWVudElkKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHNldCBlbGVtZW50SWQgZm9yIGVhc3kgYWNjZXNzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNsaWVudC5lbGVtZW50SWQgPSBlbGVtZW50SWRcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBzZXQgZWxlbWVudCBpZCB3aXRoIHByb3BlciBrZXkgc28gZWxlbWVudCBjYW4gYmUgcGFzc2VkIGludG8gZXhlY3V0ZSBjb21tYW5kc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5pc1czQykge1xuICAgICAgICAgICAgICAgIGNsaWVudFtFTEVNRU5UX0tFWV0gPSBlbGVtZW50SWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LkVMRU1FTlQgPSBlbGVtZW50SWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsaWVudC5lcnJvciA9IHJlc1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpZW50LnNlbGVjdG9yID0gc2VsZWN0b3JcbiAgICAgICAgY2xpZW50LnBhcmVudCA9IHRoaXNcbiAgICAgICAgY2xpZW50LmVtaXQgPSA6OnRoaXMuZW1pdFxuICAgICAgICByZXR1cm4gY2xpZW50XG4gICAgfSwgcHJvdG90eXBlKVxuXG4gICAgcmV0dXJuIGVsZW1lbnQodGhpcy5zZXNzaW9uSWQsIGVsZW1lbnRFcnJvckhhbmRsZXIod3JhcENvbW1hbmQpKVxufVxuIl19