"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getText;

require("source-map-support/register");

/**
 *
 * Get the text content from a DOM-element. Make sure the element
 * you want to request the text from [is interactable](http://www.w3.org/TR/webdriver/#interactable)
 * otherwise you will get an empty string as return value. If the element is disabled or not
 * visible and you still want to receive the text content use [getHTML](http://webdriver.io/docs/api/element/getHTML.html)
 * as a workaround.
 *
 * <example>
    :index.html
    <div id="elem">
        Lorem ipsum <strong>dolor</strong> sit amet,<br>
        consetetur sadipscing elitr
    </div>
    <span style="display: none">I am invisible</span>
    :getText.js
    it('should demonstrate the getText function', () => {
        const elem = $('#elem');
        console.log(elem.getText());
        // outputs the following:
        // "Lorem ipsum dolor sit amet,consetetur sadipscing elitr"

        const span = $('span');
        console.log(span.getText());
        // outputs "" (empty string) since element is not interactable
    });
    it('get content from table cell', () => {
        browser.url('http://the-internet.herokuapp.com/tables');
        const rows = $$('#table1 tr');
        const columns = rows[1].$$('td'); // get columns of 2nd row
        console.log(columns[2].getText()); // get text of 3rd column
    });
 * </example>
 *
 * @alias element.getText
 * @return {String} content of selected element (all HTML tags are removed)
 * @uses protocol/elements, protocol/elementIdText
 * @type property
 *
 */
function getText() {
  return this.getElementText(this.elementId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L2dldFRleHQuanMiXSwibmFtZXMiOlsiZ2V0VGV4dCIsImdldEVsZW1lbnRUZXh0IiwiZWxlbWVudElkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDZSxTQUFTQSxPQUFULEdBQW9CO0FBQy9CLFNBQU8sS0FBS0MsY0FBTCxDQUFvQixLQUFLQyxTQUF6QixDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBHZXQgdGhlIHRleHQgY29udGVudCBmcm9tIGEgRE9NLWVsZW1lbnQuIE1ha2Ugc3VyZSB0aGUgZWxlbWVudFxuICogeW91IHdhbnQgdG8gcmVxdWVzdCB0aGUgdGV4dCBmcm9tIFtpcyBpbnRlcmFjdGFibGVdKGh0dHA6Ly93d3cudzMub3JnL1RSL3dlYmRyaXZlci8jaW50ZXJhY3RhYmxlKVxuICogb3RoZXJ3aXNlIHlvdSB3aWxsIGdldCBhbiBlbXB0eSBzdHJpbmcgYXMgcmV0dXJuIHZhbHVlLiBJZiB0aGUgZWxlbWVudCBpcyBkaXNhYmxlZCBvciBub3RcbiAqIHZpc2libGUgYW5kIHlvdSBzdGlsbCB3YW50IHRvIHJlY2VpdmUgdGhlIHRleHQgY29udGVudCB1c2UgW2dldEhUTUxdKGh0dHA6Ly93ZWJkcml2ZXIuaW8vZG9jcy9hcGkvZWxlbWVudC9nZXRIVE1MLmh0bWwpXG4gKiBhcyBhIHdvcmthcm91bmQuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8ZGl2IGlkPVwiZWxlbVwiPlxuICAgICAgICBMb3JlbSBpcHN1bSA8c3Ryb25nPmRvbG9yPC9zdHJvbmc+IHNpdCBhbWV0LDxicj5cbiAgICAgICAgY29uc2V0ZXR1ciBzYWRpcHNjaW5nIGVsaXRyXG4gICAgPC9kaXY+XG4gICAgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OiBub25lXCI+SSBhbSBpbnZpc2libGU8L3NwYW4+XG4gICAgOmdldFRleHQuanNcbiAgICBpdCgnc2hvdWxkIGRlbW9uc3RyYXRlIHRoZSBnZXRUZXh0IGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtID0gJCgnI2VsZW0nKTtcbiAgICAgICAgY29uc29sZS5sb2coZWxlbS5nZXRUZXh0KCkpO1xuICAgICAgICAvLyBvdXRwdXRzIHRoZSBmb2xsb3dpbmc6XG4gICAgICAgIC8vIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsY29uc2V0ZXR1ciBzYWRpcHNjaW5nIGVsaXRyXCJcblxuICAgICAgICBjb25zdCBzcGFuID0gJCgnc3BhbicpO1xuICAgICAgICBjb25zb2xlLmxvZyhzcGFuLmdldFRleHQoKSk7XG4gICAgICAgIC8vIG91dHB1dHMgXCJcIiAoZW1wdHkgc3RyaW5nKSBzaW5jZSBlbGVtZW50IGlzIG5vdCBpbnRlcmFjdGFibGVcbiAgICB9KTtcbiAgICBpdCgnZ2V0IGNvbnRlbnQgZnJvbSB0YWJsZSBjZWxsJywgKCkgPT4ge1xuICAgICAgICBicm93c2VyLnVybCgnaHR0cDovL3RoZS1pbnRlcm5ldC5oZXJva3VhcHAuY29tL3RhYmxlcycpO1xuICAgICAgICBjb25zdCByb3dzID0gJCQoJyN0YWJsZTEgdHInKTtcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IHJvd3NbMV0uJCQoJ3RkJyk7IC8vIGdldCBjb2x1bW5zIG9mIDJuZCByb3dcbiAgICAgICAgY29uc29sZS5sb2coY29sdW1uc1syXS5nZXRUZXh0KCkpOyAvLyBnZXQgdGV4dCBvZiAzcmQgY29sdW1uXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzIGVsZW1lbnQuZ2V0VGV4dFxuICogQHJldHVybiB7U3RyaW5nfSBjb250ZW50IG9mIHNlbGVjdGVkIGVsZW1lbnQgKGFsbCBIVE1MIHRhZ3MgYXJlIHJlbW92ZWQpXG4gKiBAdXNlcyBwcm90b2NvbC9lbGVtZW50cywgcHJvdG9jb2wvZWxlbWVudElkVGV4dFxuICogQHR5cGUgcHJvcGVydHlcbiAqXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGV4dCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudFRleHQodGhpcy5lbGVtZW50SWQpXG59XG4iXX0=