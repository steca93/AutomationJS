"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitForEnabled;

require("source-map-support/register");

/**
 *
 * Wait for an element (selected by css selector) for the provided amount of
 * milliseconds to be (dis/en)abled. If multiple elements get queried by given
 * selector, it returns true (or false if reverse flag is set) if at least one
 * element is (dis/en)abled.
 *
 * <example>
    :index.html
    <input type="text" id="username" value="foobar" disabled="disabled"></input>
    <script type="text/javascript">
        setTimeout(() => {
            document.getElementById('username').disabled = false
        }, 2000);
    </script>
    :waitForEnabledExample.js
    it('should detect when element is enabled', () => {
        $('#username').waitForEnabled(3000);
    });

    it('should detect when element is disabled', () => {
        elem = $('#username');
        elem.waitForEnabled(3000, true)
    });
 * </example>
 *
 * @alias element.waitForEnabled
 * @param {Number=}  ms       time in ms (default: 500)
 * @param {Boolean=} reverse  if true it waits for the opposite (default: false)
 * @uses utility/waitUntil, state/isEnabled
 * @type utility
 *
 */
async function waitForEnabled(ms, reverse = false) {
  // If the element doesn't already exist, wait for it to exist
  if (!this.elementId && !reverse) {
    await this.waitForExist(ms);
  }

  if (typeof ms !== 'number') {
    ms = this.options.waitforTimeout;
  }

  const isReversed = reverse ? '' : 'not ';
  const errorMessage = `element ("${this.selector}") still ${isReversed}enabled after ${ms}ms`;
  return this.waitUntil(async () => {
    const isEnabled = await this.isEnabled();
    return isEnabled !== reverse;
  }, ms, errorMessage);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L3dhaXRGb3JFbmFibGVkLmpzIl0sIm5hbWVzIjpbIndhaXRGb3JFbmFibGVkIiwibXMiLCJyZXZlcnNlIiwiZWxlbWVudElkIiwid2FpdEZvckV4aXN0Iiwib3B0aW9ucyIsIndhaXRmb3JUaW1lb3V0IiwiaXNSZXZlcnNlZCIsImVycm9yTWVzc2FnZSIsInNlbGVjdG9yIiwid2FpdFVudGlsIiwiaXNFbmFibGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0NlLGVBQWVBLGNBQWYsQ0FBOEJDLEVBQTlCLEVBQWtDQyxPQUFPLEdBQUcsS0FBNUMsRUFBbUQ7QUFDOUQ7QUFDQSxNQUFJLENBQUMsS0FBS0MsU0FBTixJQUFtQixDQUFDRCxPQUF4QixFQUFpQztBQUM3QixVQUFNLEtBQUtFLFlBQUwsQ0FBa0JILEVBQWxCLENBQU47QUFDSDs7QUFFRCxNQUFJLE9BQU9BLEVBQVAsS0FBYyxRQUFsQixFQUE0QjtBQUN4QkEsSUFBQUEsRUFBRSxHQUFHLEtBQUtJLE9BQUwsQ0FBYUMsY0FBbEI7QUFDSDs7QUFFRCxRQUFNQyxVQUFVLEdBQUdMLE9BQU8sR0FBRyxFQUFILEdBQVEsTUFBbEM7QUFDQSxRQUFNTSxZQUFZLEdBQUksYUFBWSxLQUFLQyxRQUFTLFlBQVdGLFVBQVcsaUJBQWdCTixFQUFHLElBQXpGO0FBRUEsU0FBTyxLQUFLUyxTQUFMLENBQWUsWUFBWTtBQUM5QixVQUFNQyxTQUFTLEdBQUcsTUFBTSxLQUFLQSxTQUFMLEVBQXhCO0FBRUEsV0FBT0EsU0FBUyxLQUFLVCxPQUFyQjtBQUNILEdBSk0sRUFJSkQsRUFKSSxFQUlBTyxZQUpBLENBQVA7QUFLSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIFdhaXQgZm9yIGFuIGVsZW1lbnQgKHNlbGVjdGVkIGJ5IGNzcyBzZWxlY3RvcikgZm9yIHRoZSBwcm92aWRlZCBhbW91bnQgb2ZcbiAqIG1pbGxpc2Vjb25kcyB0byBiZSAoZGlzL2VuKWFibGVkLiBJZiBtdWx0aXBsZSBlbGVtZW50cyBnZXQgcXVlcmllZCBieSBnaXZlblxuICogc2VsZWN0b3IsIGl0IHJldHVybnMgdHJ1ZSAob3IgZmFsc2UgaWYgcmV2ZXJzZSBmbGFnIGlzIHNldCkgaWYgYXQgbGVhc3Qgb25lXG4gKiBlbGVtZW50IGlzIChkaXMvZW4pYWJsZWQuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInVzZXJuYW1lXCIgdmFsdWU9XCJmb29iYXJcIiBkaXNhYmxlZD1cImRpc2FibGVkXCI+PC9pbnB1dD5cbiAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXNlcm5hbWUnKS5kaXNhYmxlZCA9IGZhbHNlXG4gICAgICAgIH0sIDIwMDApO1xuICAgIDwvc2NyaXB0PlxuICAgIDp3YWl0Rm9yRW5hYmxlZEV4YW1wbGUuanNcbiAgICBpdCgnc2hvdWxkIGRldGVjdCB3aGVuIGVsZW1lbnQgaXMgZW5hYmxlZCcsICgpID0+IHtcbiAgICAgICAgJCgnI3VzZXJuYW1lJykud2FpdEZvckVuYWJsZWQoMzAwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRldGVjdCB3aGVuIGVsZW1lbnQgaXMgZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgICAgIGVsZW0gPSAkKCcjdXNlcm5hbWUnKTtcbiAgICAgICAgZWxlbS53YWl0Rm9yRW5hYmxlZCgzMDAwLCB0cnVlKVxuICAgIH0pO1xuICogPC9leGFtcGxlPlxuICpcbiAqIEBhbGlhcyBlbGVtZW50LndhaXRGb3JFbmFibGVkXG4gKiBAcGFyYW0ge051bWJlcj19ICBtcyAgICAgICB0aW1lIGluIG1zIChkZWZhdWx0OiA1MDApXG4gKiBAcGFyYW0ge0Jvb2xlYW49fSByZXZlcnNlICBpZiB0cnVlIGl0IHdhaXRzIGZvciB0aGUgb3Bwb3NpdGUgKGRlZmF1bHQ6IGZhbHNlKVxuICogQHVzZXMgdXRpbGl0eS93YWl0VW50aWwsIHN0YXRlL2lzRW5hYmxlZFxuICogQHR5cGUgdXRpbGl0eVxuICpcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRW5hYmxlZChtcywgcmV2ZXJzZSA9IGZhbHNlKSB7XG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LCB3YWl0IGZvciBpdCB0byBleGlzdFxuICAgIGlmICghdGhpcy5lbGVtZW50SWQgJiYgIXJldmVyc2UpIHtcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yRXhpc3QobXMpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBtcyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgbXMgPSB0aGlzLm9wdGlvbnMud2FpdGZvclRpbWVvdXRcbiAgICB9XG5cbiAgICBjb25zdCBpc1JldmVyc2VkID0gcmV2ZXJzZSA/ICcnIDogJ25vdCAnXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYGVsZW1lbnQgKFwiJHt0aGlzLnNlbGVjdG9yfVwiKSBzdGlsbCAke2lzUmV2ZXJzZWR9ZW5hYmxlZCBhZnRlciAke21zfW1zYFxuXG4gICAgcmV0dXJuIHRoaXMud2FpdFVudGlsKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaXNFbmFibGVkID0gYXdhaXQgdGhpcy5pc0VuYWJsZWQoKVxuXG4gICAgICAgIHJldHVybiBpc0VuYWJsZWQgIT09IHJldmVyc2VcbiAgICB9LCBtcywgZXJyb3JNZXNzYWdlKVxufVxuIl19