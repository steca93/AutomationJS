"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = doubleClick;

require("source-map-support/register");

/**
 *
 * Double-click on an element.
 *
 * <example>
    :example.html
    <button id="myButton" ondblclick="document.getElementById('someText').innerHTML='I was dblclicked'">Click me</button>
    <div id="someText">I was not clicked</div>
    :doubleClick.js
    it('should demonstrate the doubleClick command', () => {
        const myButton = $('#myButton')
        myButton.doubleClick()

        const value = myButton.getText()
        assert(value === 'I was dblclicked') // true
    })
 * </example>
 *
 * @alias element.doubleClick
 * @param {String} selector  element to double click on. If it matches with more than one DOM-element it automatically clicks on the first element
 * @uses protocol/element, protocol/moveTo, protocol/doDoubleClick, protocol/touchDoubleClick
 * @type action
 *
 */
async function doubleClick() {
  /**
   * move to element
   */
  await this.moveTo();

  if (!this.isW3C) {
    return this.positionDoubleClick();
  }
  /**
   * W3C way of handle the double click actions
   */


  await this.performActions([{
    type: 'pointer',
    id: 'pointer1',
    parameters: {
      pointerType: 'mouse'
    },
    actions: [{
      type: 'pointerDown',
      button: 0
    }, {
      type: 'pointerUp',
      button: 0
    }, {
      type: 'pause',
      duration: 10
    }, {
      type: 'pointerDown',
      button: 0
    }, {
      type: 'pointerUp',
      button: 0
    }]
  }]);
  return this.releaseActions();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L2RvdWJsZUNsaWNrLmpzIl0sIm5hbWVzIjpbImRvdWJsZUNsaWNrIiwibW92ZVRvIiwiaXNXM0MiLCJwb3NpdGlvbkRvdWJsZUNsaWNrIiwicGVyZm9ybUFjdGlvbnMiLCJ0eXBlIiwiaWQiLCJwYXJhbWV0ZXJzIiwicG9pbnRlclR5cGUiLCJhY3Rpb25zIiwiYnV0dG9uIiwiZHVyYXRpb24iLCJyZWxlYXNlQWN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCZSxlQUFlQSxXQUFmLEdBQThCO0FBQ3pDOzs7QUFHQSxRQUFNLEtBQUtDLE1BQUwsRUFBTjs7QUFFQSxNQUFJLENBQUMsS0FBS0MsS0FBVixFQUFpQjtBQUNiLFdBQU8sS0FBS0MsbUJBQUwsRUFBUDtBQUNIO0FBRUQ7Ozs7O0FBR0EsUUFBTSxLQUFLQyxjQUFMLENBQW9CLENBQUM7QUFDdkJDLElBQUFBLElBQUksRUFBRSxTQURpQjtBQUV2QkMsSUFBQUEsRUFBRSxFQUFFLFVBRm1CO0FBR3ZCQyxJQUFBQSxVQUFVLEVBQUU7QUFBRUMsTUFBQUEsV0FBVyxFQUFFO0FBQWYsS0FIVztBQUl2QkMsSUFBQUEsT0FBTyxFQUFFLENBQ0w7QUFBQ0osTUFBQUEsSUFBSSxFQUFFLGFBQVA7QUFBc0JLLE1BQUFBLE1BQU0sRUFBRTtBQUE5QixLQURLLEVBRUw7QUFBQ0wsTUFBQUEsSUFBSSxFQUFFLFdBQVA7QUFBb0JLLE1BQUFBLE1BQU0sRUFBRTtBQUE1QixLQUZLLEVBR0w7QUFBQ0wsTUFBQUEsSUFBSSxFQUFFLE9BQVA7QUFBZ0JNLE1BQUFBLFFBQVEsRUFBRTtBQUExQixLQUhLLEVBSUw7QUFBQ04sTUFBQUEsSUFBSSxFQUFFLGFBQVA7QUFBc0JLLE1BQUFBLE1BQU0sRUFBRTtBQUE5QixLQUpLLEVBS0w7QUFBQ0wsTUFBQUEsSUFBSSxFQUFFLFdBQVA7QUFBb0JLLE1BQUFBLE1BQU0sRUFBRTtBQUE1QixLQUxLO0FBSmMsR0FBRCxDQUFwQixDQUFOO0FBYUEsU0FBTyxLQUFLRSxjQUFMLEVBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIERvdWJsZS1jbGljayBvbiBhbiBlbGVtZW50LlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpleGFtcGxlLmh0bWxcbiAgICA8YnV0dG9uIGlkPVwibXlCdXR0b25cIiBvbmRibGNsaWNrPVwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvbWVUZXh0JykuaW5uZXJIVE1MPSdJIHdhcyBkYmxjbGlja2VkJ1wiPkNsaWNrIG1lPC9idXR0b24+XG4gICAgPGRpdiBpZD1cInNvbWVUZXh0XCI+SSB3YXMgbm90IGNsaWNrZWQ8L2Rpdj5cbiAgICA6ZG91YmxlQ2xpY2suanNcbiAgICBpdCgnc2hvdWxkIGRlbW9uc3RyYXRlIHRoZSBkb3VibGVDbGljayBjb21tYW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBteUJ1dHRvbiA9ICQoJyNteUJ1dHRvbicpXG4gICAgICAgIG15QnV0dG9uLmRvdWJsZUNsaWNrKClcblxuICAgICAgICBjb25zdCB2YWx1ZSA9IG15QnV0dG9uLmdldFRleHQoKVxuICAgICAgICBhc3NlcnQodmFsdWUgPT09ICdJIHdhcyBkYmxjbGlja2VkJykgLy8gdHJ1ZVxuICAgIH0pXG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzIGVsZW1lbnQuZG91YmxlQ2xpY2tcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAgZWxlbWVudCB0byBkb3VibGUgY2xpY2sgb24uIElmIGl0IG1hdGNoZXMgd2l0aCBtb3JlIHRoYW4gb25lIERPTS1lbGVtZW50IGl0IGF1dG9tYXRpY2FsbHkgY2xpY2tzIG9uIHRoZSBmaXJzdCBlbGVtZW50XG4gKiBAdXNlcyBwcm90b2NvbC9lbGVtZW50LCBwcm90b2NvbC9tb3ZlVG8sIHByb3RvY29sL2RvRG91YmxlQ2xpY2ssIHByb3RvY29sL3RvdWNoRG91YmxlQ2xpY2tcbiAqIEB0eXBlIGFjdGlvblxuICpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZG91YmxlQ2xpY2sgKCkge1xuICAgIC8qKlxuICAgICAqIG1vdmUgdG8gZWxlbWVudFxuICAgICAqL1xuICAgIGF3YWl0IHRoaXMubW92ZVRvKClcblxuICAgIGlmICghdGhpcy5pc1czQykge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbkRvdWJsZUNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXM0Mgd2F5IG9mIGhhbmRsZSB0aGUgZG91YmxlIGNsaWNrIGFjdGlvbnNcbiAgICAgKi9cbiAgICBhd2FpdCB0aGlzLnBlcmZvcm1BY3Rpb25zKFt7XG4gICAgICAgIHR5cGU6ICdwb2ludGVyJyxcbiAgICAgICAgaWQ6ICdwb2ludGVyMScsXG4gICAgICAgIHBhcmFtZXRlcnM6IHsgcG9pbnRlclR5cGU6ICdtb3VzZScgfSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge3R5cGU6ICdwb2ludGVyRG93bicsIGJ1dHRvbjogMH0sXG4gICAgICAgICAgICB7dHlwZTogJ3BvaW50ZXJVcCcsIGJ1dHRvbjogMH0sXG4gICAgICAgICAgICB7dHlwZTogJ3BhdXNlJywgZHVyYXRpb246IDEwfSxcbiAgICAgICAgICAgIHt0eXBlOiAncG9pbnRlckRvd24nLCBidXR0b246IDB9LFxuICAgICAgICAgICAge3R5cGU6ICdwb2ludGVyVXAnLCBidXR0b246IDB9XG4gICAgICAgIF1cbiAgICB9XSlcblxuICAgIHJldHVybiB0aGlzLnJlbGVhc2VBY3Rpb25zKClcbn1cbiJdfQ==