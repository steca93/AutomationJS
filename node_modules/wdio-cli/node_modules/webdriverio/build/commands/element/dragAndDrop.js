"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dragAndDrop;

require("source-map-support/register");

/**
 *
 * Drag an item to a destination element.
 *
 * @alias element.dragAndDrop
 * @param {Element} target    destination selector
 * @param {Number}  duration  how long the drag should take place
 * @uses action/moveToObject, protocol/buttonDown, protocol/buttonUp, property/getLocation, protocol/touchDown, protocol/touchMove, protocol/touchUp
 * @type action
 *
 */
const ACTION_BUTTON = 0;

async function dragAndDrop(target, duration = 100) {
  if (!target || target.constructor.name !== 'Element') {
    throw new Error('command dragAndDrop requires an WebdriverIO Element as first parameter');
  }

  if (!this.isW3C) {
    await this.moveTo();
    await this.buttonDown(ACTION_BUTTON);
    await target.moveTo();
    return this.buttonUp(ACTION_BUTTON);
  }
  /**
   * get coordinates to drag and drop
   */


  const sourceRect = await this.getElementRect(this.elementId);
  const targetRect = await this.getElementRect(target.elementId);
  const sourceX = parseInt(sourceRect.x + sourceRect.width / 2, 10);
  const sourceY = parseInt(sourceRect.y + sourceRect.height / 2, 10);
  const targetX = parseInt(targetRect.x + targetRect.width / 2, 10) - sourceX;
  const targetY = parseInt(targetRect.y + targetRect.height / 2, 10) - sourceY;
  /**
   * W3C way of handle the drag and drop action
   */

  return this.performActions([{
    type: 'pointer',
    id: 'finger1',
    parameters: {
      pointerType: 'mouse'
    },
    actions: [{
      type: "pointerMove",
      duration: 0,
      x: sourceX,
      y: sourceY
    }, {
      type: "pointerDown",
      button: ACTION_BUTTON
    }, {
      type: "pause",
      duration: 10
    }, // emulate human pause
    {
      type: "pointerMove",
      duration,
      origin: "pointer",
      x: targetX,
      y: targetY
    }, {
      type: "pointerUp",
      button: ACTION_BUTTON
    }]
  }]).then(() => this.releaseActions());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lbGVtZW50L2RyYWdBbmREcm9wLmpzIl0sIm5hbWVzIjpbIkFDVElPTl9CVVRUT04iLCJkcmFnQW5kRHJvcCIsInRhcmdldCIsImR1cmF0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiRXJyb3IiLCJpc1czQyIsIm1vdmVUbyIsImJ1dHRvbkRvd24iLCJidXR0b25VcCIsInNvdXJjZVJlY3QiLCJnZXRFbGVtZW50UmVjdCIsImVsZW1lbnRJZCIsInRhcmdldFJlY3QiLCJzb3VyY2VYIiwicGFyc2VJbnQiLCJ4Iiwid2lkdGgiLCJzb3VyY2VZIiwieSIsImhlaWdodCIsInRhcmdldFgiLCJ0YXJnZXRZIiwicGVyZm9ybUFjdGlvbnMiLCJ0eXBlIiwiaWQiLCJwYXJhbWV0ZXJzIiwicG9pbnRlclR5cGUiLCJhY3Rpb25zIiwiYnV0dG9uIiwib3JpZ2luIiwidGhlbiIsInJlbGVhc2VBY3Rpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7QUFZQSxNQUFNQSxhQUFhLEdBQUcsQ0FBdEI7O0FBRWUsZUFBZUMsV0FBZixDQUE0QkMsTUFBNUIsRUFBb0NDLFFBQVEsR0FBRyxHQUEvQyxFQUFvRDtBQUMvRCxNQUFJLENBQUNELE1BQUQsSUFBV0EsTUFBTSxDQUFDRSxXQUFQLENBQW1CQyxJQUFuQixLQUE0QixTQUEzQyxFQUFzRDtBQUNsRCxVQUFNLElBQUlDLEtBQUosQ0FBVSx3RUFBVixDQUFOO0FBQ0g7O0FBRUQsTUFBSSxDQUFDLEtBQUtDLEtBQVYsRUFBaUI7QUFDYixVQUFNLEtBQUtDLE1BQUwsRUFBTjtBQUNBLFVBQU0sS0FBS0MsVUFBTCxDQUFnQlQsYUFBaEIsQ0FBTjtBQUNBLFVBQU1FLE1BQU0sQ0FBQ00sTUFBUCxFQUFOO0FBQ0EsV0FBTyxLQUFLRSxRQUFMLENBQWNWLGFBQWQsQ0FBUDtBQUNIO0FBRUQ7Ozs7O0FBR0EsUUFBTVcsVUFBVSxHQUFHLE1BQU0sS0FBS0MsY0FBTCxDQUFvQixLQUFLQyxTQUF6QixDQUF6QjtBQUNBLFFBQU1DLFVBQVUsR0FBRyxNQUFNLEtBQUtGLGNBQUwsQ0FBb0JWLE1BQU0sQ0FBQ1csU0FBM0IsQ0FBekI7QUFDQSxRQUFNRSxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0wsVUFBVSxDQUFDTSxDQUFYLEdBQWdCTixVQUFVLENBQUNPLEtBQVgsR0FBbUIsQ0FBcEMsRUFBd0MsRUFBeEMsQ0FBeEI7QUFDQSxRQUFNQyxPQUFPLEdBQUdILFFBQVEsQ0FBQ0wsVUFBVSxDQUFDUyxDQUFYLEdBQWdCVCxVQUFVLENBQUNVLE1BQVgsR0FBb0IsQ0FBckMsRUFBeUMsRUFBekMsQ0FBeEI7QUFDQSxRQUFNQyxPQUFPLEdBQUdOLFFBQVEsQ0FBQ0YsVUFBVSxDQUFDRyxDQUFYLEdBQWdCSCxVQUFVLENBQUNJLEtBQVgsR0FBbUIsQ0FBcEMsRUFBd0MsRUFBeEMsQ0FBUixHQUFzREgsT0FBdEU7QUFDQSxRQUFNUSxPQUFPLEdBQUdQLFFBQVEsQ0FBQ0YsVUFBVSxDQUFDTSxDQUFYLEdBQWdCTixVQUFVLENBQUNPLE1BQVgsR0FBb0IsQ0FBckMsRUFBeUMsRUFBekMsQ0FBUixHQUF1REYsT0FBdkU7QUFFQTs7OztBQUdBLFNBQU8sS0FBS0ssY0FBTCxDQUFvQixDQUFDO0FBQ3hCQyxJQUFBQSxJQUFJLEVBQUUsU0FEa0I7QUFFeEJDLElBQUFBLEVBQUUsRUFBRSxTQUZvQjtBQUd4QkMsSUFBQUEsVUFBVSxFQUFFO0FBQUVDLE1BQUFBLFdBQVcsRUFBRTtBQUFmLEtBSFk7QUFJeEJDLElBQUFBLE9BQU8sRUFBRSxDQUNMO0FBQUNKLE1BQUFBLElBQUksRUFBRSxhQUFQO0FBQXNCdEIsTUFBQUEsUUFBUSxFQUFFLENBQWhDO0FBQW1DYyxNQUFBQSxDQUFDLEVBQUVGLE9BQXRDO0FBQStDSyxNQUFBQSxDQUFDLEVBQUVEO0FBQWxELEtBREssRUFFTDtBQUFDTSxNQUFBQSxJQUFJLEVBQUUsYUFBUDtBQUFzQkssTUFBQUEsTUFBTSxFQUFFOUI7QUFBOUIsS0FGSyxFQUdMO0FBQUN5QixNQUFBQSxJQUFJLEVBQUUsT0FBUDtBQUFnQnRCLE1BQUFBLFFBQVEsRUFBRTtBQUExQixLQUhLLEVBRzBCO0FBQy9CO0FBQUNzQixNQUFBQSxJQUFJLEVBQUUsYUFBUDtBQUFzQnRCLE1BQUFBLFFBQXRCO0FBQWdDNEIsTUFBQUEsTUFBTSxFQUFFLFNBQXhDO0FBQW1EZCxNQUFBQSxDQUFDLEVBQUVLLE9BQXREO0FBQStERixNQUFBQSxDQUFDLEVBQUVHO0FBQWxFLEtBSkssRUFLTDtBQUFDRSxNQUFBQSxJQUFJLEVBQUUsV0FBUDtBQUFvQkssTUFBQUEsTUFBTSxFQUFFOUI7QUFBNUIsS0FMSztBQUplLEdBQUQsQ0FBcEIsRUFXSGdDLElBWEcsQ0FXRSxNQUFNLEtBQUtDLGNBQUwsRUFYUixDQUFQO0FBWUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBEcmFnIGFuIGl0ZW0gdG8gYSBkZXN0aW5hdGlvbiBlbGVtZW50LlxuICpcbiAqIEBhbGlhcyBlbGVtZW50LmRyYWdBbmREcm9wXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAgICBkZXN0aW5hdGlvbiBzZWxlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9ICBkdXJhdGlvbiAgaG93IGxvbmcgdGhlIGRyYWcgc2hvdWxkIHRha2UgcGxhY2VcbiAqIEB1c2VzIGFjdGlvbi9tb3ZlVG9PYmplY3QsIHByb3RvY29sL2J1dHRvbkRvd24sIHByb3RvY29sL2J1dHRvblVwLCBwcm9wZXJ0eS9nZXRMb2NhdGlvbiwgcHJvdG9jb2wvdG91Y2hEb3duLCBwcm90b2NvbC90b3VjaE1vdmUsIHByb3RvY29sL3RvdWNoVXBcbiAqIEB0eXBlIGFjdGlvblxuICpcbiAqL1xuXG5jb25zdCBBQ1RJT05fQlVUVE9OID0gMFxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBkcmFnQW5kRHJvcCAodGFyZ2V0LCBkdXJhdGlvbiA9IDEwMCkge1xuICAgIGlmICghdGFyZ2V0IHx8IHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnRWxlbWVudCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb21tYW5kIGRyYWdBbmREcm9wIHJlcXVpcmVzIGFuIFdlYmRyaXZlcklPIEVsZW1lbnQgYXMgZmlyc3QgcGFyYW1ldGVyJylcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNXM0MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5tb3ZlVG8oKVxuICAgICAgICBhd2FpdCB0aGlzLmJ1dHRvbkRvd24oQUNUSU9OX0JVVFRPTilcbiAgICAgICAgYXdhaXQgdGFyZ2V0Lm1vdmVUbygpXG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvblVwKEFDVElPTl9CVVRUT04pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IGNvb3JkaW5hdGVzIHRvIGRyYWcgYW5kIGRyb3BcbiAgICAgKi9cbiAgICBjb25zdCBzb3VyY2VSZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdCh0aGlzLmVsZW1lbnRJZClcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdCh0YXJnZXQuZWxlbWVudElkKVxuICAgIGNvbnN0IHNvdXJjZVggPSBwYXJzZUludChzb3VyY2VSZWN0LnggKyAoc291cmNlUmVjdC53aWR0aCAvIDIpLCAxMClcbiAgICBjb25zdCBzb3VyY2VZID0gcGFyc2VJbnQoc291cmNlUmVjdC55ICsgKHNvdXJjZVJlY3QuaGVpZ2h0IC8gMiksIDEwKVxuICAgIGNvbnN0IHRhcmdldFggPSBwYXJzZUludCh0YXJnZXRSZWN0LnggKyAodGFyZ2V0UmVjdC53aWR0aCAvIDIpLCAxMCkgLSBzb3VyY2VYXG4gICAgY29uc3QgdGFyZ2V0WSA9IHBhcnNlSW50KHRhcmdldFJlY3QueSArICh0YXJnZXRSZWN0LmhlaWdodCAvIDIpLCAxMCkgLSBzb3VyY2VZXG5cbiAgICAvKipcbiAgICAgKiBXM0Mgd2F5IG9mIGhhbmRsZSB0aGUgZHJhZyBhbmQgZHJvcCBhY3Rpb25cbiAgICAgKi9cbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtQWN0aW9ucyhbe1xuICAgICAgICB0eXBlOiAncG9pbnRlcicsXG4gICAgICAgIGlkOiAnZmluZ2VyMScsXG4gICAgICAgIHBhcmFtZXRlcnM6IHsgcG9pbnRlclR5cGU6ICdtb3VzZScgfSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge3R5cGU6IFwicG9pbnRlck1vdmVcIiwgZHVyYXRpb246IDAsIHg6IHNvdXJjZVgsIHk6IHNvdXJjZVl9LFxuICAgICAgICAgICAge3R5cGU6IFwicG9pbnRlckRvd25cIiwgYnV0dG9uOiBBQ1RJT05fQlVUVE9OfSxcbiAgICAgICAgICAgIHt0eXBlOiBcInBhdXNlXCIsIGR1cmF0aW9uOiAxMH0sIC8vIGVtdWxhdGUgaHVtYW4gcGF1c2VcbiAgICAgICAgICAgIHt0eXBlOiBcInBvaW50ZXJNb3ZlXCIsIGR1cmF0aW9uLCBvcmlnaW46IFwicG9pbnRlclwiLCB4OiB0YXJnZXRYLCB5OiB0YXJnZXRZfSxcbiAgICAgICAgICAgIHt0eXBlOiBcInBvaW50ZXJVcFwiLCBidXR0b246IEFDVElPTl9CVVRUT059XG4gICAgICAgIF1cbiAgICB9XSkudGhlbigoKSA9PiB0aGlzLnJlbGVhc2VBY3Rpb25zKCkpXG59XG4iXX0=