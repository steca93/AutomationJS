'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.detectBackend = detectBackend;
exports.initialisePlugin = initialisePlugin;
exports.validateConfig = validateConfig;
(0, _sourceMapSupport2.install)();
const DEFAULT_HOSTNAME = '127.0.0.1';
const DEFAULT_PORT = 4444;

/**
 * helper to detect the Selenium backend according to given capabilities
 */
function detectBackend(options = {}) {
    const port = options.port,
          hostname = options.hostname,
          user = options.user,
          key = options.key;

    /**
     * browserstack
     * e.g. zHcv9sZ39ip8ZPsxBVJ2
     */

    if (typeof user === 'string' && key.length === 20) {
        return {
            hostname: 'hub.browserstack.com',
            port: 80
        };
    }

    /**
     * testingbot
     * e.g. ec337d7b677720a4dde7bd72be0bfc67
     */
    if (typeof user === 'string' && key.length === 32) {
        return {
            hostname: 'hub.testingbot.com',
            port: 80
        };
    }

    /**
     * Sauce Labs
     * e.g. 50aa152c-1932-B2f0-9707-18z46q2n1mb0
     */
    if (typeof user === 'string' && key.length === 36) {
        return {
            protocol: 'https',
            hostname: 'ondemand.saucelabs.com',
            port: 443
        };
    }

    /**
     * no cloud provider detected, fallback to local browser driver
     */
    return {
        hostname: hostname || DEFAULT_HOSTNAME,
        port: port || DEFAULT_PORT
    };
}

/**
 * initialise WebdriverIO compliant plugins
 */
function initialisePlugin(name, type) {
    /**
     * don't populate scoped package names
     */
    const pkgName = name[0] === '@' ? name : `wdio-${name.toLowerCase()}-${type}`;

    try {
        return require(pkgName);
    } catch (e) {
        if (!e.message.match(`Cannot find module '${pkgName}'`)) {
            throw new Error(`Couldn't initialise "${name}" ${type}.\n${e.stack}`);
        }

        throw new Error(`Couldn't find plugin "${pkgName}". You need to install it ` + `with \`$ npm install ${pkgName}\`!\n${e.stack}`);
    }
}

function validateConfig(defaults, options) {
    const params = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.entries(defaults)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            const _ref = _step.value;

            var _ref2 = _slicedToArray(_ref, 2);

            const name = _ref2[0];
            const expectedOption = _ref2[1];

            /**
             * check if options is given
             */
            if (typeof options[name] === 'undefined' && !expectedOption.default && expectedOption.required) {
                throw new Error(`Required option "${name}" is missing`);
            }

            if (typeof options[name] === 'undefined' && expectedOption.default) {
                params[name] = expectedOption.default;
            }

            if (typeof options[name] !== 'undefined') {
                if (typeof expectedOption.type === 'string' && typeof options[name] !== expectedOption.type) {
                    throw new Error(`Expected option "${name}" to be type of ${expectedOption.type} but was ${typeof options[name]}`);
                }

                if (typeof expectedOption.type === 'function') {
                    try {
                        expectedOption.type(options[name]);
                    } catch (e) {
                        throw new Error(`Type check for option "${name}" failed: ${e.message}`);
                    }
                }

                if (expectedOption.match && !options[name].match(expectedOption.match)) {
                    throw new Error(`Option "${name}" doesn't match expected values: ${expectedOption.match}`);
                }

                params[name] = options[name];
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return params;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,