'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

var _utils = require('../utils');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();


const log = (0, _wdioLogger2.default)('wdio-config:ConfigParser');
const MERGE_OPTIONS = { clone: false };

class ConfigParser {
    constructor() {
        this._config = _constants.DEFAULT_CONFIGS;
        this._capabilities = [];
    }

    /**
     * merges config file with default values
     * @param {String} filename path of file relative to current directory
     */
    addConfigFile(filename) {
        if (typeof filename !== 'string') {
            throw new Error('addConfigFile requires filepath');
        }

        var filePath = _path2.default.resolve(process.cwd(), filename);

        try {
            /**
             * clone the original config
             */
            var fileConfig = (0, _deepmerge2.default)(require(filePath).config, {}, MERGE_OPTIONS);

            /**
             * merge capabilities
             */
            const defaultTo = Array.isArray(this._capabilities) ? [] : {};
            this._capabilities = (0, _deepmerge2.default)(this._capabilities, fileConfig.capabilities || defaultTo, MERGE_OPTIONS);
            delete fileConfig.capabilities;

            /**
             * add service hooks and remove them from config
             */
            this.addService(fileConfig);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _constants.SUPPORTED_HOOKS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    let hookName = _step.value;

                    delete fileConfig[hookName];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this._config = (0, _deepmerge2.default)(this._config, fileConfig, MERGE_OPTIONS);

            /**
             * detect Selenium backend
             */
            this._config = (0, _deepmerge2.default)((0, _utils.detectBackend)(this._config), this._config, MERGE_OPTIONS);
        } catch (e) {
            log.error(`Failed loading configuration file: ${filePath}`);
            throw e;
        }
    }

    /**
     * merge external object with config object
     * @param  {Object} object  desired object to merge into the config object
     */
    merge(object = {}) {
        this._config = (0, _deepmerge2.default)(this._config, object, MERGE_OPTIONS);
        let spec = Array.isArray(object.spec) ? object.spec : [];
        let exclude = Array.isArray(object.exclude) ? object.exclude : [];

        /**
         * overwrite config specs that got piped into the wdio command
         */
        if (object.specs && object.specs.length > 0) {
            this._config.specs = object.specs;
        } else if (object.exclude && object.exclude.length > 0) {
            this._config.exclude = object.exclude;
        }

        /**
         * merge capabilities
         */
        const defaultTo = Array.isArray(this._capabilities) ? [] : {};
        this._capabilities = (0, _deepmerge2.default)(this._capabilities, this._config.capabilities || defaultTo, MERGE_OPTIONS);

        /**
         * run single spec file only, regardless of multiple-spec specification
         */
        if (spec.length > 0) {
            this._config.specs = [...this.setFilePathToFilterOptions(spec, this._config.specs)];
        }

        if (exclude.length > 0) {
            this._config.exclude = [...this.setFilePathToFilterOptions(exclude, this._config.exclude)];
        }

        /**
         * user and key could get added via cli arguments so we need to detect again
         * Note: cli arguments are on the right and overwrite config
         * if host and port are default, remove them to get new values
         */
        let defaultBackend = (0, _utils.detectBackend)({});
        if (this._config.hostname === defaultBackend.hostname && this._config.port === defaultBackend.port) {
            delete this._config.hostname;
            delete this._config.port;
        }

        this._config = (0, _deepmerge2.default)((0, _utils.detectBackend)(this._config), this._config, MERGE_OPTIONS);
    }

    /**
     * add hooks from services to runner config
     * @param {Object} service  a service is basically an object that contains hook methods
     */
    addService(service) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = _constants.SUPPORTED_HOOKS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                let hookName = _step2.value;

                if (!service[hookName]) {
                    continue;
                }

                if (typeof service[hookName] === 'function') {
                    this._config[hookName].push(service[hookName].bind(service));
                } else if (Array.isArray(service[hookName])) {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = service[hookName][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            let hook = _step3.value;

                            if (typeof hook === 'function') {
                                this._config[hookName].push(hook.bind(service));
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }

    /**
     * get excluded files from config pattern
     */
    getSpecs(capSpecs, capExclude) {
        let specs = ConfigParser.getFilePaths(this._config.specs);
        let spec = Array.isArray(this._config.spec) ? this._config.spec : [];
        let exclude = ConfigParser.getFilePaths(this._config.exclude);
        let suites = Array.isArray(this._config.suite) ? this._config.suite : [];

        /**
         * check if user has specified a specific suites to run
         */
        if (suites.length > 0) {
            let suiteSpecs = [];
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = suites[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    let suiteName = _step4.value;

                    // ToDo: log warning if suite was not found
                    let suite = this._config.suites[suiteName];
                    if (suite && Array.isArray(suite)) {
                        suiteSpecs = suiteSpecs.concat(ConfigParser.getFilePaths(suite));
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            if (suiteSpecs.length === 0) {
                throw new Error(`The suite(s) "${suites.join('", "')}" you specified don't exist ` + 'in your config file or doesn\'t contain any files!');
            }

            // Allow --suite and --spec to both be defined on the command line
            // Removing any duplicate tests that could be included
            const tmp_specs = spec.length > 0 ? [...specs, ...suiteSpecs] : suiteSpecs;

            return [...new Set(tmp_specs)];
        }

        if (Array.isArray(capSpecs)) {
            specs = specs.concat(ConfigParser.getFilePaths(capSpecs));
        }

        if (Array.isArray(capExclude)) {
            exclude = exclude.concat(ConfigParser.getFilePaths(capExclude));
        }

        return specs.filter(spec => exclude.indexOf(spec) < 0);
    }

    /**
     * sets config attribute with file paths from filtering
     * options from cli argument
     *
     * @param  {String} cliArgFileList  list of files in a string from
     * @param  {Object} config  config object that stores the spec and exlcude attributes
     * cli argument
     * @return {String[]} List of files that should be included or excluded
     */
    setFilePathToFilterOptions(cliArgFileList, config) {
        const filesToFilter = new Set();
        const fileList = ConfigParser.getFilePaths(config);
        cliArgFileList.forEach(filtered_file => {
            if (_fs2.default.existsSync(filtered_file) && _fs2.default.lstatSync(filtered_file).isFile()) {
                filesToFilter.add(_path2.default.resolve(process.cwd(), filtered_file));
            } else {
                fileList.forEach(file => {
                    if (file.match(filtered_file)) {
                        filesToFilter.add(file);
                    }
                });
            }
        });
        if (filesToFilter.size === 0) {
            throw new Error(`spec file(s) ${cliArgFileList.join(`, `)} not found`);
        }

        return filesToFilter;
    }

    /**
     * return configs
     */
    getConfig() {
        return this._config;
    }

    /**
     * return capabilities
     */
    getCapabilities(i) {
        if (typeof i === 'number' && this._capabilities[i]) {
            return this._capabilities[i];
        }

        return this._capabilities;
    }

    /**
     * returns a flatten list of globed files
     *
     * @param  {String[]} filenames  list of files to glob
     * @return {String[]} list of files
     */
    static getFilePaths(patterns, omitWarnings) {
        let files = [];

        if (typeof patterns === 'string') {
            patterns = [patterns];
        }

        if (!Array.isArray(patterns)) {
            throw new Error('specs or exclude property should be an array of strings');
        }

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
            for (var _iterator5 = patterns[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                let pattern = _step5.value;

                let filenames = _glob2.default.sync(pattern);

                filenames = filenames.filter(filename => filename.slice(-3) === '.js' || filename.slice(-3) === '.ts' || filename.slice(-8) === '.feature' || filename.slice(-7) === '.coffee');

                filenames = filenames.map(filename => _path2.default.isAbsolute(filename) ? _path2.default.normalize(filename) : _path2.default.resolve(process.cwd(), filename));

                if (filenames.length === 0 && !omitWarnings) {
                    log.warn('pattern', pattern, 'did not match any file');
                }

                files = (0, _deepmerge2.default)(files, filenames, MERGE_OPTIONS);
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                }
            } finally {
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }

        return files;
    }
}
exports.default = ConfigParser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,