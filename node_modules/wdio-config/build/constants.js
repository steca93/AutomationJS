'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SUPPORTED_HOOKS = exports.DEFAULT_CONFIGS = undefined;

var _sourceMapSupport2 = require('source-map-support');

(0, _sourceMapSupport2.install)();
const DEFAULT_TIMEOUT = 10000;

/* istanbul ignore next */
const NOOP = function NOOP() {};

const DEFAULT_CONFIGS = exports.DEFAULT_CONFIGS = {
    sync: true,
    specs: [],
    suites: {},
    exclude: [],
    logDir: undefined,
    logLevel: 'info',
    deprecationWarnings: true,
    baseUrl: undefined,
    bail: 0,
    waitforInterval: 500,
    waitforTimeout: 1000,
    framework: 'mocha',
    reporters: [],
    maxInstances: 100,
    maxInstancesPerCapability: 100,
    connectionRetryTimeout: 90000,
    connectionRetryCount: 3,
    debug: false,
    execArgv: [],
    runnerEnv: {},
    runner: 'local',

    /**
     * framework defaults
     */
    mochaOpts: {
        timeout: DEFAULT_TIMEOUT
    },
    jasmineNodeOpts: {
        defaultTimeoutInterval: DEFAULT_TIMEOUT
    },
    cucumberOpts: {
        timeout: DEFAULT_TIMEOUT
    },

    /**
     * hooks
     */
    onPrepare: NOOP,
    before: [],
    beforeSession: [],
    beforeSuite: [],
    beforeHook: [],
    beforeTest: [],
    beforeCommand: [],
    afterCommand: [],
    afterTest: [],
    afterHook: [],
    afterSuite: [],
    afterSession: [],
    after: [],
    onComplete: NOOP,
    onError: [],
    onReload: [],

    /**
     * cucumber specific hooks
     */
    beforeFeature: [],
    beforeScenario: [],
    beforeStep: [],
    afterFeature: [],
    afterScenario: [],
    afterStep: []
};

const SUPPORTED_HOOKS = exports.SUPPORTED_HOOKS = ['before', 'beforeSession', 'beforeSuite', 'beforeHook', 'beforeTest', 'beforeCommand', 'afterCommand', 'afterTest', 'afterHook', 'afterSuite', 'afterSession', 'after', 'beforeFeature', 'beforeScenario', 'beforeStep', 'afterFeature', 'afterScenario', 'afterStep', 'onError', 'onReload'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiREVGQVVMVF9USU1FT1VUIiwiTk9PUCIsIkRFRkFVTFRfQ09ORklHUyIsInN5bmMiLCJzcGVjcyIsInN1aXRlcyIsImV4Y2x1ZGUiLCJsb2dEaXIiLCJ1bmRlZmluZWQiLCJsb2dMZXZlbCIsImRlcHJlY2F0aW9uV2FybmluZ3MiLCJiYXNlVXJsIiwiYmFpbCIsIndhaXRmb3JJbnRlcnZhbCIsIndhaXRmb3JUaW1lb3V0IiwiZnJhbWV3b3JrIiwicmVwb3J0ZXJzIiwibWF4SW5zdGFuY2VzIiwibWF4SW5zdGFuY2VzUGVyQ2FwYWJpbGl0eSIsImNvbm5lY3Rpb25SZXRyeVRpbWVvdXQiLCJjb25uZWN0aW9uUmV0cnlDb3VudCIsImRlYnVnIiwiZXhlY0FyZ3YiLCJydW5uZXJFbnYiLCJydW5uZXIiLCJtb2NoYU9wdHMiLCJ0aW1lb3V0IiwiamFzbWluZU5vZGVPcHRzIiwiZGVmYXVsdFRpbWVvdXRJbnRlcnZhbCIsImN1Y3VtYmVyT3B0cyIsIm9uUHJlcGFyZSIsImJlZm9yZSIsImJlZm9yZVNlc3Npb24iLCJiZWZvcmVTdWl0ZSIsImJlZm9yZUhvb2siLCJiZWZvcmVUZXN0IiwiYmVmb3JlQ29tbWFuZCIsImFmdGVyQ29tbWFuZCIsImFmdGVyVGVzdCIsImFmdGVySG9vayIsImFmdGVyU3VpdGUiLCJhZnRlclNlc3Npb24iLCJhZnRlciIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25SZWxvYWQiLCJiZWZvcmVGZWF0dXJlIiwiYmVmb3JlU2NlbmFyaW8iLCJiZWZvcmVTdGVwIiwiYWZ0ZXJGZWF0dXJlIiwiYWZ0ZXJTY2VuYXJpbyIsImFmdGVyU3RlcCIsIlNVUFBPUlRFRF9IT09LUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU1BLGtCQUFrQixLQUF4Qjs7QUFFQTtBQUNBLE1BQU1DLE9BQU8sU0FBUEEsSUFBTyxHQUFZLENBQUUsQ0FBM0I7O0FBRU8sTUFBTUMsNENBQWtCO0FBQzNCQyxVQUFNLElBRHFCO0FBRTNCQyxXQUFPLEVBRm9CO0FBRzNCQyxZQUFRLEVBSG1CO0FBSTNCQyxhQUFTLEVBSmtCO0FBSzNCQyxZQUFRQyxTQUxtQjtBQU0zQkMsY0FBVSxNQU5pQjtBQU8zQkMseUJBQXFCLElBUE07QUFRM0JDLGFBQVNILFNBUmtCO0FBUzNCSSxVQUFNLENBVHFCO0FBVTNCQyxxQkFBaUIsR0FWVTtBQVczQkMsb0JBQWdCLElBWFc7QUFZM0JDLGVBQVcsT0FaZ0I7QUFhM0JDLGVBQVcsRUFiZ0I7QUFjM0JDLGtCQUFjLEdBZGE7QUFlM0JDLCtCQUEyQixHQWZBO0FBZ0IzQkMsNEJBQXdCLEtBaEJHO0FBaUIzQkMsMEJBQXNCLENBakJLO0FBa0IzQkMsV0FBTyxLQWxCb0I7QUFtQjNCQyxjQUFVLEVBbkJpQjtBQW9CM0JDLGVBQVcsRUFwQmdCO0FBcUIzQkMsWUFBUSxPQXJCbUI7O0FBdUIzQjs7O0FBR0FDLGVBQVc7QUFDUEMsaUJBQVMxQjtBQURGLEtBMUJnQjtBQTZCM0IyQixxQkFBaUI7QUFDYkMsZ0NBQXdCNUI7QUFEWCxLQTdCVTtBQWdDM0I2QixrQkFBYztBQUNWSCxpQkFBUzFCO0FBREMsS0FoQ2E7O0FBb0MzQjs7O0FBR0E4QixlQUFXN0IsSUF2Q2dCO0FBd0MzQjhCLFlBQVEsRUF4Q21CO0FBeUMzQkMsbUJBQWUsRUF6Q1k7QUEwQzNCQyxpQkFBYSxFQTFDYztBQTJDM0JDLGdCQUFZLEVBM0NlO0FBNEMzQkMsZ0JBQVksRUE1Q2U7QUE2QzNCQyxtQkFBZSxFQTdDWTtBQThDM0JDLGtCQUFjLEVBOUNhO0FBK0MzQkMsZUFBVyxFQS9DZ0I7QUFnRDNCQyxlQUFXLEVBaERnQjtBQWlEM0JDLGdCQUFZLEVBakRlO0FBa0QzQkMsa0JBQWMsRUFsRGE7QUFtRDNCQyxXQUFPLEVBbkRvQjtBQW9EM0JDLGdCQUFZMUMsSUFwRGU7QUFxRDNCMkMsYUFBUyxFQXJEa0I7QUFzRDNCQyxjQUFVLEVBdERpQjs7QUF3RDNCOzs7QUFHQUMsbUJBQWUsRUEzRFk7QUE0RDNCQyxvQkFBZ0IsRUE1RFc7QUE2RDNCQyxnQkFBWSxFQTdEZTtBQThEM0JDLGtCQUFjLEVBOURhO0FBK0QzQkMsbUJBQWUsRUEvRFk7QUFnRTNCQyxlQUFXO0FBaEVnQixDQUF4Qjs7QUFtRUEsTUFBTUMsNENBQWtCLENBQzNCLFFBRDJCLEVBQ2pCLGVBRGlCLEVBQ0EsYUFEQSxFQUNlLFlBRGYsRUFDNkIsWUFEN0IsRUFDMkMsZUFEM0MsRUFFM0IsY0FGMkIsRUFFWCxXQUZXLEVBRUUsV0FGRixFQUVlLFlBRmYsRUFFNkIsY0FGN0IsRUFFNkMsT0FGN0MsRUFHM0IsZUFIMkIsRUFHVixnQkFIVSxFQUdRLFlBSFIsRUFHc0IsY0FIdEIsRUFJM0IsZUFKMkIsRUFJVixXQUpVLEVBSUcsU0FKSCxFQUljLFVBSmQsQ0FBeEIiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTAwMDBcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IE5PT1AgPSBmdW5jdGlvbiAoKSB7fVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT05GSUdTID0ge1xuICAgIHN5bmM6IHRydWUsXG4gICAgc3BlY3M6IFtdLFxuICAgIHN1aXRlczoge30sXG4gICAgZXhjbHVkZTogW10sXG4gICAgbG9nRGlyOiB1bmRlZmluZWQsXG4gICAgbG9nTGV2ZWw6ICdpbmZvJyxcbiAgICBkZXByZWNhdGlvbldhcm5pbmdzOiB0cnVlLFxuICAgIGJhc2VVcmw6IHVuZGVmaW5lZCxcbiAgICBiYWlsOiAwLFxuICAgIHdhaXRmb3JJbnRlcnZhbDogNTAwLFxuICAgIHdhaXRmb3JUaW1lb3V0OiAxMDAwLFxuICAgIGZyYW1ld29yazogJ21vY2hhJyxcbiAgICByZXBvcnRlcnM6IFtdLFxuICAgIG1heEluc3RhbmNlczogMTAwLFxuICAgIG1heEluc3RhbmNlc1BlckNhcGFiaWxpdHk6IDEwMCxcbiAgICBjb25uZWN0aW9uUmV0cnlUaW1lb3V0OiA5MDAwMCxcbiAgICBjb25uZWN0aW9uUmV0cnlDb3VudDogMyxcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgZXhlY0FyZ3Y6IFtdLFxuICAgIHJ1bm5lckVudjoge30sXG4gICAgcnVubmVyOiAnbG9jYWwnLFxuXG4gICAgLyoqXG4gICAgICogZnJhbWV3b3JrIGRlZmF1bHRzXG4gICAgICovXG4gICAgbW9jaGFPcHRzOiB7XG4gICAgICAgIHRpbWVvdXQ6IERFRkFVTFRfVElNRU9VVFxuICAgIH0sXG4gICAgamFzbWluZU5vZGVPcHRzOiB7XG4gICAgICAgIGRlZmF1bHRUaW1lb3V0SW50ZXJ2YWw6IERFRkFVTFRfVElNRU9VVFxuICAgIH0sXG4gICAgY3VjdW1iZXJPcHRzOiB7XG4gICAgICAgIHRpbWVvdXQ6IERFRkFVTFRfVElNRU9VVFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBob29rc1xuICAgICAqL1xuICAgIG9uUHJlcGFyZTogTk9PUCxcbiAgICBiZWZvcmU6IFtdLFxuICAgIGJlZm9yZVNlc3Npb246IFtdLFxuICAgIGJlZm9yZVN1aXRlOiBbXSxcbiAgICBiZWZvcmVIb29rOiBbXSxcbiAgICBiZWZvcmVUZXN0OiBbXSxcbiAgICBiZWZvcmVDb21tYW5kOiBbXSxcbiAgICBhZnRlckNvbW1hbmQ6IFtdLFxuICAgIGFmdGVyVGVzdDogW10sXG4gICAgYWZ0ZXJIb29rOiBbXSxcbiAgICBhZnRlclN1aXRlOiBbXSxcbiAgICBhZnRlclNlc3Npb246IFtdLFxuICAgIGFmdGVyOiBbXSxcbiAgICBvbkNvbXBsZXRlOiBOT09QLFxuICAgIG9uRXJyb3I6IFtdLFxuICAgIG9uUmVsb2FkOiBbXSxcblxuICAgIC8qKlxuICAgICAqIGN1Y3VtYmVyIHNwZWNpZmljIGhvb2tzXG4gICAgICovXG4gICAgYmVmb3JlRmVhdHVyZTogW10sXG4gICAgYmVmb3JlU2NlbmFyaW86IFtdLFxuICAgIGJlZm9yZVN0ZXA6IFtdLFxuICAgIGFmdGVyRmVhdHVyZTogW10sXG4gICAgYWZ0ZXJTY2VuYXJpbzogW10sXG4gICAgYWZ0ZXJTdGVwOiBbXVxufVxuXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX0hPT0tTID0gW1xuICAgICdiZWZvcmUnLCAnYmVmb3JlU2Vzc2lvbicsICdiZWZvcmVTdWl0ZScsICdiZWZvcmVIb29rJywgJ2JlZm9yZVRlc3QnLCAnYmVmb3JlQ29tbWFuZCcsXG4gICAgJ2FmdGVyQ29tbWFuZCcsICdhZnRlclRlc3QnLCAnYWZ0ZXJIb29rJywgJ2FmdGVyU3VpdGUnLCAnYWZ0ZXJTZXNzaW9uJywgJ2FmdGVyJyxcbiAgICAnYmVmb3JlRmVhdHVyZScsICdiZWZvcmVTY2VuYXJpbycsICdiZWZvcmVTdGVwJywgJ2FmdGVyRmVhdHVyZScsXG4gICAgJ2FmdGVyU2NlbmFyaW8nLCAnYWZ0ZXJTdGVwJywgJ29uRXJyb3InLCAnb25SZWxvYWQnXG5dXG4iXX0=