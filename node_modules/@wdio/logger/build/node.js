"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getLogger;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _util = _interopRequireDefault(require("util"));

var _chalk = _interopRequireDefault(require("chalk"));

var _loglevelPluginPrefix = _interopRequireDefault(require("loglevel-plugin-prefix"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_LEVEL = 0;
const COLORS = {
  error: 'red',
  warn: 'yellow',
  info: 'cyanBright',
  debug: 'green',
  trace: 'cyan'
};
const SERIALIZERS = [{
  /**
   * display error stack
   */
  matches: err => err instanceof Error,
  serialize: err => err.stack
}, {
  /**
   * color commands blue
   */
  matches: log => log === 'COMMAND',
  serialize: log => _chalk.default.magenta(log)
}, {
  /**
   * color data yellow
   */
  matches: log => log === 'DATA',
  serialize: log => _chalk.default.yellow(log)
}, {
  /**
   * color result cyan
   */
  matches: log => log === 'RESULT',
  serialize: log => _chalk.default.cyan(log)
}];
const loggers = {};
const logCache = new Set();
let logFile;
const originalFactory = _loglevel.default.methodFactory;

_loglevel.default.methodFactory = function (methodName, logLevel, loggerName) {
  const rawMethod = originalFactory(methodName, logLevel, loggerName);
  return (...args) => {
    /**
     * create logFile lazily
     */
    if (!logFile && process.env.WDIO_LOG_PATH) {
      logFile = _fs.default.createWriteStream(process.env.WDIO_LOG_PATH);
    }

    args = args.map(arg => {
      for (const s of SERIALIZERS) {
        if (s.matches(arg)) {
          return s.serialize(arg);
        }
      }

      return arg;
    });
    const logText = (0, _stripAnsi.default)(`${_util.default.format.apply(this, args)}\n`);

    if (logFile) {
      /**
       * empty logging cache if stuff got logged before
       */
      if (logCache.size) {
        logCache.forEach(log => logFile.write(log));
        logCache.clear();
      }

      return logFile.write(logText);
    }

    logCache.add(logText);
    rawMethod(...args);
  };
};

_loglevelPluginPrefix.default.apply(_loglevel.default, {
  template: '%t %l %n:',
  timestampFormatter: date => _chalk.default.gray(date.toISOString()),
  levelFormatter: level => _chalk.default[COLORS[level]](level.toUpperCase()),
  nameFormatter: name => _chalk.default.whiteBright(name || 'global')
});

function getLogger(name) {
  /**
   * check if logger was already initiated
   */
  if (loggers[name]) {
    return loggers[name];
  }

  loggers[name] = _loglevel.default.getLogger(name);
  loggers[name].setLevel(process.env.WDIO_LOG_LEVEL || DEFAULT_LEVEL);
  return loggers[name];
}

getLogger.setLevel = (name, level) => loggers[name].setLevel(level);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,