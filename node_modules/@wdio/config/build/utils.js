"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectBackend = detectBackend;
exports.initialisePlugin = initialisePlugin;
exports.validateConfig = validateConfig;

require("source-map-support/register");

const DEFAULT_HOSTNAME = '127.0.0.1';
const DEFAULT_PORT = 4444;
const DEFAULT_PROTOCOL = 'http';
/**
 * helper to detect the Selenium backend according to given capabilities
 */

function detectBackend(options = {}) {
  const {
    port,
    hostname,
    user,
    key,
    protocol
  } = options;
  /**
   * browserstack
   * e.g. zHcv9sZ39ip8ZPsxBVJ2
   */

  if (typeof user === 'string' && key.length === 20) {
    return {
      hostname: 'hub.browserstack.com',
      port: 80
    };
  }
  /**
   * testingbot
   * e.g. ec337d7b677720a4dde7bd72be0bfc67
   */


  if (typeof user === 'string' && key.length === 32) {
    return {
      hostname: 'hub.testingbot.com',
      port: 80
    };
  }
  /**
   * Sauce Labs
   * e.g. 50aa152c-1932-B2f0-9707-18z46q2n1mb0
   */


  if (typeof user === 'string' && key.length === 36) {
    return {
      protocol: protocol || 'https',
      hostname: hostname || 'ondemand.saucelabs.com',
      port: port || 443
    };
  }
  /**
   * no cloud provider detected, fallback to local browser driver
   */


  return {
    hostname: hostname || DEFAULT_HOSTNAME,
    port: port || DEFAULT_PORT,
    protocol: protocol || DEFAULT_PROTOCOL
  };
}
/**
 * Allows to safely require a package, it only throws if the package was found
 * but failed to load due to syntax errors
 * @param  {string} name  of package
 * @return {object}       package content
 */


function safeRequire(name) {
  try {
    return require(name);
  } catch (e) {
    if (!e.message.match(`Cannot find module '${name}'`)) {
      throw new Error(`Couldn't initialise "${name}".\n${e.stack}`);
    }

    return null;
  }
}
/**
 * initialise WebdriverIO compliant plugins like reporter or services in the following way:
 * 1. if package name is scoped (starts with "@"), require scoped package name
 * 2. otherwise try to require "@wdio/<name>-<type>"
 * 3. otherwise try to require "wdio-<name>-<type>"
 */


function initialisePlugin(name, type, target = 'default') {
  /**
   * directly import packages that are scoped
   */
  if (name[0] === '@') {
    const service = safeRequire(name);
    return service[target];
  }
  /**
   * check for scoped version of plugin first (e.g. @wdio/sauce-service)
   */


  const scopedPlugin = safeRequire(`@wdio/${name.toLowerCase()}-${type}`);

  if (scopedPlugin) {
    return scopedPlugin[target];
  }
  /**
   * check for old type of
   */


  const plugin = safeRequire(`wdio-${name.toLowerCase()}-${type}`);

  if (plugin) {
    return plugin[target];
  }

  throw new Error(`Couldn't find plugin "${name}" ${type}, neither as wdio scoped package ` + `"@wdio/${name.toLowerCase()}-${type}" nor as community package ` + `"wdio-${name.toLowerCase()}-${type}". Please make sure you have it installed!`);
}
/**
 * validates configurations based on default values
 * @param  {Object} defaults  object describing all allowed properties
 * @param  {Object} options   option to check agains
 * @return {Object}           validated config enriched with default values
 */


function validateConfig(defaults, options) {
  const params = {};

  for (const [name, expectedOption] of Object.entries(defaults)) {
    /**
     * check if options is given
     */
    if (typeof options[name] === 'undefined' && !expectedOption.default && expectedOption.required) {
      throw new Error(`Required option "${name}" is missing`);
    }

    if (typeof options[name] === 'undefined' && expectedOption.default) {
      params[name] = expectedOption.default;
    }

    if (typeof options[name] !== 'undefined') {
      if (typeof expectedOption.type === 'string' && typeof options[name] !== expectedOption.type) {
        throw new Error(`Expected option "${name}" to be type of ${expectedOption.type} but was ${typeof options[name]}`);
      }

      if (typeof expectedOption.type === 'function') {
        try {
          expectedOption.type(options[name]);
        } catch (e) {
          throw new Error(`Type check for option "${name}" failed: ${e.message}`);
        }
      }

      if (expectedOption.match && !options[name].match(expectedOption.match)) {
        throw new Error(`Option "${name}" doesn't match expected values: ${expectedOption.match}`);
      }

      params[name] = options[name];
    }
  }

  return params;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX0hPU1ROQU1FIiwiREVGQVVMVF9QT1JUIiwiREVGQVVMVF9QUk9UT0NPTCIsImRldGVjdEJhY2tlbmQiLCJvcHRpb25zIiwicG9ydCIsImhvc3RuYW1lIiwidXNlciIsImtleSIsInByb3RvY29sIiwibGVuZ3RoIiwic2FmZVJlcXVpcmUiLCJuYW1lIiwicmVxdWlyZSIsImUiLCJtZXNzYWdlIiwibWF0Y2giLCJFcnJvciIsInN0YWNrIiwiaW5pdGlhbGlzZVBsdWdpbiIsInR5cGUiLCJ0YXJnZXQiLCJzZXJ2aWNlIiwic2NvcGVkUGx1Z2luIiwidG9Mb3dlckNhc2UiLCJwbHVnaW4iLCJ2YWxpZGF0ZUNvbmZpZyIsImRlZmF1bHRzIiwicGFyYW1zIiwiZXhwZWN0ZWRPcHRpb24iLCJPYmplY3QiLCJlbnRyaWVzIiwiZGVmYXVsdCIsInJlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU1BLGdCQUFnQixHQUFHLFdBQXpCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQXJCO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsTUFBekI7QUFFQTs7OztBQUdPLFNBQVNDLGFBQVQsQ0FBd0JDLE9BQU8sR0FBRyxFQUFsQyxFQUFzQztBQUN6QyxRQUFNO0FBQUVDLElBQUFBLElBQUY7QUFBUUMsSUFBQUEsUUFBUjtBQUFrQkMsSUFBQUEsSUFBbEI7QUFBd0JDLElBQUFBLEdBQXhCO0FBQTZCQyxJQUFBQTtBQUE3QixNQUEwQ0wsT0FBaEQ7QUFFQTs7Ozs7QUFJQSxNQUFJLE9BQU9HLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEJDLEdBQUcsQ0FBQ0UsTUFBSixLQUFlLEVBQS9DLEVBQW1EO0FBQy9DLFdBQU87QUFDSEosTUFBQUEsUUFBUSxFQUFFLHNCQURQO0FBRUhELE1BQUFBLElBQUksRUFBRTtBQUZILEtBQVA7QUFJSDtBQUVEOzs7Ozs7QUFJQSxNQUFJLE9BQU9FLElBQVAsS0FBZ0Is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QUVEWSxNQUFBQSxNQUFNLENBQUNoQixJQUFELENBQU4sR0FBZVIsT0FBTyxDQUFDUSxJQUFELENBQXRCO0FBQ0g7QUFDSjs7QUFFRCxTQUFPZ0IsTUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgREVGQVVMVF9IT1NUTkFNRSA9ICcxMjcuMC4wLjEnXG5jb25zdCBERUZBVUxUX1BPUlQgPSA0NDQ0XG5jb25zdCBERUZBVUxUX1BST1RPQ09MID0gJ2h0dHAnXG5cbi8qKlxuICogaGVscGVyIHRvIGRldGVjdCB0aGUgU2VsZW5pdW0gYmFja2VuZCBhY2NvcmRpbmcgdG8gZ2l2ZW4gY2FwYWJpbGl0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RCYWNrZW5kIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHBvcnQsIGhvc3RuYW1lLCB1c2VyLCBrZXksIHByb3RvY29sIH0gPSBvcHRpb25zXG5cbiAgICAvKipcbiAgICAgKiBicm93c2Vyc3RhY2tcbiAgICAgKiBlLmcuIHpIY3Y5c1ozOWlwOFpQc3hCVkoyXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiB1c2VyID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoID09PSAyMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG9zdG5hbWU6ICdodWIuYnJvd3NlcnN0YWNrLmNvbScsXG4gICAgICAgICAgICBwb3J0OiA4MFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdGVzdGluZ2JvdFxuICAgICAqIGUuZy4gZWMzMzdkN2I2Nzc3MjBhNGRkZTdiZDcyYmUwYmZjNjdcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIHVzZXIgPT09ICdzdHJpbmcnICYmIGtleS5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBob3N0bmFtZTogJ2h1Yi50ZXN0aW5nYm90LmNvbScsXG4gICAgICAgICAgICBwb3J0OiA4MFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F1Y2UgTGFic1xuICAgICAqIGUuZy4gNTBhYTE1MmMtMTkzMi1CMmYwLTk3MDctMTh6NDZxMm4xbWIwXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiB1c2VyID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoID09PSAzNikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdG9jb2w6IHByb3RvY29sIHx8ICdodHRwcycsXG4gICAgICAgICAgICBob3N0bmFtZTogaG9zdG5hbWUgfHwgJ29uZGVtYW5kLnNhdWNlbGFicy5jb20nLFxuICAgICAgICAgICAgcG9ydDogcG9ydCB8fCA0NDNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5vIGNsb3VkIHByb3ZpZGVyIGRldGVjdGVkLCBmYWxsYmFjayB0byBsb2NhbCBicm93c2VyIGRyaXZlclxuICAgICAqL1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3RuYW1lOiBob3N0bmFtZSB8fCBERUZBVUxUX0hPU1ROQU1FLFxuICAgICAgICBwb3J0OiBwb3J0IHx8IERFRkFVTFRfUE9SVCxcbiAgICAgICAgcHJvdG9jb2w6IHByb3RvY29sIHx8IERFRkFVTFRfUFJPVE9DT0xcbiAgICB9XG59XG5cbi8qKlxuICogQWxsb3dzIHRvIHNhZmVseSByZXF1aXJlIGEgcGFja2FnZSwgaXQgb25seSB0aHJvd3MgaWYgdGhlIHBhY2thZ2Ugd2FzIGZvdW5kXG4gKiBidXQgZmFpbGVkIHRvIGxvYWQgZHVlIHRvIHN5bnRheCBlcnJvcnNcbiAqIEBwYXJhbSAge3N0cmluZ30gbmFtZSAgb2YgcGFja2FnZVxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICBwYWNrYWdlIGNvbnRlbnRcbiAqL1xuZnVuY3Rpb24gc2FmZVJlcXVpcmUgKG5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShuYW1lKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKCFlLm1lc3NhZ2UubWF0Y2goYENhbm5vdCBmaW5kIG1vZHVsZSAnJHtuYW1lfSdgKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBpbml0aWFsaXNlIFwiJHtuYW1lfVwiLlxcbiR7ZS5zdGFja31gKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5cbi8qKlxuICogaW5pdGlhbGlzZSBXZWJkcml2ZXJJTyBjb21wbGlhbnQgcGx1Z2lucyBsaWtlIHJlcG9ydGVyIG9yIHNlcnZpY2VzIGluIHRoZSBmb2xsb3dpbmcgd2F5OlxuICogMS4gaWYgcGFja2FnZSBuYW1lIGlzIHNjb3BlZCAoc3RhcnRzIHdpdGggXCJAXCIpLCByZXF1aXJlIHNjb3BlZCBwYWNrYWdlIG5hbWVcbiAqIDIuIG90aGVyd2lzZSB0cnkgdG8gcmVxdWlyZSBcIkB3ZGlvLzxuYW1lPi08dHlwZT5cIlxuICogMy4gb3RoZXJ3aXNlIHRyeSB0byByZXF1aXJlIFwid2Rpby08bmFtZT4tPHR5cGU+XCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpc2VQbHVnaW4gKG5hbWUsIHR5cGUsIHRhcmdldCA9ICdkZWZhdWx0Jykge1xuICAgIC8qKlxuICAgICAqIGRpcmVjdGx5IGltcG9ydCBwYWNrYWdlcyB0aGF0IGFyZSBzY29wZWRcbiAgICAgKi9cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2UgPSBzYWZlUmVxdWlyZShuYW1lKVxuICAgICAgICByZXR1cm4gc2VydmljZVt0YXJnZXRdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgZm9yIHNjb3BlZCB2ZXJzaW9uIG9mIHBsdWdpbiBmaXJzdCAoZS5nLiBAd2Rpby9zYXVjZS1zZXJ2aWNlKVxuICAgICAqL1xuICAgIGNvbnN0IHNjb3BlZFBsdWdpbiA9IHNhZmVSZXF1aXJlKGBAd2Rpby8ke25hbWUudG9Mb3dlckNhc2UoKX0tJHt0eXBlfWApXG4gICAgaWYgKHNjb3BlZFBsdWdpbikge1xuICAgICAgICByZXR1cm4gc2NvcGVkUGx1Z2luW3RhcmdldF1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVjayBmb3Igb2xkIHR5cGUgb2ZcbiAgICAgKi9cbiAgICBjb25zdCBwbHVnaW4gPSBzYWZlUmVxdWlyZShgd2Rpby0ke25hbWUudG9Mb3dlckNhc2UoKX0tJHt0eXBlfWApXG4gICAgaWYgKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gcGx1Z2luW3RhcmdldF1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBDb3VsZG4ndCBmaW5kIHBsdWdpbiBcIiR7bmFtZX1cIiAke3R5cGV9LCBuZWl0aGVyIGFzIHdkaW8gc2NvcGVkIHBhY2thZ2UgYCtcbiAgICAgICAgYFwiQHdkaW8vJHtuYW1lLnRvTG93ZXJDYXNlKCl9LSR7dHlwZX1cIiBub3IgYXMgY29tbXVuaXR5IHBhY2thZ2UgYCArXG4gICAgICAgIGBcIndkaW8tJHtuYW1lLnRvTG93ZXJDYXNlKCl9LSR7dHlwZX1cIi4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgaGF2ZSBpdCBpbnN0YWxsZWQhYFxuICAgIClcbn1cblxuXG4vKipcbiAqIHZhbGlkYXRlcyBjb25maWd1cmF0aW9ucyBiYXNlZCBvbiBkZWZhdWx0IHZhbHVlc1xuICogQHBhcmFtICB7T2JqZWN0fSBkZWZhdWx0cyAgb2JqZWN0IGRlc2NyaWJpbmcgYWxsIGFsbG93ZWQgcHJvcGVydGllc1xuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgb3B0aW9uIHRvIGNoZWNrIGFnYWluc1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgdmFsaWRhdGVkIGNvbmZpZyBlbnJpY2hlZCB3aXRoIGRlZmF1bHQgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZyAoZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7fVxuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgZXhwZWN0ZWRPcHRpb25dIG9mIE9iamVjdC5lbnRyaWVzKGRlZmF1bHRzKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY2hlY2sgaWYgb3B0aW9ucyBpcyBnaXZlblxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW25hbWVdID09PSAndW5kZWZpbmVkJyAmJiAhZXhwZWN0ZWRPcHRpb24uZGVmYXVsdCAmJiBleHBlY3RlZE9wdGlvbi5yZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXF1aXJlZCBvcHRpb24gXCIke25hbWV9XCIgaXMgbWlzc2luZ2ApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbbmFtZV0gPT09ICd1bmRlZmluZWQnICYmIGV4cGVjdGVkT3B0aW9uLmRlZmF1bHQpIHtcbiAgICAgICAgICAgIHBhcmFtc1tuYW1lXSA9IGV4cGVjdGVkT3B0aW9uLmRlZmF1bHRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwZWN0ZWRPcHRpb24udHlwZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG9wdGlvbnNbbmFtZV0gIT09IGV4cGVjdGVkT3B0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG9wdGlvbiBcIiR7bmFtZX1cIiB0byBiZSB0eXBlIG9mICR7ZXhwZWN0ZWRPcHRpb24udHlwZX0gYnV0IHdhcyAke3R5cGVvZiBvcHRpb25zW25hbWVdfWApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwZWN0ZWRPcHRpb24udHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkT3B0aW9uLnR5cGUob3B0aW9uc1tuYW1lXSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSBjaGVjayBmb3Igb3B0aW9uIFwiJHtuYW1lfVwiIGZhaWxlZDogJHtlLm1lc3NhZ2V9YClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleHBlY3RlZE9wdGlvbi5tYXRjaCAmJiAhb3B0aW9uc1tuYW1lXS5tYXRjaChleHBlY3RlZE9wdGlvbi5tYXRjaCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wdGlvbiBcIiR7bmFtZX1cIiBkb2Vzbid0IG1hdGNoIGV4cGVjdGVkIHZhbHVlczogJHtleHBlY3RlZE9wdGlvbi5tYXRjaH1gKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJhbXNbbmFtZV0gPSBvcHRpb25zW25hbWVdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zXG59XG4iXX0=