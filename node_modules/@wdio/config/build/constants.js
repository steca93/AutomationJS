"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SUPPORTED_HOOKS = exports.DEFAULT_CONFIGS = void 0;

require("source-map-support/register");

const DEFAULT_TIMEOUT = 10000;
/* istanbul ignore next */

const NOOP = function () {};

const DEFAULT_CONFIGS = {
  sync: true,
  specs: [],
  suites: {},
  exclude: [],
  logDir: undefined,
  logLevel: 'info',
  deprecationWarnings: true,
  baseUrl: undefined,
  bail: 0,
  waitforInterval: 500,
  waitforTimeout: 1000,
  framework: 'mocha',
  reporters: [],
  maxInstances: 100,
  maxInstancesPerCapability: 100,
  filesToWatch: [],
  connectionRetryTimeout: 90000,
  connectionRetryCount: 3,
  debug: false,
  execArgv: [],
  runnerEnv: {},
  runner: 'local',

  /**
   * framework defaults
   */
  mochaOpts: {
    timeout: DEFAULT_TIMEOUT
  },
  jasmineNodeOpts: {
    defaultTimeoutInterval: DEFAULT_TIMEOUT
  },
  cucumberOpts: {
    timeout: DEFAULT_TIMEOUT
  },

  /**
   * hooks
   */
  onPrepare: NOOP,
  before: [],
  beforeSession: [],
  beforeSuite: [],
  beforeHook: [],
  beforeTest: [],
  beforeCommand: [],
  afterCommand: [],
  afterTest: [],
  afterHook: [],
  afterSuite: [],
  afterSession: [],
  after: [],
  onComplete: NOOP,
  onError: [],
  onReload: [],

  /**
   * cucumber specific hooks
   */
  beforeFeature: [],
  beforeScenario: [],
  beforeStep: [],
  afterFeature: [],
  afterScenario: [],
  afterStep: []
};
exports.DEFAULT_CONFIGS = DEFAULT_CONFIGS;
const SUPPORTED_HOOKS = ['before', 'beforeSession', 'beforeSuite', 'beforeHook', 'beforeTest', 'beforeCommand', 'afterCommand', 'afterTest', 'afterHook', 'afterSuite', 'afterSession', 'after', 'beforeFeature', 'beforeScenario', 'beforeStep', 'afterFeature', 'afterScenario', 'afterStep', 'onError', 'onReload'];
exports.SUPPORTED_HOOKS = SUPPORTED_HOOKS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiREVGQVVMVF9USU1FT1VUIiwiTk9PUCIsIkRFRkFVTFRfQ09ORklHUyIsInN5bmMiLCJzcGVjcyIsInN1aXRlcyIsImV4Y2x1ZGUiLCJsb2dEaXIiLCJ1bmRlZmluZWQiLCJsb2dMZXZlbCIsImRlcHJlY2F0aW9uV2FybmluZ3MiLCJiYXNlVXJsIiwiYmFpbCIsIndhaXRmb3JJbnRlcnZhbCIsIndhaXRmb3JUaW1lb3V0IiwiZnJhbWV3b3JrIiwicmVwb3J0ZXJzIiwibWF4SW5zdGFuY2VzIiwibWF4SW5zdGFuY2VzUGVyQ2FwYWJpbGl0eSIsImZpbGVzVG9XYXRjaCIsImNvbm5lY3Rpb25SZXRyeVRpbWVvdXQiLCJjb25uZWN0aW9uUmV0cnlDb3VudCIsImRlYnVnIiwiZXhlY0FyZ3YiLCJydW5uZXJFbnYiLCJydW5uZXIiLCJtb2NoYU9wdHMiLCJ0aW1lb3V0IiwiamFzbWluZU5vZGVPcHRzIiwiZGVmYXVsdFRpbWVvdXRJbnRlcnZhbCIsImN1Y3VtYmVyT3B0cyIsIm9uUHJlcGFyZSIsImJlZm9yZSIsImJlZm9yZVNlc3Npb24iLCJiZWZvcmVTdWl0ZSIsImJlZm9yZUhvb2siLCJiZWZvcmVUZXN0IiwiYmVmb3JlQ29tbWFuZCIsImFmdGVyQ29tbWFuZCIsImFmdGVyVGVzdCIsImFmdGVySG9vayIsImFmdGVyU3VpdGUiLCJhZnRlclNlc3Npb24iLCJhZnRlciIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25SZWxvYWQiLCJiZWZvcmVGZWF0dXJlIiwiYmVmb3JlU2NlbmFyaW8iLCJiZWZvcmVTdGVwIiwiYWZ0ZXJGZWF0dXJlIiwiYWZ0ZXJTY2VuYXJpbyIsImFmdGVyU3RlcCIsIlNVUFBPUlRFRF9IT09LUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTUEsZUFBZSxHQUFHLEtBQXhCO0FBRUE7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLFlBQVksQ0FBRSxDQUEzQjs7QUFFTyxNQUFN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eEIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMFxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgTk9PUCA9IGZ1bmN0aW9uICgpIHt9XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTkZJR1MgPSB7XG4gICAgc3luYzogdHJ1ZSxcbiAgICBzcGVjczogW10sXG4gICAgc3VpdGVzOiB7fSxcbiAgICBleGNsdWRlOiBbXSxcbiAgICBsb2dEaXI6IHVuZGVmaW5lZCxcbiAgICBsb2dMZXZlbDogJ2luZm8nLFxuICAgIGRlcHJlY2F0aW9uV2FybmluZ3M6IHRydWUsXG4gICAgYmFzZVVybDogdW5kZWZpbmVkLFxuICAgIGJhaWw6IDAsXG4gICAgd2FpdGZvckludGVydmFsOiA1MDAsXG4gICAgd2FpdGZvclRpbWVvdXQ6IDEwMDAsXG4gICAgZnJhbWV3b3JrOiAnbW9jaGEnLFxuICAgIHJlcG9ydGVyczogW10sXG4gICAgbWF4SW5zdGFuY2VzOiAxMDAsXG4gICAgbWF4SW5zdGFuY2VzUGVyQ2FwYWJpbGl0eTogMTAwLFxuICAgIGZpbGVzVG9XYXRjaDogW10sXG4gICAgY29ubmVjdGlvblJldHJ5VGltZW91dDogOTAwMDAsXG4gICAgY29ubmVjdGlvblJldHJ5Q291bnQ6IDMsXG4gICAgZGVidWc6IGZhbHNlLFxuICAgIGV4ZWNBcmd2OiBbXSxcbiAgICBydW5uZXJFbnY6IHt9LFxuICAgIHJ1bm5lcjogJ2xvY2FsJyxcblxuICAgIC8qKlxuICAgICAqIGZyYW1ld29yayBkZWZhdWx0c1xuICAgICAqL1xuICAgIG1vY2hhT3B0czoge1xuICAgICAgICB0aW1lb3V0OiBERUZBVUxUX1RJTUVPVVRcbiAgICB9LFxuICAgIGphc21pbmVOb2RlT3B0czoge1xuICAgICAgICBkZWZhdWx0VGltZW91dEludGVydmFsOiBERUZBVUxUX1RJTUVPVVRcbiAgICB9LFxuICAgIGN1Y3VtYmVyT3B0czoge1xuICAgICAgICB0aW1lb3V0OiBERUZBVUxUX1RJTUVPVVRcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaG9va3NcbiAgICAgKi9cbiAgICBvblByZXBhcmU6IE5PT1AsXG4gICAgYmVmb3JlOiBbXSxcbiAgICBiZWZvcmVTZXNzaW9uOiBbXSxcbiAgICBiZWZvcmVTdWl0ZTogW10sXG4gICAgYmVmb3JlSG9vazogW10sXG4gICAgYmVmb3JlVGVzdDogW10sXG4gICAgYmVmb3JlQ29tbWFuZDogW10sXG4gICAgYWZ0ZXJDb21tYW5kOiBbXSxcbiAgICBhZnRlclRlc3Q6IFtdLFxuICAgIGFmdGVySG9vazogW10sXG4gICAgYWZ0ZXJTdWl0ZTogW10sXG4gICAgYWZ0ZXJTZXNzaW9uOiBbXSxcbiAgICBhZnRlcjogW10sXG4gICAgb25Db21wbGV0ZTogTk9PUCxcbiAgICBvbkVycm9yOiBbXSxcbiAgICBvblJlbG9hZDogW10sXG5cbiAgICAvKipcbiAgICAgKiBjdWN1bWJlciBzcGVjaWZpYyBob29rc1xuICAgICAqL1xuICAgIGJlZm9yZUZlYXR1cmU6IFtdLFxuICAgIGJlZm9yZVNjZW5hcmlvOiBbXSxcbiAgICBiZWZvcmVTdGVwOiBbXSxcbiAgICBhZnRlckZlYXR1cmU6IFtdLFxuICAgIGFmdGVyU2NlbmFyaW86IFtdLFxuICAgIGFmdGVyU3RlcDogW11cbn1cblxuZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9IT09LUyA9IFtcbiAgICAnYmVmb3JlJywgJ2JlZm9yZVNlc3Npb24nLCAnYmVmb3JlU3VpdGUnLCAnYmVmb3JlSG9vaycsICdiZWZvcmVUZXN0JywgJ2JlZm9yZUNvbW1hbmQnLFxuICAgICdhZnRlckNvbW1hbmQnLCAnYWZ0ZXJUZXN0JywgJ2FmdGVySG9vaycsICdhZnRlclN1aXRlJywgJ2FmdGVyU2Vzc2lvbicsICdhZnRlcicsXG4gICAgJ2JlZm9yZUZlYXR1cmUnLCAnYmVmb3JlU2NlbmFyaW8nLCAnYmVmb3JlU3RlcCcsICdhZnRlckZlYXR1cmUnLFxuICAgICdhZnRlclNjZW5hcmlvJywgJ2FmdGVyU3RlcCcsICdvbkVycm9yJywgJ29uUmVsb2FkJ1xuXVxuIl19