"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasWdioSyncSupport = exports.wrapCommand = exports.runFnInFiberContext = exports.runTestInFiberContext = exports.executeHooksWithArgs = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-config');

const NOOP = () => {};

let executeHooksWithArgs = async function executeHooksWithArgsShim(hooks, args) {
  /**
   * make sure hooks are an array of functions
   */
  if (!Array.isArray(hooks)) {
    hooks = [hooks];
  }
  /**
   * make sure args is an array since we are calling apply
   */


  if (!Array.isArray(args)) {
    args = [args];
  }

  hooks = hooks.map(hook => new Promise(resolve => {
    let result;

    try {
      result = hook.apply(null, args);
    } catch (e) {
      log.error(e.stack);
      return resolve();
    }
    /**
     * if a promise is returned make sure we don't have a catch handler
     * so in case of a rejection it won't cause the hook to fail
     */


    if (result && typeof result.then === 'function') {
      return result.then(resolve, e => {
        log.error(e.stack);
        resolve();
      });
    }

    resolve(result);
  }));
  return Promise.all(hooks);
};

exports.executeHooksWithArgs = executeHooksWithArgs;
let runTestInFiberContext = NOOP;
exports.runTestInFiberContext = runTestInFiberContext;

let runFnInFiberContext = (fn, done) => {
  return function (...args) {
    const result = fn.apply(this, args);

    if (typeof done === 'function') {
      return done(result);
    }

    return result;
  };
};

exports.runFnInFiberContext = runFnInFiberContext;

let wrapCommand = (_, origFn) => origFn;

exports.wrapCommand = wrapCommand;
let hasWdioSyncSupport = false;
/**
 * shim to make sure that we only wrap commands if wdio-sync is installed as dependency
 */

exports.hasWdioSyncSupport = hasWdioSyncSupport;

try {
  // eslint-disable-next-line import/no-unresolved
  const wdioSync = require('@wdio/sync');

  log.debug('wdio-sync found, running tests synchronous');
  exports.hasWdioSyncSupport = hasWdioSyncSupport = true;
  exports.runFnInFiberContext = runFnInFiberContext = wdioSync.runFnInFiberContext;
  exports.runTestInFiberContext = runTestInFiberContext = wdioSync.runTestInFiberContext;
  exports.wrapCommand = wrapCommand = wdioSync.wrapCommand;
  exports.executeHooksWithArgs = executeHooksWithArgs = wdioSync.executeHooksWithArgs;
} catch (e) {
  log.debug('wdio-sync not found, running tests asynchronous');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaGltLmpzIl0sIm5hbWVzIjpbImxvZyIsIk5PT1AiLCJleGVjdXRlSG9va3NXaXRoQXJncyIsImV4ZWN1dGVIb29rc1dpdGhBcmdzU2hpbSIsImhvb2tzIiwiYXJncyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImhvb2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3VsdCIsImFwcGx5IiwiZSIsImVycm9yIiwic3RhY2siLCJ0aGVuIiwiYWxsIiwicnVuVGVzdEluRmliZXJDb250ZXh0IiwicnVuRm5JbkZpYmVyQ29udGV4dCIsImZuIiwiZG9uZSIsIndyYXBDb21tYW5kIiwiXyIsIm9yaWdGbiIsImhhc1dkaW9TeW5jU3VwcG9ydCIsIndkaW9TeW5jIiwicmVxdWlyZSIsImRlYnVnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxhQUFQLENBQVo7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHLE1BQU0sQ0FBRSxDQUFyQjs7QUFFTyxJQUFJQyxvQkFBb0IsR0FBRyxlQUFlQyx3QkFBZixDQUF5Q0MsS0FBekMsRUFBZ0RDLElBQWhELEVBQXNEO0FBQ3BGOzs7QUFHQSxNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxLQUFkLENBQUwsRUFBMkI7QUFDdkJBLElBQUFBLEtBQUssR0FBRyxDQUFDQSxLQUFELENBQVI7QUFDSDtBQUVEOzs7OztBQUdBLE1BQUksQ0FBQ0UsS0FBSyxDQUFDQyxPQUFOLENBQWNGLElBQWQsQ0FBTCxFQUEwQjtBQUN0QkEsSUFBQUEsSUFBSSxHQUFHLENBQUNBLElBQUQsQ0FBUDtBQUNIOztBQUVERCxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0ksR0FBTixDQUFXQyxJQUFELElBQVUsSUFBSUMsT0FBSixDQUFhQyxPQUFELElBQWE7QUFDakQsUUFBSUMsTUFBSjs7QUFFQSxRQUFJO0FBQ0FBLE1BQUFBLE1BQU0sR0FBR0gsSUFBSSxDQUFDSSxLQUFMLENBQVcsSUFBWCxFQUFpQlIsSUFBakIsQ0FBVDtBQUNILEtBRkQsQ0FFRSxPQUFPUyxDQUFQLEVBQVU7QUFDUmQsTUFBQUEsR0FBRyxDQUFDZSxLQUFKLENBQVVELENBQUMsQ0FBQ0UsS0FBWjtBQUNBLGFBQU9MLE9BQU8sRUFBZDtBQUNIO0FBRUQ7Ozs7OztBQUlBLFFBQUlDLE1BQU0sSUFBSSxPQUFPQSxNQUFNLENBQUNLLElBQWQsS0FBdUIsVUFBckMsRUFBaUQ7QUFDN0MsYUFBT0wsTUFBTSxDQUFDSyxJQUFQLENBQVlOLE9BQVosRUFBc0JHLENBQUQsSUFBTztBQUMvQmQsUUFBQUEsR0FBRyxDQUFDZSxLQUFKLENBQVVELENBQUMsQ0FBQ0UsS0FBWjtBQUNBTCxRQUFBQSxPQUFPO0FBQ1YsT0FITSxDQUFQO0FBSUg7O0FBRURBLElBQUFBLE9BQU8sQ0FBQ0MsTUFBRCxDQUFQO0FBQ0gsR0F0QjJCLENBQXBCLENBQVI7QUF3QkEsU0FBT0YsT0FBTyxDQUFDUSxHQUFSLENBQVlkLEtBQVosQ0FBUDtBQUNILENBeENNOzs7QUEwQ0EsSUFBSWUscUJBQXFCLEdBQUdsQixJQUE1Qjs7O0FBQ0EsSUFBSW1CLG1CQUFtQixHQUFHLENBQUNDLEVBQUQsRUFBS0MsSUFBTCxLQUFjO0FBQzNDLFNBQU8sVUFBVSxHQUFHakIsSUFBYixFQUFtQjtBQUN0QixVQUFNTyxNQUFNLEdBQUdTLEVBQUUsQ0FBQ1IsS0FBSCxDQUFTLElBQVQsRUFBZVIsSUFBZixDQUFmOztBQUVBLFFBQUksT0FBT2lCLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDNUIsYUFBT0EsSUFBSSxDQUFDVixNQUFELENBQVg7QUFDSDs7QUFFRCxXQUFPQSxNQUFQO0FBQ0gsR0FSRDtBQVNILENBVk07Ozs7QUFXQSxJQUFJVyxXQUFXLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFJQyxNQUFKLEtBQWVBLE1BQWpDOzs7QUFDQSxJQUFJQyxrQkFBa0IsR0FBRyxLQUF6QjtBQUVQOzs7Ozs7QUFHQSxJQUFJO0FBQ0E7QUFDQSxRQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBNUIsRUFBQUEsR0FBRyxDQUFDNkIsS0FBSixDQUFVLDRDQUFWO0FBRUEsK0JBQUFILGtCQUFrQixHQUFHLElBQXJCO0FBQ0EsZ0NBQUFOLG1CQUFtQixHQUFHTyxRQUFRLENBQUNQLG1CQUEvQjtBQUNBLGtDQUFBRCxxQkFBcUIsR0FBR1EsUUFBUSxDQUFDUixxQkFBakM7QUFDQSx3QkFBQUksV0FBVyxHQUFHSSxRQUFRLENBQUNKLFdBQXZCO0FBQ0EsaUNBQUFyQixvQkFBb0IsR0FBR3lCLFFBQVEsQ0FBQ3pCLG9CQUFoQztBQUNILENBVkQsQ0FVRSxPQUFPWSxDQUFQLEVBQVU7QUFDUmQsRUFBQUEsR0FBRyxDQUFDNkIsS0FBSixDQUFVLGlEQUFWO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcblxuY29uc3QgbG9nID0gbG9nZ2VyKCd3ZGlvLWNvbmZpZycpXG5jb25zdCBOT09QID0gKCkgPT4ge31cblxuZXhwb3J0IGxldCBleGVjdXRlSG9va3NXaXRoQXJncyA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVIb29rc1dpdGhBcmdzU2hpbSAoaG9va3MsIGFyZ3MpIHtcbiAgICAvKipcbiAgICAgKiBtYWtlIHN1cmUgaG9va3MgYXJlIGFuIGFycmF5IG9mIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIGlmICghQXJyYXkuaXNBcnJheShob29rcykpIHtcbiAgICAgICAgaG9va3MgPSBbaG9va3NdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbWFrZSBzdXJlIGFyZ3MgaXMgYW4gYXJyYXkgc2luY2Ugd2UgYXJlIGNhbGxpbmcgYXBwbHlcbiAgICAgKi9cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgYXJncyA9IFthcmdzXVxuICAgIH1cblxuICAgIGhvb2tzID0gaG9va3MubWFwKChob29rKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhvb2suYXBwbHkobnVsbCwgYXJncylcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUuc3RhY2spXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogaWYgYSBwcm9taXNlIGlzIHJldHVybmVkIG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIGEgY2F0Y2ggaGFuZGxlclxuICAgICAgICAgKiBzbyBpbiBjYXNlIG9mIGEgcmVqZWN0aW9uIGl0IHdvbid0IGNhdXNlIHRoZSBob29rIHRvIGZhaWxcbiAgICAgICAgICovXG4gICAgICAgIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4ocmVzb2x2ZSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZS5zdGFjaylcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICB9KSlcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChob29rcylcbn1cblxuZXhwb3J0IGxldCBydW5UZXN0SW5GaWJlckNvbnRleHQgPSBOT09QXG5leHBvcnQgbGV0IHJ1bkZuSW5GaWJlckNvbnRleHQgPSAoZm4sIGRvbmUpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4uYXBwbHkodGhpcywgYXJncylcblxuICAgICAgICBpZiAodHlwZW9mIGRvbmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBkb25lKHJlc3VsdClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG59XG5leHBvcnQgbGV0IHdyYXBDb21tYW5kID0gKF8sIG9yaWdGbikgPT4gb3JpZ0ZuXG5leHBvcnQgbGV0IGhhc1dkaW9TeW5jU3VwcG9ydCA9IGZhbHNlXG5cbi8qKlxuICogc2hpbSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBvbmx5IHdyYXAgY29tbWFuZHMgaWYgd2Rpby1zeW5jIGlzIGluc3RhbGxlZCBhcyBkZXBlbmRlbmN5XG4gKi9cbnRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG4gICAgY29uc3Qgd2Rpb1N5bmMgPSByZXF1aXJlKCdAd2Rpby9zeW5jJylcbiAgICBsb2cuZGVidWcoJ3dkaW8tc3luYyBmb3VuZCwgcnVubmluZyB0ZXN0cyBzeW5jaHJvbm91cycpXG5cbiAgICBoYXNXZGlvU3luY1N1cHBvcnQgPSB0cnVlXG4gICAgcnVuRm5JbkZpYmVyQ29udGV4dCA9IHdkaW9TeW5jLnJ1bkZuSW5GaWJlckNvbnRleHRcbiAgICBydW5UZXN0SW5GaWJlckNvbnRleHQgPSB3ZGlvU3luYy5ydW5UZXN0SW5GaWJlckNvbnRleHRcbiAgICB3cmFwQ29tbWFuZCA9IHdkaW9TeW5jLndyYXBDb21tYW5kXG4gICAgZXhlY3V0ZUhvb2tzV2l0aEFyZ3MgPSB3ZGlvU3luYy5leGVjdXRlSG9va3NXaXRoQXJnc1xufSBjYXRjaCAoZSkge1xuICAgIGxvZy5kZWJ1Zygnd2Rpby1zeW5jIG5vdCBmb3VuZCwgcnVubmluZyB0ZXN0cyBhc3luY2hyb25vdXMnKVxufVxuIl19