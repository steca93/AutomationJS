'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

exports.default = getLogger;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _loglevel = require('loglevel');

var _loglevel2 = _interopRequireDefault(_loglevel);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _loglevelPluginPrefix = require('loglevel-plugin-prefix');

var _loglevelPluginPrefix2 = _interopRequireDefault(_loglevelPluginPrefix);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();


const DEFAULT_LEVEL = 0;
const COLORS = {
    error: 'red',
    warn: 'yellow',
    info: 'cyanBright',
    debug: 'green',
    trace: 'cyan'
};

const SERIALIZERS = [{
    /**
     * display error stack
     */
    matches: err => err instanceof Error,
    serialize: err => err.stack
}, {
    /**
     * color commands blue
     */
    matches: log => log === 'COMMAND',
    serialize: log => _chalk2.default.magenta(log)
}, {
    /**
     * color data yellow
     */
    matches: log => log === 'DATA',
    serialize: log => _chalk2.default.yellow(log)
}, {
    /**
     * color result cyan
     */
    matches: log => log === 'RESULT',
    serialize: log => _chalk2.default.cyan(log)
}];

const loggers = {};
const logCache = new Set();
let logFile;

const originalFactory = _loglevel2.default.methodFactory;
_loglevel2.default.methodFactory = function (methodName, logLevel, loggerName) {
    const rawMethod = originalFactory(methodName, logLevel, loggerName);
    return (...args) => {
        /**
         * create logFile lazily
         */
        if (!logFile && process.env.WDIO_LOG_PATH) {
            logFile = _fs2.default.createWriteStream(process.env.WDIO_LOG_PATH);
        }

        args = args.map(arg => {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = SERIALIZERS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    const s = _step.value;

                    if (s.matches(arg)) {
                        return s.serialize(arg);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return arg;
        });

        const logText = (0, _stripAnsi2.default)(`${_util2.default.format.apply(this, args)}\n`);
        if (logFile) {
            /**
             * empty logging cache if stuff got logged before
             */
            if (logCache.size) {
                logCache.forEach(log => logFile.write(log));
                logCache.clear();
            }

            return logFile.write(logText);
        }

        logCache.add(logText);
        rawMethod(...args);
    };
};

_loglevelPluginPrefix2.default.apply(_loglevel2.default, {
    template: '%t %l %n:',
    timestampFormatter: date => _chalk2.default.gray(date.toISOString()),
    levelFormatter: level => _chalk2.default[COLORS[level]](level.toUpperCase()),
    nameFormatter: name => _chalk2.default.whiteBright(name || 'global')
});

function getLogger(name) {
    /**
     * check if logger was already initiated
     */
    if (loggers[name]) {
        return loggers[name];
    }

    loggers[name] = _loglevel2.default.getLogger(name);
    loggers[name].setLevel(process.env.WDIO_LOG_LEVEL || DEFAULT_LEVEL);
    return loggers[name];
}

getLogger.setLevel = (name, level) => loggers[name].setLevel(level);
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJnZXRMb2dnZXIiLCJERUZBVUxUX0xFVkVMIiwiQ09MT1JTIiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwidHJhY2UiLCJTRVJJQUxJWkVSUyIsIm1hdGNoZXMiLCJlcnIiLCJFcnJvciIsInNlcmlhbGl6ZSIsInN0YWNrIiwibG9nIiwiY2hhbGsiLCJtYWdlbnRhIiwieWVsbG93IiwiY3lhbiIsImxvZ2dlcnMiLCJsb2dDYWNoZSIsIlNldCIsImxvZ0ZpbGUiLCJvcmlnaW5hbEZhY3RvcnkiLCJtZXRob2RGYWN0b3J5IiwibWV0aG9kTmFtZSIsImxvZ0xldmVsIiwibG9nZ2VyTmFtZSIsInJhd01ldGhvZCIsImFyZ3MiLCJwcm9jZXNzIiwiZW52IiwiV0RJT19MT0dfUEFUSCIsImZzIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJtYXAiLCJhcmciLCJzIiwibG9nVGV4dCIsInV0aWwiLCJmb3JtYXQiLCJhcHBseSIsInNpemUiLCJmb3JFYWNoIiwid3JpdGUiLCJjbGVhciIsImFkZCIsInByZWZpeCIsInRlbXBsYXRlIiwidGltZXN0YW1wRm9ybWF0dGVyIiwiZGF0ZSIsImdyYXkiLCJ0b0lTT1N0cmluZyIsImxldmVsRm9ybWF0dGVyIiwibGV2ZWwiLCJ0b1VwcGVyQ2FzZSIsIm5hbWVGb3JtYXR0ZXIiLCJuYW1lIiwid2hpdGVCcmlnaHQiLCJzZXRMZXZlbCIsIldESU9fTE9HX0xFVkVMIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkEyRndCQSxTOztBQTNGeEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7QUFFQSxNQUFNQyxnQkFBZ0IsQ0FBdEI7QUFDQSxNQUFNQyxTQUFTO0FBQ1hDLFdBQU8sS0FESTtBQUVYQyxVQUFNLFFBRks7QUFHWEMsVUFBTSxZQUhLO0FBSVhDLFdBQU8sT0FKSTtBQUtYQyxXQUFPO0FBTEksQ0FBZjs7QUFRQSxNQUFNQyxjQUFj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QTBCO0FBQ3JDOzs7QUFHQSxRQUFJdEMsUUFBUXNDLElBQVIsQ0FBSixFQUFtQjtBQUNmLGVBQU90QyxRQUFRc0MsSUFBUixDQUFQO0FBQ0g7O0FBRUR0QyxZQUFRc0MsSUFBUixJQUFnQjNDLG1CQUFJZCxTQUFKLENBQWN5RCxJQUFkLENBQWhCO0FBQ0F0QyxZQUFRc0MsSUFBUixFQUFjRSxRQUFkLENBQXVCN0IsUUFBUUMsR0FBUixDQUFZNkIsY0FBWixJQUE4QjNELGFBQXJEO0FBQ0EsV0FBT2tCLFFBQVFzQyxJQUFSLENBQVA7QUFDSDs7QUFFRHpELFVBQVUyRCxRQUFWLEdBQXFCLENBQUNGLElBQUQsRUFBT0gsS0FBUCxLQUFpQm5DLFFBQVFzQyxJQUFSLEVBQWNFLFFBQWQsQ0FBdUJMLEtBQXZCLENBQXRDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCdcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnXG5pbXBvcnQgcHJlZml4IGZyb20gJ2xvZ2xldmVsLXBsdWdpbi1wcmVmaXgnXG5pbXBvcnQgYW5zaVN0cmlwIGZyb20gJ3N0cmlwLWFuc2knXG5cbmNvbnN0IERFRkFVTFRfTEVWRUwgPSAwXG5jb25zdCBDT0xPUlMgPSB7XG4gICAgZXJyb3I6ICdyZWQnLFxuICAgIHdhcm46ICd5ZWxsb3cnLFxuICAgIGluZm86ICdjeWFuQnJpZ2h0JyxcbiAgICBkZWJ1ZzogJ2dyZWVuJyxcbiAgICB0cmFjZTogJ2N5YW4nXG59XG5cbmNvbnN0IFNFUklBTElaRVJTID0gW3tcbiAgICAvKipcbiAgICAgKiBkaXNwbGF5IGVycm9yIHN0YWNrXG4gICAgICovXG4gICAgbWF0Y2hlczogKGVycikgPT4gZXJyIGluc3RhbmNlb2YgRXJyb3IsXG4gICAgc2VyaWFsaXplOiAoZXJyKSA9PiBlcnIuc3RhY2tcbn0sIHtcbiAgICAvKipcbiAgICAgKiBjb2xvciBjb21tYW5kcyBibHVlXG4gICAgICovXG4gICAgbWF0Y2hlczogKGxvZykgPT4gbG9nID09PSAnQ09NTUFORCcsXG4gICAgc2VyaWFsaXplOiAobG9nKSA9PiBjaGFsay5tYWdlbnRhKGxvZylcbn0sIHtcbiAgICAvKipcbiAgICAgKiBjb2xvciBkYXRhIHllbGxvd1xuICAgICAqL1xuICAgIG1hdGNoZXM6IChsb2cpID0+IGxvZyA9PT0gJ0RBVEEnLFxuICAgIHNlcmlhbGl6ZTogKGxvZykgPT4gY2hhbGsueWVsbG93KGxvZylcbn0sIHtcbiAgICAvKipcbiAgICAgKiBjb2xvciByZXN1bHQgY3lhblxuICAgICAqL1xuICAgIG1hdGNoZXM6IChsb2cpID0+IGxvZyA9PT0gJ1JFU1VMVCcsXG4gICAgc2VyaWFsaXplOiAobG9nKSA9PiBjaGFsay5jeWFuKGxvZylcbn1dXG5cbmNvbnN0IGxvZ2dlcnMgPSB7fVxuY29uc3QgbG9nQ2FjaGUgPSBuZXcgU2V0KClcbmxldCBsb2dGaWxlXG5cbmNvbnN0IG9yaWdpbmFsRmFjdG9yeSA9IGxvZy5tZXRob2RGYWN0b3J5XG5sb2cubWV0aG9kRmFjdG9yeSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBsb2dMZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgIGNvbnN0IHJhd01ldGhvZCA9IG9yaWdpbmFsRmFjdG9yeShtZXRob2ROYW1lLCBsb2dMZXZlbCwgbG9nZ2VyTmFtZSlcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNyZWF0ZSBsb2dGaWxlIGxhemlseVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCFsb2dGaWxlICYmIHByb2Nlc3MuZW52LldESU9fTE9HX1BBVEgpIHtcbiAgICAgICAgICAgIGxvZ0ZpbGUgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShwcm9jZXNzLmVudi5XRElPX0xPR19QQVRIKVxuICAgICAgICB9XG5cbiAgICAgICAgYXJncyA9IGFyZ3MubWFwKChhcmcpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBTRVJJQUxJWkVSUykge1xuICAgICAgICAgICAgICAgIGlmIChzLm1hdGNoZXMoYXJnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5zZXJpYWxpemUoYXJnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmdcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBsb2dUZXh0ID0gYW5zaVN0cmlwKGAke3V0aWwuZm9ybWF0LmFwcGx5KHRoaXMsIGFyZ3MpfVxcbmApXG4gICAgICAgIGlmIChsb2dGaWxlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGVtcHR5IGxvZ2dpbmcgY2FjaGUgaWYgc3R1ZmYgZ290IGxvZ2dlZCBiZWZvcmVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGxvZ0NhY2hlLnNpemUpIHtcbiAgICAgICAgICAgICAgICBsb2dDYWNoZS5mb3JFYWNoKChsb2cpID0+IGxvZ0ZpbGUud3JpdGUobG9nKSlcbiAgICAgICAgICAgICAgICBsb2dDYWNoZS5jbGVhcigpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBsb2dGaWxlLndyaXRlKGxvZ1RleHQpXG4gICAgICAgIH1cblxuICAgICAgICBsb2dDYWNoZS5hZGQobG9nVGV4dClcbiAgICAgICAgcmF3TWV0aG9kKC4uLmFyZ3MpXG4gICAgfVxufVxuXG5wcmVmaXguYXBwbHkobG9nLCB7XG4gICAgdGVtcGxhdGU6ICcldCAlbCAlbjonLFxuICAgIHRpbWVzdGFtcEZvcm1hdHRlcjogKGRhdGUpID0+IGNoYWxrLmdyYXkoZGF0ZS50b0lTT1N0cmluZygpKSxcbiAgICBsZXZlbEZvcm1hdHRlcjogKGxldmVsKSA9PiBjaGFsa1tDT0xPUlNbbGV2ZWxdXShsZXZlbC50b1VwcGVyQ2FzZSgpKSxcbiAgICBuYW1lRm9ybWF0dGVyOiAobmFtZSkgPT4gY2hhbGsud2hpdGVCcmlnaHQobmFtZSB8fCAnZ2xvYmFsJylcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExvZ2dlciAobmFtZSkge1xuICAgIC8qKlxuICAgICAqIGNoZWNrIGlmIGxvZ2dlciB3YXMgYWxyZWFkeSBpbml0aWF0ZWRcbiAgICAgKi9cbiAgICBpZiAobG9nZ2Vyc1tuYW1lXSkge1xuICAgICAgICByZXR1cm4gbG9nZ2Vyc1tuYW1lXVxuICAgIH1cblxuICAgIGxvZ2dlcnNbbmFtZV0gPSBsb2cuZ2V0TG9nZ2VyKG5hbWUpXG4gICAgbG9nZ2Vyc1tuYW1lXS5zZXRMZXZlbChwcm9jZXNzLmVudi5XRElPX0xPR19MRVZFTCB8fCBERUZBVUxUX0xFVkVMKVxuICAgIHJldHVybiBsb2dnZXJzW25hbWVdXG59XG5cbmdldExvZ2dlci5zZXRMZXZlbCA9IChuYW1lLCBsZXZlbCkgPT4gbG9nZ2Vyc1tuYW1lXS5zZXRMZXZlbChsZXZlbClcbiJdfQ==