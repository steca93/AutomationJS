'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sourceMapSupport2 = require('source-map-support');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _ansiEscapes = require('ansi-escapes');

var _ansiEscapes2 = _interopRequireDefault(_ansiEscapes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();
class CLInterface {
    constructor() {
        var _context;

        this.i = 0;
        this.stdoutBuffer = [];
        this.stderrBuffer = [];
        this.out = (_context = process.stdout).write.bind(_context);
        this.err = (_context = process.stderr).write.bind(_context);

        this.clearAll();

        /**
         * don't modify stdout and stderr streams for unit tests
         */
        /* istanbul ignore if */
        if (!process.env.WDIO_TEST) {
            this.wrapStdio(process.stdout, this.stdoutBuffer);
            this.wrapStdio(process.stderr, this.stderrBuffer);
        }
    }

    wrapStdio(stream, buffer) {
        stream.write = chunk => {
            buffer.push(chunk);
            return true;
        };
    }

    clearAll() {
        this.out(_ansiEscapes2.default.clearScreen);
    }

    clearLine() {
        this.out(_ansiEscapes2.default.eraseStartLine);
        this.out(_ansiEscapes2.default.cursorLeft);
    }

    log(...messages) {
        this.out(_util2.default.format.apply(this, messages) + '\n');
    }

    write(message) {
        this.out(message);
    }
}
exports.default = CLInterface;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDTEludGVyZmFjZSIsImNvbnN0cnVjdG9yIiwiaSIsInN0ZG91dEJ1ZmZlciIsInN0ZGVyckJ1ZmZlciIsIm91dCIsInN0ZG91dCIsIndyaXRlIiwiZXJyIiwic3RkZXJyIiwiY2xlYXJBbGwiLCJwcm9jZXNzIiwiZW52IiwiV0RJT19URVNUIiwid3JhcFN0ZGlvIiwic3RyZWFtIiwiYnVmZmVyIiwiY2h1bmsiLCJwdXNoIiwiYW5zaUVzY2FwZXMiLCJjbGVhclNjcmVlbiIsImNsZWFyTGluZSIsImVyYXNlU3RhcnRMaW5lIiwiY3Vyc29yTGVmdCIsImxvZyIsIm1lc3NhZ2VzIiwidXRpbCIsImZvcm1hdCIsImFwcGx5IiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7O0FBRWUsTUFBTUEsV0FBTixDQUFrQjtBQUM3QkMsa0JBQWU7QUFBQTs7QUFDWCxhQUFLQyxDQUFMLEdBQVMsQ0FBVDtBQUNBLGFBQUtDLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxhQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsYUFBS0MsR0FBTCxHQUFhLG9CQUFRQyxNQUFSLEVBQWVDLEtBQTVCO0FBQ0EsYUFBS0MsR0FBTCxHQUFhLG9CQUFRQyxNQUFSLEVBQWVGLEtBQTVCOztBQUVBLGFBQUtHLFFBQUw7O0FBRUE7OztBQUdBO0FBQ0EsWUFBSSxDQUFDQyxRQUFRQyxHQUFSLENBQVlDLFNBQWpCLEVBQTRCO0FBQ3hCLGlCQUFLQyxTQUFMLENBQWVILFFBQVFMLE1BQXZCLEVBQStCLEtBQUtILFlBQXBDO0FBQ0EsaUJBQUtXLFNBQUwsQ0FBZUgsUUFBUUYsTUFBdkIsRUFBK0IsS0FBS0wsWUFBcEM7QUFDSDtBQUNKOztBQUVEVSxjQUFVQyxNQUFWLEVBQWtCQyxNQUFsQixFQUEwQjtBQUN0QkQsZUFBT1IsS0FBUCxHQUFlVSxTQUFTO0FBQ3BCRCxtQkFBT0UsSUFBUCxDQUFZRCxLQUFaO0FBQ0EsbUJBQU8sSUFBUDtBQUNILFNBSEQ7QUFJSDs7QUFFRFAsZUFBWTtBQUNSLGFBQUtMLEdBQUwsQ0FBU2Msc0JBQVlDLFdBQXJCO0FBQ0g7O0FBRURDLGdCQUFhO0FBQ1QsYUFBS2hCLEdBQUwsQ0FBU2Msc0JBQVlHLGNBQXJCO0FBQ0EsYUFBS2pCLEdBQUwsQ0FBU2Msc0JBQVlJLFVBQXJCO0FBQ0g7O0FBRURDLFFBQUksR0FBR0MsUUFBUCxFQUFpQjtBQUNiLGFBQUtwQixHQUFMLENBQVNxQixlQUFLQyxNQUFMLENBQVlDLEtBQVosQ0FBa0IsSUFBbEIsRUFBd0JILFFBQXhCLElBQW9DLElBQTdDO0FBQ0g7O0FBRURsQixVQUFPc0IsT0FBUCxFQUFnQjtBQUNaLGFBQUt4QixHQUFMLENBQVN3QixPQUFUO0FBQ0g7QUExQzRCO2tCQUFaN0IsVyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgYW5zaUVzY2FwZXMgZnJvbSAnYW5zaS1lc2NhcGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDTEludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmkgPSAwXG4gICAgICAgIHRoaXMuc3Rkb3V0QnVmZmVyID0gW11cbiAgICAgICAgdGhpcy5zdGRlcnJCdWZmZXIgPSBbXVxuICAgICAgICB0aGlzLm91dCA9IDo6cHJvY2Vzcy5zdGRvdXQud3JpdGVcbiAgICAgICAgdGhpcy5lcnIgPSA6OnByb2Nlc3Muc3RkZXJyLndyaXRlXG5cbiAgICAgICAgdGhpcy5jbGVhckFsbCgpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRvbid0IG1vZGlmeSBzdGRvdXQgYW5kIHN0ZGVyciBzdHJlYW1zIGZvciB1bml0IHRlc3RzXG4gICAgICAgICAqL1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5XRElPX1RFU1QpIHtcbiAgICAgICAgICAgIHRoaXMud3JhcFN0ZGlvKHByb2Nlc3Muc3Rkb3V0LCB0aGlzLnN0ZG91dEJ1ZmZlcilcbiAgICAgICAgICAgIHRoaXMud3JhcFN0ZGlvKHByb2Nlc3Muc3RkZXJyLCB0aGlzLnN0ZGVyckJ1ZmZlcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHdyYXBTdGRpbyhzdHJlYW0sIGJ1ZmZlcikge1xuICAgICAgICBzdHJlYW0ud3JpdGUgPSBjaHVuayA9PiB7XG4gICAgICAgICAgICBidWZmZXIucHVzaChjaHVuaylcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckFsbCAoKSB7XG4gICAgICAgIHRoaXMub3V0KGFuc2lFc2NhcGVzLmNsZWFyU2NyZWVuKVxuICAgIH1cblxuICAgIGNsZWFyTGluZSAoKSB7XG4gICAgICAgIHRoaXMub3V0KGFuc2lFc2NhcGVzLmVyYXNlU3RhcnRMaW5lKVxuICAgICAgICB0aGlzLm91dChhbnNpRXNjYXBlcy5jdXJzb3JMZWZ0KVxuICAgIH1cblxuICAgIGxvZyguLi5tZXNzYWdlcykge1xuICAgICAgICB0aGlzLm91dCh1dGlsLmZvcm1hdC5hcHBseSh0aGlzLCBtZXNzYWdlcykgKyAnXFxuJylcbiAgICB9XG5cbiAgICB3cml0ZSAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLm91dChtZXNzYWdlKVxuICAgIH1cbn1cbiJdfQ==